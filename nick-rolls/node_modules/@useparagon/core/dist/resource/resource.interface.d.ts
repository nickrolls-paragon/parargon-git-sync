import { UserProfileUIConfig } from '../integration/custom.integration.interface';
import { HttpMethodWithBody, HttpMethodWithoutBody } from '../steps/library/request/request.interface';
import { IResourceContext } from './resource.context.interface';
export declare enum ResourceCategory {
    API = "api"
}
export declare enum ResourceConnectionScope {
    APP = "APP",
    USER = "USER"
}
export declare enum ResourceAuthorizationType {
    NONE = "none",
    OAUTH = "oauth",
    OAUTH_CLIENT_CREDENTIAL = "oauth_client_credential",
    API_KEY = "api_key"
}
export declare enum OAUTH_CLIENT_CREDENTIAL_REQUEST_TYPE {
    BodyParam = "body-param",
    BasicAuthHeader = "basic-auth-header"
}
type AppConnectionScopeAuthorizationOptions = {
    type: `${ResourceAuthorizationType.NONE}`;
} | {
    type: `${ResourceAuthorizationType.OAUTH_CLIENT_CREDENTIAL}`;
    accessTokenUrl: string;
    userInputs: string[];
    audience?: string;
    includeClientIdClientSecretInExchange?: boolean;
} | {
    type: `${ResourceAuthorizationType.API_KEY}`;
};
type UserConnectionScopeAuthorizationOptions = {
    type: `${ResourceAuthorizationType.NONE}`;
} | {
    type: `${ResourceAuthorizationType.OAUTH}`;
    accessTokenUrl: string;
    userInputs: ['access_token', 'refresh_token', ...string[]];
    includeClientIdClientSecretInExchange?: boolean;
} | {
    type: `${ResourceAuthorizationType.OAUTH_CLIENT_CREDENTIAL}`;
    accessTokenUrl: string;
    userInputs: ['clientId', 'clientSecret', ...string[]];
    scopes?: string;
    audience?: string;
    includeClientIdClientSecretInExchange?: boolean;
} | {
    type: `${ResourceAuthorizationType.API_KEY}`;
    userInputs: string[];
};
type APIResourceOptionsInit<T extends `${ResourceConnectionScope}`> = {
    requestOptions: {
        apiBaseUrl: string;
        authentication: {
            type: 'bearer';
            token: string;
        } | {
            type: 'basic';
            userName: string;
            password: string;
        } | {
            type: 'query_params';
            params: Record<string, unknown>;
        } | {
            type: 'auth_header';
            headers: Record<string, unknown>;
        };
    };
    testRequestOptions?: {
        url: string;
        params: Record<string, string>;
        headers: Record<string, string>;
    } & ({
        method: `${HttpMethodWithoutBody}`;
        body?: never;
        bodyType?: never;
    } | {
        method: `${HttpMethodWithBody}`;
        bodyType: 'json' | 'form-data' | 'x-www-form-urlencoded';
        body: Record<string, unknown>;
    } | {
        method: `${HttpMethodWithBody}`;
        bodyType: 'xml' | 'raw';
        body: string;
    });
} & (T extends `${ResourceConnectionScope.APP}` ? {
    connectionScope: `${ResourceConnectionScope.APP}`;
    authorizationOptions: AppConnectionScopeAuthorizationOptions;
} : {
    connectionScope: `${ResourceConnectionScope.USER}`;
    authorizationOptions: UserConnectionScopeAuthorizationOptions;
    userProfileConfig?: UserProfileUIConfig;
});
export type IResourceInit<T extends `${ResourceConnectionScope}` = ResourceConnectionScope.APP | ResourceConnectionScope.USER> = {
    id: string;
    name: string;
    category: `${ResourceCategory.API}`;
    connectionScope: T;
    getRequestConfig(context: IResourceContext): ResourceRequestConfig<T>;
    getTestRequestConfig(context: IResourceContext): ResourceTestRequestConfig<T>;
    getAuthorizationConfig(context: IResourceContext): ResourceAuthorizationConfig<T>;
    getUserProfileConfig?(context: IResourceContext): T extends ResourceConnectionScope.USER ? UserProfileUIConfig | undefined : never;
};
type ResourceTestRequestConfig<T extends `${ResourceConnectionScope}`> = APIResourceOptionsInit<T>['testRequestOptions'];
type ResourceAuthorizationConfig<T extends `${ResourceConnectionScope}`> = APIResourceOptionsInit<T>['authorizationOptions'];
type ResourceRequestConfig<T extends `${ResourceConnectionScope}`> = APIResourceOptionsInit<T>['requestOptions'];
export type AppLevelResourceRequestConfig = ResourceRequestConfig<ResourceConnectionScope.APP>;
export type AppLevelResourceAuthorizationConfig = ResourceAuthorizationConfig<ResourceConnectionScope.APP>;
export type AppLevelResourceTestRequestConfig = ResourceTestRequestConfig<ResourceConnectionScope.APP>;
export type UserLevelResourceRequestConfig = ResourceRequestConfig<ResourceConnectionScope.USER>;
export type UserLevelResourceAuthorizationConfig = ResourceAuthorizationConfig<ResourceConnectionScope.USER>;
export type UserLevelResourceTestRequestConfig = ResourceTestRequestConfig<ResourceConnectionScope.USER>;
export declare abstract class UserLevelAPIResource {
    abstract readonly id: string;
    abstract name: string;
    connectionScope: ResourceConnectionScope;
    category: `${ResourceCategory.API}`;
    abstract getRequestConfig(context: IResourceContext): UserLevelResourceRequestConfig;
    abstract getTestRequestConfig(context: IResourceContext): UserLevelResourceTestRequestConfig;
    abstract getAuthorizationConfig(context: IResourceContext): UserLevelResourceAuthorizationConfig;
    abstract getUserProfileConfig?(context: IResourceContext): UserProfileUIConfig | undefined;
}
export declare abstract class AppLevelAPIResource {
    abstract readonly id: string;
    abstract name: string;
    connectionScope: ResourceConnectionScope;
    category: `${ResourceCategory.API}`;
    abstract getRequestConfig(context: IResourceContext): AppLevelResourceRequestConfig;
    abstract getTestRequestConfig(context: IResourceContext): AppLevelResourceTestRequestConfig;
    abstract getAuthorizationConfig(context: IResourceContext): AppLevelResourceAuthorizationConfig;
}
export interface IResource {
    id: string;
}
export {};
