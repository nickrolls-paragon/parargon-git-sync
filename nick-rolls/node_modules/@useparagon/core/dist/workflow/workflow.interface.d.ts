import { IEvent } from '../event';
import { IContext } from '../execution';
import { InputSource, SerializedInput } from '../inputs';
import { ICustomIntegration, IIntegration } from '../integration';
import { IResource } from '../resource';
import { ISecret, SecretDTO } from '../secret';
import { StateMachine } from '../stateMachine';
import { IStep, Step } from '../steps';
import { REQUEST_PAGINATION_STRATEGY } from '../steps/library/integrationRequest';
import { ICustomTrigger } from '../triggers';
import { IConnectUser } from '../user';
export declare const UNSET_WORKFLOW_ID: string;
export interface IWorkflow {
    id: string;
    steps: IStep[];
}
export interface WorkflowDependencies {
    events: IEvent[];
    inputSources: InputSource[];
    sharedInputs: SerializedInput[];
    previousStateMachine?: StateMachine;
    secrets: (ISecret | SecretDTO)[];
    integrationType: string;
    paginationSchemes: REQUEST_PAGINATION_STRATEGY[];
    customTriggers: ICustomTrigger[];
    resources: IResource[];
}
export interface IExecutableWorkflow<I extends IIntegration | ICustomIntegration> extends IWorkflow {
    define(integration: I, context: IContext, user: IConnectUser): Promise<StateMachine>;
    register(steps: Record<string, Step>): Promise<StateMachine>;
}
