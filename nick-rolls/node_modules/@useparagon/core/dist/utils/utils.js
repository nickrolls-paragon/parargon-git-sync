"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isUUID = exports.indexBy = exports.sanitizeVariableName = exports.isValidIdentifierName = exports.toPascalCase = exports.toSnakeCase = exports.toCamelCase = exports.mapValueToKeyInRecord = exports.getRandomNumberInRange = void 0;
const getRandomNumberInRange = (min, max) => {
    return Math.floor(Math.random() * (max - min + 1)) + min;
};
exports.getRandomNumberInRange = getRandomNumberInRange;
const mapValueToKeyInRecord = (obj) => {
    return Object.fromEntries(Object.entries(obj).map(([key, value]) => [value, key]));
};
exports.mapValueToKeyInRecord = mapValueToKeyInRecord;
const toCamelCase = (value) => {
    if (!value.trim()) {
        return '';
    }
    const intermediateValue = value
        .trim()
        .replace(/[^a-zA-Z0-9]+(.)/g, (_match, chr) => {
        return chr.toUpperCase();
    });
    return `${intermediateValue[0].toLowerCase()}${intermediateValue.slice(1)}`;
};
exports.toCamelCase = toCamelCase;
const toSnakeCase = (value) => {
    return value
        .trim()
        .replace(/([a-z\d])([A-Z])/g, '$1_$2')
        .toLowerCase()
        .replace(/\s/g, '_');
};
exports.toSnakeCase = toSnakeCase;
const toPascalCase = (value) => {
    const camelCaseName = (0, exports.toCamelCase)(value);
    return `${camelCaseName[0].toUpperCase()}${camelCaseName.slice(1)}`;
};
exports.toPascalCase = toPascalCase;
const isValidIdentifierName = (value) => {
    const validIdentifierRegex = /^[$_\p{ID_Start}][$\u200c\u200d\p{ID_Continue}]*$/u;
    if (value.indexOf(' ') > 0 || !value.match(validIdentifierRegex)) {
        return false;
    }
    return true;
};
exports.isValidIdentifierName = isValidIdentifierName;
const sanitizeVariableName = (variableName) => {
    const trimmedVariableName = variableName.trim();
    if ((0, exports.isValidIdentifierName)(trimmedVariableName)) {
        return trimmedVariableName;
    }
    return (0, exports.toCamelCase)(trimmedVariableName.replace(/[^a-z0-9$]/gi, '_').replace(/_/g, ' '));
};
exports.sanitizeVariableName = sanitizeVariableName;
const indexBy = (key, array) => {
    return Object.fromEntries(array.map((element) => [
        typeof key === 'function' ? key(element) : element[key],
        element,
    ]));
};
exports.indexBy = indexBy;
const isUUID = (value) => {
    return (typeof value === 'string' &&
        /^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(value));
};
exports.isUUID = isUUID;
//# sourceMappingURL=utils.js.map