import { IEventInit } from '../../event';
import { DataType, TokenizedSource } from '../../resolvers/resolvers.interface';
import { IBaseStep, StepType } from '../../steps/step.interface';
import { ITriggerStepParameters } from '../trigger.interface';
export interface IEventStepInitParameters<T extends Record<string, unknown> = Record<string, unknown>> extends IEventInit<T>, ITriggerStepParameters {
}
export interface IEventInitOptions {
    objectMapping?: string;
}
export interface IEventStepParameters extends ITriggerStepParameters {
    eventId: string;
    objectMapping?: TokenizedSource<DataType.STRING>;
}
export interface IEventStep extends IBaseStep {
    type: StepType.EVENT;
    parameters: IEventStepParameters;
}
export type EventStepOutput<E, V> = V extends undefined ? E : {
    originalPayload: E;
    mappedIntegrationObject: Record<string, any>;
};
