import { IEventInit } from '../../event/event.interface';
import { IStepWithOutput, StepType } from '../../steps/step.interface';
import { TriggerStep } from '../trigger';
import { EventStepOutput, IEventStep, IEventStepParameters } from './event.interface';
export declare class EventStep<E extends Record<string, unknown>, V extends string | undefined = undefined> extends TriggerStep implements IEventStep, IStepWithOutput<EventStepOutput<E, V>> {
    type: StepType.EVENT;
    private _parameters;
    private _options;
    parameters: IEventStepParameters;
    get output(): EventStepOutput<E, V>;
    constructor(params: IEventInit<E>, options?: {
        objectMapping?: V;
    });
    serializeParameters(): IEventStepParameters;
}
