import { FunctionStepLibraries } from '../../steps/library/function/libraries';
import { HttpMethod, HttpMethodWithBody } from '../../steps/library/request/request.interface';
import { ICreateTriggerContext, IPayloadValidationContext, IProfileConfigContext, IProviderIdContext, ISetupTriggerResponseContext, ITeardownTriggerContext } from './customTrigger.context.interface';
export interface ICustomTrigger {
    id: string;
    resourceId?: string;
}
export declare enum TriggerSubscription {
    PROGRAMMATIC = "PROGRAMMATIC",
    MANUAL = "MANUAL"
}
export type WebhookTriggerLevel = 'APP' | 'USER';
export declare const CUSTOM_TRIGGER_INTENT: "CUSTOM_WEBHOOK_TRIGGER_INTENT";
export declare enum SetupResponseType {
    DEFAULT = "DEFAULT",
    ECHO_REQUEST_BODY = "ECHO_REQUEST_BODY",
    CUSTOM_CODE = "CUSTOM_CODE"
}
export declare enum SetupResponseInitType {
    RESPOND_WITH_200 = "RESPOND_WITH_200",
    ECHO_REQUEST_BODY = "ECHO_REQUEST_BODY",
    CUSTOM_CODE = "CUSTOM_CODE"
}
export type ICreateTriggerSetup = {
    url: string;
    params: Record<string, string>;
    headers: Record<string, string>;
} & ({
    method: `${HttpMethod.GET}`;
    body?: never;
    bodyType?: never;
} | {
    method: `${HttpMethodWithBody | HttpMethod.DELETE}`;
    bodyType: 'json' | 'form-data' | 'x-www-form-urlencoded';
    body: Record<string, unknown>;
} | {
    method: `${HttpMethodWithBody | HttpMethod.DELETE}`;
    bodyType: 'xml' | 'raw';
    body?: string;
});
export type SetupResponse = {
    status: number;
    headers: object;
    body?: unknown;
    persist?: object;
    ignoreEvent?: boolean;
};
export declare enum CustomTriggerPayloadValidationScheme {
    NONE = "NONE",
    CUSTOM = "CUSTOM",
    SHA_256_HEX_PAYLOAD_BODY = "SHA_256_HEX_PAYLOAD_BODY",
    SHA_256_BASE64_PAYLOAD_BODY = "SHA_256_BASE64_PAYLOAD_BODY",
    SHA_1_HEX_PAYLOAD_BODY = "SHA_1_HEX_PAYLOAD_BODY",
    SHA_1_BASE64_PAYLOAD_BODY = "SHA_1_BASE64_PAYLOAD_BODY"
}
export type CustomTriggerSetupResponse = {
    type: `${SetupResponseInitType.RESPOND_WITH_200}` | `${SetupResponseInitType.ECHO_REQUEST_BODY}`;
} | {
    type: `${SetupResponseInitType.CUSTOM_CODE}`;
    code: (parameters: Record<string, any>, libraries: Pick<FunctionStepLibraries, 'crypto'>, request: {
        headers: Record<string, string>;
        body: Record<string, any>;
        query: Record<string, any>;
    }) => SetupResponse;
    parameters: Record<string, any>;
};
export type TriggerPayloadValidationOption = {
    scheme: `${CustomTriggerPayloadValidationScheme.NONE}`;
} | {
    scheme: `${CustomTriggerPayloadValidationScheme.CUSTOM}`;
    parameters: Record<string, any>;
    code: (parameters: Record<string, any>, libraries: Pick<FunctionStepLibraries, 'crypto'>, request: {
        headers: Record<string, string>;
        body: Record<string, any>;
        query: Record<string, any>;
    }) => boolean;
} | {
    scheme: `${CustomTriggerPayloadValidationScheme.SHA_1_BASE64_PAYLOAD_BODY}` | `${CustomTriggerPayloadValidationScheme.SHA_1_HEX_PAYLOAD_BODY}` | `${CustomTriggerPayloadValidationScheme.SHA_256_BASE64_PAYLOAD_BODY}` | `${CustomTriggerPayloadValidationScheme.SHA_256_HEX_PAYLOAD_BODY}`;
    webhookSecret: string;
    webhookSignatureHeaderKey: string;
};
export type WebhookPayloadMapToCustomIntegration = {
    providerId: (context: IProviderIdContext) => string;
    profileConfigKey: (context: IProfileConfigContext) => string;
};
export type WebhookPayloadMapToIntegration = {
    providerId: (context: IProviderIdContext) => string;
};
export type WebhookPayloadMapToUser<T extends 'custom' | 'default'> = T extends 'custom' ? WebhookPayloadMapToCustomIntegration : WebhookPayloadMapToIntegration;
export type ITeardownTriggerSetup = ICreateTriggerSetup;
export type ICustomTriggerInit<TS extends `${TriggerSubscription}`, TL extends WebhookTriggerLevel, IntegrationType extends 'custom' | 'default', InputResultMap extends Record<string, any> = Record<string, any>> = {
    id: string;
    name: string;
    description: string;
    triggerSubscription: TS;
    triggerLevel: TL;
    validatePayload: (validateWebhookContext: IPayloadValidationContext<InputResultMap>) => TriggerPayloadValidationOption | undefined;
    setupResponse: (setupContext: ISetupTriggerResponseContext<InputResultMap>) => CustomTriggerSetupResponse | undefined;
    mapPayload: TL extends 'APP' ? WebhookPayloadMapToUser<IntegrationType> : undefined;
} & (TS extends `${TriggerSubscription.PROGRAMMATIC}` ? {
    create: (createContext: ICreateTriggerContext<InputResultMap>) => ICreateTriggerSetup;
    teardown: (tearDownContext: ITeardownTriggerContext<InputResultMap>) => ITeardownTriggerSetup;
} : {
    triggerSubscription: `${TriggerSubscription.MANUAL}`;
});
