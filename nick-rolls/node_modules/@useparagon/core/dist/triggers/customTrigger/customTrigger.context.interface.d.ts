import { UserDefinedInput } from '../../inputs/input.interface';
interface ICustomTriggerContext<InputResultMap extends Record<string, unknown> = Record<string, string>> {
    webhookURL: string;
    setupResponse: Record<string, any>;
    credential: Record<string, any>;
    profileData: Record<string, any>;
    providerData: Record<string, any>;
    webhookRequest: Record<string, any>;
    persistData: Record<string, any>;
    getEnvironmentSecret(key: string): string;
    getInput<I extends UserDefinedInput<keyof InputResultMap>>(input: I): InputResultMap[I['type']];
}
export type ICreateTriggerContext<T extends Record<string, unknown>> = Pick<ICustomTriggerContext<T>, 'webhookURL' | 'credential' | 'getEnvironmentSecret' | 'getInput' | 'providerData'>;
export type ITeardownTriggerContext<T extends Record<string, unknown>> = Pick<ICustomTriggerContext<T>, 'setupResponse' | 'credential' | 'getEnvironmentSecret' | 'getInput' | 'providerData'>;
export type ISetupTriggerResponseContext<T extends Record<string, unknown>> = Pick<ICustomTriggerContext<T>, 'getEnvironmentSecret'>;
export type IPayloadValidationContext<T extends Record<string, unknown>> = Pick<ICustomTriggerContext<T>, 'credential' | 'getEnvironmentSecret' | 'persistData' | 'webhookRequest'>;
export type IProfileConfigContext = Pick<ICustomTriggerContext, 'profileData'>;
export type IProviderIdContext = Pick<ICustomTriggerContext, 'webhookRequest'>;
export {};
