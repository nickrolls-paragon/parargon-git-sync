import { DataType, DataTypeValues, FileValue, TokenizedSource } from '../../resolvers/resolvers.interface';
import { IBaseStep, StepType } from '../../steps/step.interface';
import { ITriggerStepParameters } from '../trigger.interface';
type ParamValidation = {
    key: string;
    required: boolean;
};
type HeaderValidation = {
    key: string;
    value: string;
};
type BodyValidation = {
    key: string;
    dataType: keyof typeof DataType;
    required: boolean;
};
export type IEndpointStepInitParameters = ITriggerStepParameters & ({
    allowArbitraryPayload: true;
    objectMapping?: string;
} | {
    allowArbitraryPayload: false;
    paramValidations: ParamValidation[];
    headerValidations: HeaderValidation[];
    bodyValidations: BodyValidation[];
});
export interface IEndpointStepParameters extends ITriggerStepParameters {
    path: string;
    httpMethod: 'POST';
    allowArbitraryPayload: boolean;
    paramValidations: ParamValidation[];
    headerValidations: HeaderValidation[];
    bodyValidations: BodyValidation[];
    objectMapping?: TokenizedSource<DataType.STRING>;
}
type EndpointHeaderOutput<HV extends HeaderValidation[]> = {
    [V in HV[number] as V['key']]: string;
};
type EndpointParamOutput<PV extends ParamValidation[]> = {
    [V in PV[number] as V['key']]: V['required'] extends true ? string : string | undefined;
};
type EndpointBodyOutput<BV extends BodyValidation[]> = {
    [V in BV[number] as V['key']]: V['required'] extends true ? DataTypeValues[V['dataType']] : DataTypeValues[V['dataType']] | undefined;
};
export type IEndpointStepOutput<P extends IEndpointStepInitParameters> = {
    request: P extends {
        allowArbitraryPayload: false;
    } ? {
        body: EndpointBodyOutput<P['bodyValidations']>;
        params: EndpointParamOutput<P['paramValidations']>;
        headers: EndpointHeaderOutput<P['headerValidations']>;
        file?: FileValue;
    } : {
        params: Record<string, any>;
        headers: Record<string, any>;
        body: any;
        file?: FileValue;
    };
};
export interface IEndpointStep extends IBaseStep {
    type: StepType.ENDPOINT;
    parameters: IEndpointStepParameters;
}
export {};
