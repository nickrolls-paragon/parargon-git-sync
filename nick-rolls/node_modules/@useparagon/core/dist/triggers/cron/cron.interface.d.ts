import { DataType, TokenizedSource } from '../../resolvers/';
import { IBaseStep, StepType } from '../../steps/step.interface';
import { ITriggerStepParameters } from '../trigger.interface';
export declare enum Unit {
    SECONDS = "SECONDS",
    MINUTES = "MINUTES",
    HOURLY = "HOURLY",
    DAILY = "DAILY",
    WEEKLY = "WEEKLY"
}
export declare enum Weekday {
    MONDAY = "MONDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY",
    THURSDAY = "THURSDAY",
    FRIDAY = "FRIDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY"
}
export type Time = {
    minutes: number;
    timezone: TokenizedSource<DataType.STRING> | string;
};
export type SecondsSchedule = {
    unit: Unit.SECONDS;
    seconds: number;
};
export type MinutesSchedule = {
    unit: Unit.MINUTES;
    minutes: number;
};
export type HourlySchedule = {
    unit: Unit.HOURLY;
    hours: number;
    offset: number;
};
export type DailySchedule<T = Time> = {
    unit: Unit.DAILY;
    days: number;
    time: T;
};
export type WeeklySchedule<T = Time> = {
    unit: Unit.WEEKLY;
    weekday: Weekday;
    time: T;
};
export type Schedule = SecondsSchedule | MinutesSchedule | HourlySchedule | DailySchedule | WeeklySchedule;
export type Timezone = {
    offset: string;
    label: string;
    tzCode: string;
};
export interface ICronStepInitParameters extends ITriggerStepParameters {
    cron: string;
    timezone?: string;
}
export interface ICronStepParameters extends ITriggerStepParameters {
    schedule: Schedule;
}
export interface ICronStep extends IBaseStep {
    type: StepType.CRON;
    parameters: ICronStepParameters;
}
