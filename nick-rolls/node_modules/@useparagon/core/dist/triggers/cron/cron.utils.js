"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSchedule = exports.getCronOptions = void 0;
const cron_parser_1 = require("cron-parser");
const cron_interface_1 = require("./cron.interface");
const getCronOptions = (schedule) => {
    switch (schedule.unit) {
        case cron_interface_1.Unit.SECONDS:
            return { cron: `*/${schedule.seconds} * * * * *` };
        case cron_interface_1.Unit.MINUTES:
            return {
                cron: `0 */${schedule.minutes} * * * *`,
            };
        case cron_interface_1.Unit.HOURLY:
            return {
                cron: `0 ${schedule.offset} */${schedule.hours} * * *`,
            };
        case cron_interface_1.Unit.DAILY:
            const dailyMinutes = schedule.time.minutes % 60;
            const dailyHours = Math.floor(schedule.time.minutes / 60);
            return {
                cron: `0 ${dailyMinutes} ${dailyHours} */${schedule.days} * *`,
                timeZone: 'America/Los_Angeles',
            };
        case cron_interface_1.Unit.WEEKLY:
            const weeklyMinutes = schedule.time.minutes % 60;
            const weeklyHours = Math.floor(schedule.time.minutes / 60);
            const weeklyWeekday = Object.keys(cron_interface_1.Weekday).indexOf(schedule.weekday) + 1;
            return {
                cron: `0 ${weeklyMinutes} ${weeklyHours} * * ${weeklyWeekday}`,
                timeZone: 'America/Los_Angeles',
            };
    }
};
exports.getCronOptions = getCronOptions;
const getSchedule = (cron, timezone = 'America/Los_Angeles') => {
    const parser = (0, cron_parser_1.parseExpression)(cron);
    const firstIteration = parser.next().toDate();
    const secondIteration = parser.next().toDate();
    const diffSeconds = Math.floor((secondIteration.getTime() - firstIteration.getTime()) / 1000);
    if (diffSeconds < 60) {
        return {
            unit: cron_interface_1.Unit.SECONDS,
            seconds: diffSeconds,
        };
    }
    const diffMinutes = Math.floor(diffSeconds / 60);
    if (diffMinutes < 60) {
        return {
            unit: cron_interface_1.Unit.MINUTES,
            minutes: diffMinutes,
        };
    }
    const diffHours = Math.floor(diffMinutes / 60);
    if (diffHours < 24) {
        return {
            unit: cron_interface_1.Unit.HOURLY,
            hours: diffHours,
            offset: (diffMinutes / 60) % 60,
        };
    }
    const diffDays = Math.floor(diffHours / 24);
    const minutes = firstIteration.getHours() * 60 + firstIteration.getMinutes();
    if (diffDays !== 7) {
        return {
            unit: cron_interface_1.Unit.DAILY,
            days: diffDays,
            time: {
                minutes,
                timezone,
            },
        };
    }
    const weekday = new Intl.DateTimeFormat('en-US', {
        weekday: 'long',
    })
        .format(firstIteration)
        .toUpperCase();
    return {
        unit: cron_interface_1.Unit.WEEKLY,
        weekday,
        time: {
            minutes,
            timezone: timezone,
        },
    };
};
exports.getSchedule = getSchedule;
//# sourceMappingURL=cron.utils.js.map