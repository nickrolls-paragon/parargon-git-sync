import { ConditionalStep } from '../steps/library/conditional';
import { FanOutStep } from '../steps/library/fanout';
import { IStep } from '../steps/step.interface';
import { IWorkflow } from '../workflow/workflow.interface';
import { Sequence, StateMachine } from './stateMachine.interface';
export declare function getLastStepInSequence(sequence: Sequence, stateMachine: StateMachine): IStep | undefined;
export declare function traverseStateMachineBySequence(stateMachine: StateMachine, sequenceVisitor: (sequence: Sequence) => void, currentSequenceId?: string): void;
export declare function getStepBefore(stepsOrWorkflow: IStep[] | IWorkflow, step: IStep, traversed?: IStep[]): IStep | undefined;
export declare function getUpstreamSteps(stepId: string, stateMachine: StateMachine): IStep[];
export declare function getDownstreamSteps(stepId: string, stateMachine: StateMachine, stopId?: string | null): IStep[];
export declare function isStepInConditional(step: IStep, conditional: ConditionalStep, stateMachine: StateMachine): boolean;
export declare function isStepInFanout(step: IStep, mapStep: FanOutStep, stateMachine: StateMachine): boolean;
export declare function sanitizeStateMachine(stateMachine: StateMachine): StateMachine;
export declare function workflowStepsToStateMachine(steps: IStep[], connectConditionalNextSteps?: boolean, startStepId?: string): StateMachine;
