import { IStep } from './step.interface';
export declare enum StepType {
    ACTION = "ACTION/CUSTOM",
    ACTION_TRIGGER = "TRIGGER/ACTION",
    CRON = "TRIGGER/CRON",
    CUSTOM_INTEGRATION_REQUEST = "ACTION/CUSTOM_INTEGRATION_REQUEST",
    DELAY = "ACTION/DELAY",
    ENDPOINT = "TRIGGER/ENDPOINT",
    EVENT = "TRIGGER/EVENT",
    FUNCTION = "ACTION/FUNCTION",
    IFELSE = "TRANSITION/IFELSE",
    INTEGRATION_ENABLED = "TRIGGER/INTEGRATION_ENABLED",
    MAP = "TRANSITION/MAP",
    OAUTH = "TRIGGER/OAUTH",
    REDIRECT = "ACTION/REDIRECT",
    RESPONSE = "ACTION/RESPONSE",
    REQUEST = "ACTION/REQUEST",
    UNSELECTED_TRIGGER = "TRIGGER/NONE"
}
export declare const TRIGGER_TYPES: StepType[];
export interface IBaseStepParameters extends Record<string, unknown> {
}
export interface IBaseStepInit extends IBaseStepParameters {
    description?: string;
}
export interface IStepWithOutput<T = never> {
    output: T;
}
export interface IStepInitIgnoreFailureParameters {
    continueWorkflowOnError?: boolean;
}
export interface IStepInitRetryParameters {
    autoRetry?: boolean;
}
export interface IStepIgnoreFailureParameters {
    ignoreFailure?: boolean;
}
export interface IStepRetryParameters {
    retryOnFailure?: boolean;
}
export interface IBaseStep {
    id: string;
    type: StepType;
    parameters: IBaseStepParameters;
    next: string | null;
    description?: string;
    readonly _migrations?: Record<string, unknown>;
}
export type StepMap = Record<string, IStep>;
