import { ConditionInit, ConditionWrapper, Operator } from '../../../resolvers/resolvers.interface';
import { IBaseStep, IBaseStepInit, IBaseStepParameters, StepType } from '../../step.interface-base';
export type ConditionalInput<T extends Operator = never> = ConditionInit<T> | Array<ConditionInit<T>> | Array<ConditionInit<T>[]>;
export type Choice = {
    conditionWrapper?: ConditionWrapper;
    isDefault: boolean;
    label: string;
    next: string | undefined | null;
};
export type ConitionalStepOutput = {
    selectedChoice: 'Yes' | 'No';
};
export interface IConditionalStepInit extends IBaseStepInit {
    if: ConditionalInput;
}
export interface IConditionalStepParameters extends IBaseStepParameters {
    choices: Choice[];
}
export interface IConditionalStep extends IBaseStep {
    type: StepType.IFELSE;
    parameters: {
        choices: Choice[];
    };
}
