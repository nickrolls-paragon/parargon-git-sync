"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionalStep = void 0;
const execution_1 = require("../../../execution");
const step_1 = require("../../step");
const step_interface_1 = require("../../step.interface");
const step_utils_1 = require("../../step.utils");
const conditional_utils_1 = require("./conditional.utils");
class ConditionalStep extends step_1.Step {
    type = step_interface_1.StepType.IFELSE;
    parameters;
    _parameters;
    _ifStep = undefined;
    _elseStep = undefined;
    get output() {
        return (0, execution_1.createProxyInputReference)(this, () => this.id, execution_1.ProxyVariableSourceType.STEP_REFERENCE);
    }
    constructor(params) {
        super(params);
        this._parameters = params;
        this.parameters = this.serializeParameters();
    }
    whenTrue(step) {
        if (this._ifStep) {
            throw new Error('If path for conditional step already added.');
        }
        else if ((0, step_utils_1.isTrigger)(step)) {
            throw new Error('Trigger Step can only be first step in step chain.');
        }
        this._ifStep = step.getStartingStepInChain();
        this.parameters = this.serializeParameters();
        return this;
    }
    whenFalse(step) {
        if (this._elseStep) {
            throw new Error('Else path for conditional step already added.');
        }
        else if ((0, step_utils_1.isTrigger)(step)) {
            throw new Error('Trigger Step can only be first step in step chain.');
        }
        this._elseStep = step.getStartingStepInChain();
        this.parameters = this.serializeParameters();
        return this;
    }
    serializeParameters() {
        const conditionWrapper = (0, conditional_utils_1.parseConditionInput)(this._parameters.if, this.dependencies);
        const ifTrue = {
            conditionWrapper,
            isDefault: false,
            label: 'Yes',
            next: this._ifStep?.id,
        };
        const ifFalse = {
            isDefault: true,
            label: 'No',
            next: this._elseStep?.id,
        };
        const choices = [ifTrue, ifFalse];
        return {
            choices,
        };
    }
}
exports.ConditionalStep = ConditionalStep;
//# sourceMappingURL=conditional.step.js.map