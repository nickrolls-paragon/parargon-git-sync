import { Step } from '../../step';
import { IStepWithOutput, StepType } from '../../step.interface';
import { ConitionalStepOutput, IConditionalStep, IConditionalStepInit, IConditionalStepParameters } from './conditional.interface';
export declare class ConditionalStep extends Step<IConditionalStepInit, IConditionalStepParameters> implements IConditionalStep, IStepWithOutput<ConitionalStepOutput> {
    type: StepType.IFELSE;
    parameters: IConditionalStepParameters;
    private _parameters;
    private _ifStep;
    private _elseStep;
    get output(): ConitionalStepOutput;
    constructor(params: IConditionalStepInit);
    whenTrue(step: Step): ConditionalStep;
    whenFalse(step: Step): ConditionalStep;
    serializeParameters(): IConditionalStepParameters;
}
