"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseConditionInput = exports.isConditionalInput = void 0;
const isConditionInit = (mayBeCondition) => {
    if (mayBeCondition && typeof mayBeCondition === 'function') {
        return true;
    }
    return false;
};
const isConditionalInput = (value) => {
    if ((typeof value !== 'function' && !Array.isArray(value)) || !value) {
        return false;
    }
    if (isConditionInit(value)) {
        return true;
    }
    else if (Array.isArray(value)) {
        const isAndCondition = value.every((value) => isConditionInit(value));
        const isOrCondition = value.every((value) => Array.isArray(value) &&
            value.every((innerValue) => isConditionInit(innerValue)));
        return isAndCondition || isOrCondition;
    }
    return false;
};
exports.isConditionalInput = isConditionalInput;
const parseConditionInput = (conditionInput, dependencies) => {
    if (isConditionInit(conditionInput)) {
        return {
            type: 'JOIN',
            join: 'OR',
            conditions: [
                {
                    join: 'AND',
                    type: 'JOIN',
                    conditions: [
                        {
                            type: 'OPERATOR',
                            condition: conditionInput(dependencies),
                        },
                    ],
                },
            ],
        };
    }
    const firstCondition = conditionInput[0];
    if (isConditionInit(firstCondition)) {
        return {
            type: 'JOIN',
            join: 'OR',
            conditions: [
                {
                    join: 'AND',
                    type: 'JOIN',
                    conditions: conditionInput.map((condition) => ({
                        type: 'OPERATOR',
                        condition: condition(dependencies),
                    })),
                },
            ],
        };
    }
    return {
        type: 'JOIN',
        join: 'OR',
        conditions: conditionInput.map((conditions) => ({
            join: 'AND',
            type: 'JOIN',
            conditions: conditions.map((condition) => ({
                type: 'OPERATOR',
                condition: condition(dependencies),
            })),
        })),
    };
};
exports.parseConditionInput = parseConditionInput;
//# sourceMappingURL=conditional.utils.js.map