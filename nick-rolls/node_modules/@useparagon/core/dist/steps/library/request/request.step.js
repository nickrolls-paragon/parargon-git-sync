"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestStep = void 0;
const execution_1 = require("../../../execution");
const resolver_utils_1 = require("../../../resolvers/resolver.utils");
const resolvers_interface_1 = require("../../../resolvers/resolvers.interface");
const step_1 = require("../../step");
const step_interface_1 = require("../../step.interface");
const request_interface_1 = require("./request.interface");
class RequestStep extends step_1.Step {
    type = step_interface_1.StepType.REQUEST;
    _parameters;
    parameters;
    get output() {
        return (0, execution_1.createProxyInputReference)(this, () => this.id, execution_1.ProxyVariableSourceType.STEP_REFERENCE);
    }
    constructor(params) {
        super(params);
        this._parameters = params;
        this.parameters = this.serializeParameters();
    }
    serializeParameters() {
        const initParams = this._parameters;
        let authorization;
        if (initParams.authorization) {
            switch (initParams.authorization.type) {
                case request_interface_1.RequestAuthorizationType.BASIC:
                    authorization = {
                        type: request_interface_1.RequestAuthorizationType.BASIC,
                        username: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization.username, resolvers_interface_1.DataType.STRING, this.dependencies),
                        password: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization.password, resolvers_interface_1.DataType.STRING, this.dependencies),
                    };
                    break;
                case request_interface_1.RequestAuthorizationType.BEARER_TOKEN:
                    authorization = {
                        type: request_interface_1.RequestAuthorizationType.BEARER_TOKEN,
                        token: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization.token, resolvers_interface_1.DataType.STRING, this.dependencies),
                    };
                    break;
                case request_interface_1.RequestAuthorizationType.AUTH_HEADER:
                    authorization = {
                        type: request_interface_1.RequestAuthorizationType.AUTH_HEADER,
                        headers: [],
                    };
                    break;
                case request_interface_1.RequestAuthorizationType.QUERY_PARAMS:
                    authorization = {
                        type: request_interface_1.RequestAuthorizationType.QUERY_PARAMS,
                        params: [],
                    };
                    break;
                case request_interface_1.RequestAuthorizationType.CLIENT_CREDENTIAL:
                    authorization = {
                        type: request_interface_1.RequestAuthorizationType.CLIENT_CREDENTIAL,
                        oauthUrl: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization.tokenUrl, resolvers_interface_1.DataType.STRING, this.dependencies),
                        clientId: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization.clientId, resolvers_interface_1.DataType.STRING, this.dependencies),
                        clientSecret: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization.clientSecret, resolvers_interface_1.DataType.STRING, this.dependencies),
                        requestType: initParams.authorization
                            .requestType,
                        audience: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization.audience || '', resolvers_interface_1.DataType.STRING, this.dependencies),
                        scopes: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization.scopes || '', resolvers_interface_1.DataType.STRING, this.dependencies),
                    };
                    break;
                case request_interface_1.RequestAuthorizationType.REFRESH_TOKEN:
                    authorization = {
                        type: request_interface_1.RequestAuthorizationType.REFRESH_TOKEN,
                        oauthUrl: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization, resolvers_interface_1.DataType.STRING, this.dependencies),
                        clientId: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization.clientId, resolvers_interface_1.DataType.STRING, this.dependencies),
                        clientSecret: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization.clientSecret, resolvers_interface_1.DataType.STRING, this.dependencies),
                        requestType: initParams.authorization
                            .requestType,
                        accessToken: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization.accessToken, resolvers_interface_1.DataType.STRING, this.dependencies),
                        refreshToken: (0, resolver_utils_1.resolveToTokenizedSource)(initParams.authorization.refreshToken, resolvers_interface_1.DataType.STRING, this.dependencies),
                    };
                    break;
                default:
                    throw new Error(`unknown authorization type (${initParams.authorization['type']}) passed for request step.`);
            }
        }
        return {
            bodyType: initParams.bodyType,
            httpMethod: initParams.method,
            ignoreFailure: Boolean(initParams.continueWorkflowOnError),
            retryOnFailure: Boolean(initParams.autoRetry),
            url: (0, resolver_utils_1.resolveToTokenizedSource)((0, resolver_utils_1.buildUrlWithParams)(initParams.url, initParams.params), resolvers_interface_1.DataType.STRING, this.dependencies),
            params: (0, resolver_utils_1.resolveParamsToSources)(initParams.params || {}, resolvers_interface_1.DataType.STRING, undefined, this.dependencies),
            headers: (0, resolver_utils_1.resolveParamsToSources)(initParams.headers || {}, resolvers_interface_1.DataType.STRING, undefined, this.dependencies),
            body: typeof initParams.body === 'string'
                ? []
                : (0, resolver_utils_1.resolveParamsToSources)(initParams.body || {}, resolvers_interface_1.DataType.ANY, undefined, this.dependencies),
            rawBody: typeof initParams.body === 'string'
                ? (0, resolver_utils_1.resolveToTokenizedSource)(initParams.body || '', resolvers_interface_1.DataType.STRING, this.dependencies)
                : undefined,
            authorization,
        };
    }
}
exports.RequestStep = RequestStep;
//# sourceMappingURL=request.step.js.map