import { DataType, KeyedSource, TokenizedSource } from '../../../resolvers/resolvers.interface';
import { IBaseStep, IBaseStepInit, IBaseStepParameters, IStepIgnoreFailureParameters, IStepInitIgnoreFailureParameters, IStepInitRetryParameters, IStepRetryParameters, StepType } from '../../step.interface-base';
export declare enum HttpMethod {
    GET = "GET",
    POST = "POST",
    PUT = "PUT",
    PATCH = "PATCH",
    DELETE = "DELETE"
}
export declare enum RequestBodyType {
    JSON = "json",
    FORM_DATA = "form-data",
    X_WWW_FORM_URLENCODED = "x-www-form-urlencoded",
    XML = "xml",
    RAW = "raw"
}
export declare enum RequestAuthorizationType {
    NONE = "none",
    BEARER_TOKEN = "bearer",
    BASIC = "basic",
    QUERY_PARAMS = "query_params",
    AUTH_HEADER = "auth_header",
    CLIENT_CREDENTIAL = "oauth-client-credential",
    REFRESH_TOKEN = "oauth-refresh-token"
}
export declare enum CLIENT_CREDENTIAL_REQUEST_TYPE {
    BodyParam = "body-param",
    BasicAuthHeader = "basic-auth-header"
}
type NoAuthorization = {
    type: RequestAuthorizationType.NONE;
};
type BearerAuthorization = {
    type: RequestAuthorizationType.BEARER_TOKEN;
    token: TokenizedSource<DataType.STRING>;
};
type BasicAuthorization = {
    type: RequestAuthorizationType.BASIC;
    username: TokenizedSource<DataType.STRING>;
    password: TokenizedSource<DataType.STRING>;
};
type QueryParamAuthorization = {
    type: RequestAuthorizationType.QUERY_PARAMS;
    params: KeyedSource<DataType.STRING>[];
};
type AuthHeaderAuthorization = {
    type: RequestAuthorizationType.AUTH_HEADER;
    headers: KeyedSource<DataType.STRING>[];
};
export type ClientCredentialAuthorization = {
    type: RequestAuthorizationType.CLIENT_CREDENTIAL;
    oauthUrl: TokenizedSource<DataType.STRING>;
    clientId: TokenizedSource<DataType.STRING>;
    clientSecret: TokenizedSource<DataType.STRING>;
    requestType: CLIENT_CREDENTIAL_REQUEST_TYPE;
    audience: TokenizedSource<DataType.STRING>;
    scopes: TokenizedSource<DataType.STRING>;
};
export type RefreshTokenAuthorization = {
    type: RequestAuthorizationType.REFRESH_TOKEN;
    oauthUrl: TokenizedSource<DataType.STRING>;
    clientId: TokenizedSource<DataType.STRING>;
    clientSecret: TokenizedSource<DataType.STRING>;
    accessToken: TokenizedSource<DataType.STRING>;
    refreshToken: TokenizedSource<DataType.STRING>;
    requestType: CLIENT_CREDENTIAL_REQUEST_TYPE;
};
export type HttpMethodWithoutBody = HttpMethod.GET | HttpMethod.DELETE;
export type HttpMethodWithBody = HttpMethod.POST | HttpMethod.PUT | HttpMethod.PATCH;
export type IRequestStepInit = IBaseStepInit & IStepInitIgnoreFailureParameters & IStepInitRetryParameters & {
    url: string;
    params?: Record<string, string>;
    headers?: Record<string, string>;
    authorization?: {
        type: `${RequestAuthorizationType.BASIC}`;
        username: string;
        password: string;
    } | {
        type: `${RequestAuthorizationType.BEARER_TOKEN}`;
        token: string;
    } | {
        type: `${RequestAuthorizationType.AUTH_HEADER}`;
    } | {
        type: `${RequestAuthorizationType.QUERY_PARAMS}`;
    } | {
        type: `${RequestAuthorizationType.CLIENT_CREDENTIAL}`;
        tokenUrl: string;
        clientId: string;
        clientSecret: string;
        requestType: `${CLIENT_CREDENTIAL_REQUEST_TYPE}`;
        audience?: string;
        scopes?: string;
    } | {
        type: `${RequestAuthorizationType.REFRESH_TOKEN}`;
        tokenUrl: string;
        clientId: string;
        clientSecret: string;
        accessToken: string;
        refreshToken: string;
        requestType: `${CLIENT_CREDENTIAL_REQUEST_TYPE}`;
    };
} & ({
    method: `${HttpMethodWithoutBody}`;
    body?: never;
    bodyType?: never;
} | {
    method: `${HttpMethodWithBody}`;
    bodyType: 'json' | 'form-data' | 'x-www-form-urlencoded';
    body: Record<string, unknown>;
} | {
    method: `${HttpMethodWithBody}`;
    bodyType: 'xml' | 'raw';
    body: string;
});
export type RequestAuthorization = NoAuthorization | BearerAuthorization | BasicAuthorization | QueryParamAuthorization | AuthHeaderAuthorization | ClientCredentialAuthorization | RefreshTokenAuthorization;
export interface IRequestStepParameters extends IBaseStepParameters, IStepIgnoreFailureParameters, IStepRetryParameters {
    url: TokenizedSource<DataType.STRING>;
    httpMethod: HttpMethod;
    params: KeyedSource<DataType.STRING>[];
    headers: KeyedSource<DataType.STRING>[];
    body: KeyedSource[];
    bodyType?: RequestBodyType;
    rawBody?: TokenizedSource<DataType.STRING>;
    authorization?: RequestAuthorization;
}
export interface IRequestStepOutput {
    response: {
        body: any;
        headers: Record<string, any>;
        statusCode: number;
        error?: any;
    };
}
export interface IRequestStep extends IBaseStep {
    type: StepType.REQUEST;
    parameters: IRequestStepParameters;
}
export {};
