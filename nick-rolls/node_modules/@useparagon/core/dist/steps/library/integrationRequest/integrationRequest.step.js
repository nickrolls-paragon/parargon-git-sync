"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationRequestStep = void 0;
const execution_1 = require("../../../execution");
const context_utils_1 = require("../../../execution/context.utils");
const resolver_utils_1 = require("../../../resolvers/resolver.utils");
const resolvers_interface_1 = require("../../../resolvers/resolvers.interface");
const step_1 = require("../../step");
const step_interface_1 = require("../../step.interface");
const integrationRequest_interface_1 = require("./integrationRequest.interface");
class IntegrationRequestStep extends step_1.Step {
    type = step_interface_1.StepType.CUSTOM_INTEGRATION_REQUEST;
    _parameters;
    parameters;
    get output() {
        return (0, context_utils_1.createProxyInputReference)(this, () => this.id, execution_1.ProxyVariableSourceType.STEP_REFERENCE);
    }
    constructor(params) {
        super(params);
        this._parameters = params;
        this.parameters = this.serializeParameters();
    }
    serializeParameters() {
        const currentStep = this;
        const initParams = this._parameters;
        const isJsonBody = !['xml', 'raw'].includes(initParams.bodyType);
        let resourceId;
        if (initParams.resource) {
            resourceId = new initParams.resource().id;
            const resource = (this.dependencies.resources ?? []).find((resource) => resource.id === resourceId);
            if (this.dependencies.resources && !resource) {
                throw new Error(`Resource with id "${resourceId}" not defined in this integration.`);
            }
        }
        const paginationOptionsInit = typeof initParams.pagination === 'function'
            ? initParams.pagination({
                get output() {
                    return (0, context_utils_1.createProxyInputReference)(currentStep, () => currentStep.id, execution_1.ProxyVariableSourceType.STEP_REFERENCE, []);
                },
            })
            : initParams.pagination;
        const paginationOptions = (() => {
            if (!paginationOptionsInit) {
                return undefined;
            }
            if (!('type' in paginationOptionsInit)) {
                return {
                    enabled: true,
                    type: integrationRequest_interface_1.REQUEST_PAGINATION_STRATEGY.Token,
                    output: (0, resolver_utils_1.resolveToTokenizedSource)(paginationOptionsInit.outputPath, resolvers_interface_1.DataType.ANY, this.dependencies),
                    pageToken: (0, resolver_utils_1.resolveToTokenizedSource)(paginationOptionsInit.pageToken, resolvers_interface_1.DataType.STRING, this.dependencies),
                    stopCondition: (0, resolver_utils_1.resolveToSource)(paginationOptionsInit.stopCondition, resolvers_interface_1.DataType.ANY, this.dependencies)['condition'],
                };
            }
            switch (paginationOptionsInit.type) {
                case integrationRequest_interface_1.REQUEST_PAGINATION_STRATEGY.Range:
                    return {
                        enabled: true,
                        type: integrationRequest_interface_1.REQUEST_PAGINATION_STRATEGY.Range,
                        limit: (0, resolver_utils_1.resolveToTokenizedSource)(paginationOptionsInit.limit, resolvers_interface_1.DataType.ANY, this.dependencies),
                        skip: (0, resolver_utils_1.resolveToTokenizedSource)(paginationOptionsInit.skip, resolvers_interface_1.DataType.ANY, this.dependencies),
                    };
                case integrationRequest_interface_1.REQUEST_PAGINATION_STRATEGY.NextPageToken:
                    return {
                        enabled: true,
                        type: integrationRequest_interface_1.REQUEST_PAGINATION_STRATEGY.NextPageToken,
                        limit: (0, resolver_utils_1.resolveToTokenizedSource)(paginationOptionsInit.limit, resolvers_interface_1.DataType.ANY, this.dependencies),
                        nextPageToken: (0, resolver_utils_1.resolveToTokenizedSource)(paginationOptionsInit.nextPageToken, resolvers_interface_1.DataType.ANY, this.dependencies),
                    };
            }
            return undefined;
        })();
        if (paginationOptions?.type &&
            this.dependencies.paginationSchemes &&
            !this.dependencies.paginationSchemes.includes(paginationOptions.type)) {
            throw new Error(`"${paginationOptions.type}" pagination not supported in ${this.dependencies.integrationType}.`);
        }
        const sanitizeKeyValuePairs = (param) => {
            return Object.fromEntries(Object.entries(param).map(([key, value]) => {
                if (typeof value !== 'function') {
                    return [key, value];
                }
                if (!paginationOptions) {
                    throw new Error('pageToken passed when pagination options added.');
                }
                return [
                    key,
                    value((0, context_utils_1.createProxyInputReference)(currentStep, () => currentStep.id, execution_1.ProxyVariableSourceType.SAME_STEP_REFERENCE, ['paginationOptions', 'pageToken'])),
                ];
            }));
        };
        const initParamsUrl = (0, resolver_utils_1.buildUrlWithParams)(sanitizeKeyValuePairs({
            url: initParams.url,
        }).url, sanitizeKeyValuePairs(initParams.params || {}));
        return {
            resourceId,
            actionType: resourceId ? 'resource' : this.dependencies?.integrationType,
            bodyType: initParams.bodyType,
            httpMethod: initParams.method,
            retryOnFailure: Boolean(initParams.autoRetry),
            ignoreFailure: Boolean(initParams.continueWorkflowOnError),
            url: (0, resolver_utils_1.resolveToTokenizedSource)(initParamsUrl, resolvers_interface_1.DataType.STRING, this.dependencies),
            params: (0, resolver_utils_1.resolveParamsToSources)(sanitizeKeyValuePairs(initParams.params || {}), resolvers_interface_1.DataType.STRING, undefined, this.dependencies),
            headers: (0, resolver_utils_1.resolveParamsToSources)(sanitizeKeyValuePairs(initParams.headers || {}), resolvers_interface_1.DataType.STRING, undefined, this.dependencies),
            body: isJsonBody
                ? (0, resolver_utils_1.resolveParamsToSources)(sanitizeKeyValuePairs(initParams.body || {}), resolvers_interface_1.DataType.ANY, undefined, this.dependencies)
                : [],
            rawBody: !isJsonBody
                ? (0, resolver_utils_1.resolveToTokenizedSource)(sanitizeKeyValuePairs({ body: initParams.body || '' }).body, resolvers_interface_1.DataType.STRING, this.dependencies)
                : undefined,
            paginationOptions,
        };
    }
}
exports.IntegrationRequestStep = IntegrationRequestStep;
//# sourceMappingURL=integrationRequest.step.js.map