import { HttpMethodWithBody, HttpMethodWithoutBody } from '../steps/library/request';
import { Constructable } from '../types/generics';
import { IWorkflow } from '../workflow/workflow.interface';
import { ConnectPortalThemeValues } from './integration-config.interface';
export declare enum AuthenticationScheme {
    BASIC = "basic",
    OAUTH = "oauth",
    OAUTH_CLIENT_CREDENTIAL = "oauth_client_credential"
}
export declare enum ConnectUserProfileConfigStrategy {
    HTTP = "HTTP",
    JWT = "JWT"
}
export type HTTPStrategyUIConfig = {
    strategy: `${ConnectUserProfileConfigStrategy.HTTP}`;
    url: string;
    params: Record<string, string>;
    headers: Record<string, string>;
    requireSuccess: boolean;
} & ({
    method: `${HttpMethodWithoutBody}`;
    body?: never;
    bodyType?: never;
} | {
    method: `${HttpMethodWithBody}`;
    bodyType: 'json' | 'form-data' | 'x-www-form-urlencoded';
    body: Record<string, unknown>;
} | {
    method: `${HttpMethodWithBody}`;
    bodyType: 'xml' | 'raw';
    body: string;
});
export type JWTStrategyUIConfig = {
    strategy: `${ConnectUserProfileConfigStrategy.JWT}`;
    token: string;
    requireSuccess: boolean;
};
export type UserProfileUIConfig = HTTPStrategyUIConfig | JWTStrategyUIConfig;
export type ICustomIntegrationConfig = {
    name: string;
    active?: boolean;
    description: string;
    accentColor: string;
    workflowDisplayOrder: Constructable<IWorkflow>[];
    theme?: ConnectPortalThemeValues;
    overviewText?: string;
    apiBaseUrl: string;
    testEndpointPath: string;
    userProfileConfig?: UserProfileUIConfig;
    authorization: {
        type: 'bearer';
        token: string;
    } | {
        type: 'basic';
        userName: string;
        password: string;
    } | {
        type: 'query_params';
        params: Record<string, string>;
    } | {
        type: 'auth_header';
        headers: Record<string, string>;
    } | {
        type: 'oauth-client-credential';
    } | {
        type: 'oauth-refresh-token';
    };
} & ({
    authenticationType: 'basic';
} | {
    authenticationType: 'oauth';
    authorizationUrl: string;
    accessTokenUrl: string;
    scopes: string;
    includeClientIdAndSecrets?: boolean;
    usePKCEInCodeExchange: boolean;
} | {
    authenticationType: 'oauth_client_credential';
    accessTokenUrl: string;
    audience?: string;
    scopes?: string;
});
export interface ICustomIntegration {
    name: string;
}
export type UserDefinedConfigInput = {
    id: string;
    type: 'text' | 'password';
    title: string;
    subtitle?: string;
    placeholder?: string;
    suffixLabel?: string;
};
