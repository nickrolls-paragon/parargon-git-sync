export declare enum DataSourceType {
    DYNAMIC = "DYNAMIC_DATA_SOURCE",
    STATIC_ENUM = "STATIC_ENUM_DATA_SOURCE",
    FIELD_MAPPER = "FIELD_MAPPER_DATA_SOURCE",
    COMBO_INPUT = "COMBO_INPUT_DATA_SOURCE",
    DYNAMIC_COMBO_INPUT = "DYNAMIC_COMBO_INPUT_DATA_SOURCE"
}
export type BasicDataSource = {
    title: string;
    subtitle: string;
};
export type DynamicDataSource = BasicDataSource & {
    type: DataSourceType.DYNAMIC;
    cacheKey?: string;
};
export type StaticEnumDataSource = BasicDataSource & {
    type: DataSourceType.STATIC_ENUM;
    id: string;
};
export type FieldMapperDataSource = BasicDataSource & {
    id: string;
    type: DataSourceType.FIELD_MAPPER;
    recordSource: DynamicDataSource;
    fieldSource: DynamicDataSource;
};
export type ComboInputDataSource = BasicDataSource & {
    id: string;
    type: DataSourceType.COMBO_INPUT;
    mainInputSource: DynamicDataSource;
    dependentInputSource: DynamicDataSource;
    fieldSource?: DynamicDataSource;
};
export type DynamicComboInputDataSource = BasicDataSource & {
    id: string;
    type: DataSourceType.DYNAMIC_COMBO_INPUT;
    mainInputSource: DynamicDataSource;
    dependentInputSource: DynamicDataSource;
    variableInputSource: DynamicDataSource;
    hoverDisplayText: string;
};
export type InputSource = DynamicDataSource | FieldMapperDataSource | ComboInputDataSource | DynamicComboInputDataSource;
export type UserDefinedInput<I> = {
    id: string;
    title: string;
    required?: boolean;
    tooltip?: string;
    type: I;
    key?: string;
    customDropdownOptions?: CustomDropdownField[];
    showRequiredFieldsByDefault?: boolean;
    fieldMappings?: {
        label: string;
    }[];
    useDynamicMapper?: boolean;
    dynamicObjectName?: string;
    dynamicObjectOptions?: DynamicMappingOptions | DynamicMappingField[];
    objectName?: string;
    mockObjectTypes?: DynamicMappingField[];
    mockIntegrationFields?: DynamicMappingField[];
};
export type DynamicMappingField = {
    label: string;
    value: string | number;
};
export type DynamicMappingOptions = {
    fields: DynamicMappingField[];
    userCanRemoveMappings?: boolean;
    userCanCreateFields?: boolean;
    defaultFields?: string[];
};
export type CustomDropdownField = {
    label: string;
    value: string | number;
};
export declare enum SidebarInputType {
    BooleanInput = "BOOLEAN_INPUT",
    Code = "CODE",
    ComboInput = "COMBO_INPUT",
    Conditional = "CONDITIONAL",
    CustomDropdown = "CUSTOM_DROPDOWN",
    CustomFieldMapping = "CUSTOM_FIELD_MAPPING",
    DynamicComboInput = "DYNAMIC_COMBO_INPUT",
    DynamicConditional = "DYNAMIC_CONDITIONAL",
    DynamicEnum = "DYNAMIC_ENUM",
    EditableEnum = "EDITABLE_ENUM",
    Email = "EMAIL",
    Enum = "ENUM",
    FieldMapper = "FIELD_MAPPER",
    Number = "NUMBER",
    Password = "PASSWORD",
    Switch = "SWITCH",
    Text = "TEXT",
    TextArea = "TEXTAREA",
    URL = "URL",
    ValueText = "TEXT_NO_VARS",
    ValueTextArea = "TEXTAREA_NO_VARS"
}
export type UserDefinedComboInputOptions = {
    fieldMappings: {
        label: string;
    }[];
};
export type UserDefinedFieldMappingOptions = {
    useDynamicMapper: false;
    fieldMappings: {
        label: string;
    }[];
} | {
    useDynamicMapper: true;
    dynamicObjectName?: string;
    dynamicObjectOptions?: DynamicMappingOptions | DynamicMappingField[];
};
export type DataSource = DynamicDataSource | StaticEnumDataSource | FieldMapperDataSource | ComboInputDataSource;
export type CustomFieldMapperSerializedInput = {
    id: string;
    title: string;
    required?: boolean;
    tooltip?: string;
    subtitle?: string;
    placeholder?: string;
    suffixLabel?: string;
    type: SidebarInputType.FieldMapper;
    sourceType: undefined;
    useDynamicMapper: true;
    dynamicObjectName?: string;
    dynamicObjectOptions?: DynamicMappingOptions | DynamicMappingField[];
    byoFieldMappingTestOptions?: {
        objectTypes: DynamicMappingField[];
        integrationFields: DynamicMappingField[];
    };
};
export type SerializedInput = {
    id: string;
    title: string;
    required?: boolean;
    tooltip?: string;
    subtitle?: string;
    placeholder?: string;
    suffixLabel?: string;
} & ({
    type: SidebarInputType.ValueText | SidebarInputType.Number | SidebarInputType.Email | SidebarInputType.URL | SidebarInputType.BooleanInput | SidebarInputType.Password;
} | {
    type: SidebarInputType.DynamicEnum | SidebarInputType.Enum;
    sourceType: string;
} | {
    type: SidebarInputType.ComboInput;
    sourceType: string;
    savedFieldMappings?: {
        label: string;
    }[];
} | {
    type: SidebarInputType.CustomDropdown;
    key: string;
    customDropdownOptions: CustomDropdownField[];
} | {
    type: SidebarInputType.DynamicComboInput;
    sourceType: string;
    useDynamicFields: boolean;
} | ({
    type: SidebarInputType.FieldMapper;
} & ({
    sourceType: string;
    useDynamicMapper: false;
    savedFieldMappings: {
        label: string;
    }[];
} | {
    sourceType?: string;
    useDynamicMapper: true;
    dynamicObjectName?: string;
    dynamicObjectOptions?: DynamicMappingOptions | DynamicMappingField[];
    byoFieldMappingTestOptions?: {
        objectTypes: DynamicMappingField[];
        integrationFields: DynamicMappingField[];
    };
})));
export type DefaultSupportedInputType = 'text' | 'number' | 'email' | 'url' | 'boolean' | 'password' | 'custom_dropdown' | 'custom_field_mapping';
export type DefaultInputToResultMap = {
    email: string;
    url: string;
    password: string;
    boolean: boolean;
    text: string;
    number: number;
    custom_dropdown: string;
    custom_field_mapping: {
        object: string;
        fields: Record<string, any>;
    };
};
export declare const createInputs: <T extends Record<string, UserDefinedInput<DefaultSupportedInputType>>>(inputs: T) => T;
