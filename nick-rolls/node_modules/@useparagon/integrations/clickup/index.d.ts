import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
  UserDefinedComboInputOptions,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type IClickupIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type:
        | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'boolean'
        | 'password'
        | 'space'
        | 'member';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | ({
      type: 'list' | 'status' | 'folder';
    } & UserDefinedComboInputOptions)
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
  space: string;
  member: string;
  list: {
    space: string;
    list: string;
  };
  status: {
    space: string;
    status: string;
  };
  folder: {
    space: string;
    folders: string;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IClickupIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for clickup
 */
export type IClickupIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Search Tasks
     * method for CLICKUP_SEARCH_TASKS
     */
    searchTasks: (
      inputs: IntentToInputOutput['CLICKUP_SEARCH_TASKS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CLICKUP_SEARCH_TASKS'][0],
      IntentToInputOutput['CLICKUP_SEARCH_TASKS'][1]
    >;

    /**
     * Get Tasks in List
     * method for CLICKUP_GET_TASK_IN_LIST
     */
    getTaskInList: (
      inputs: IntentToInputOutput['CLICKUP_GET_TASK_IN_LIST'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CLICKUP_GET_TASK_IN_LIST'][0],
      IntentToInputOutput['CLICKUP_GET_TASK_IN_LIST'][1]
    >;

    /**
     * Create Task
     * method for CLICKUP_CREATE_TASK
     */
    createTask: (
      inputs: IntentToInputOutput['CLICKUP_CREATE_TASK'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CLICKUP_CREATE_TASK'][0],
      IntentToInputOutput['CLICKUP_CREATE_TASK'][1]
    >;

    /**
     * Update Task
     * method for CLICKUP_UPDATE_TASK
     */
    updateTask: (
      inputs: IntentToInputOutput['CLICKUP_UPDATE_TASK'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CLICKUP_UPDATE_TASK'][0],
      IntentToInputOutput['CLICKUP_UPDATE_TASK'][1]
    >;

    /**
     * Delete Task
     * method for CLICKUP_DELETE_TASK
     */
    deleteTask: (
      inputs: IntentToInputOutput['CLICKUP_DELETE_TASK'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CLICKUP_DELETE_TASK'][0],
      IntentToInputOutput['CLICKUP_DELETE_TASK'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Folder Created
     * method for CLICKUP_TRIGGER_FOLDER_CREATED
     */
    folderCreated: (
      inputs: TriggerIntentToInputOutput['CLICKUP_TRIGGER_FOLDER_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_FOLDER_CREATED'][0],
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_FOLDER_CREATED'][1]
    >;

    /**
     * Folder Updated
     * method for CLICKUP_TRIGGER_FOLDER_UPDATED
     */
    folderUpdated: (
      inputs: TriggerIntentToInputOutput['CLICKUP_TRIGGER_FOLDER_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_FOLDER_UPDATED'][0],
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_FOLDER_UPDATED'][1]
    >;

    /**
     * New List Created
     * method for CLICKUP_TRIGGER_LIST_CREATED
     */
    listCreated: (
      inputs: TriggerIntentToInputOutput['CLICKUP_TRIGGER_LIST_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_LIST_CREATED'][0],
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_LIST_CREATED'][1]
    >;

    /**
     * List Updated
     * method for CLICKUP_TRIGGER_LIST_UPDATED
     */
    listUpdated: (
      inputs: TriggerIntentToInputOutput['CLICKUP_TRIGGER_LIST_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_LIST_UPDATED'][0],
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_LIST_UPDATED'][1]
    >;

    /**
     * New Space Created
     * method for CLICKUP_TRIGGER_SPACE_CREATED
     */
    spaceCreated: (
      inputs: TriggerIntentToInputOutput['CLICKUP_TRIGGER_SPACE_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_SPACE_CREATED'][0],
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_SPACE_CREATED'][1]
    >;

    /**
     * Space Updated
     * method for CLICKUP_TRIGGER_SPACE_UPDATED
     */
    spaceUpdated: (
      inputs: TriggerIntentToInputOutput['CLICKUP_TRIGGER_SPACE_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_SPACE_UPDATED'][0],
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_SPACE_UPDATED'][1]
    >;

    /**
     * New Task Created
     * method for CLICKUP_TRIGGER_TASK_CREATED
     */
    taskCreated: (
      inputs: TriggerIntentToInputOutput['CLICKUP_TRIGGER_TASK_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_TASK_CREATED'][0],
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_TASK_CREATED'][1]
    >;

    /**
     * Task Updated
     * method for CLICKUP_TRIGGER_TASK_UPDATED
     */
    taskUpdated: (
      inputs: TriggerIntentToInputOutput['CLICKUP_TRIGGER_TASK_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_TASK_UPDATED'][0],
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_TASK_UPDATED'][1]
    >;

    /**
     * New Comment on Task
     * method for CLICKUP_TRIGGER_TASK_NEW_COMMENT_ADDED
     */
    taskNewCommentAdded: (
      inputs: TriggerIntentToInputOutput['CLICKUP_TRIGGER_TASK_NEW_COMMENT_ADDED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_TASK_NEW_COMMENT_ADDED'][0],
      TriggerIntentToInputOutput['CLICKUP_TRIGGER_TASK_NEW_COMMENT_ADDED'][1]
    >;
  };
};
