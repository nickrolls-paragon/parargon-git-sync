const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for clickup
 */
exports.inputs = [
  {
    id: 'spaceCacheKey',
    title: 'Space',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'memberCacheKey',
    title: 'Member',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'comboFields',
    title: 'List',
    type: 'COMBO_INPUT_DATA_SOURCE',
    mainInputSource: {
      id: 'spaceCacheKey',
      title: 'Space',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    dependentInputSource: {
      id: 'listCacheKey',
      title: 'List',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
  {
    id: 'comboStatusFields',
    title: 'Status',
    type: 'COMBO_INPUT_DATA_SOURCE',
    mainInputSource: {
      id: 'spaceCacheKey',
      title: 'Space',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    dependentInputSource: {
      id: 'statusCacheKey',
      title: 'Status',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
  {
    id: 'spaceFolderCombo',
    title: 'Folder',
    type: 'COMBO_INPUT_DATA_SOURCE',
    mainInputSource: {
      id: 'folderSpaceCacheKey',
      title: 'Space',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    dependentInputSource: {
      id: 'folderCacheKey',
      title: 'Folders',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
];

/**
 * triggers for clickup
 */
exports.triggers = [
  {
    title: 'New Folder Created',
    name: 'CLICKUP_TRIGGER_FOLDER_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Folder Updated',
    name: 'CLICKUP_TRIGGER_FOLDER_UPDATED',
    output: [],
    inputs: [
      {
        id: 'spaceId',
        title: 'Space ID',
        type: 'TEXTAREA',
        subtitle:
          'Trigger when a Folder is created within the provided Space. Use Connect Portal Workflow Settings to allow users to select a ClickUp Space. Defaults to watching all Spaces.',
      },
    ],
  },
  {
    title: 'New List Created',
    name: 'CLICKUP_TRIGGER_LIST_CREATED',
    output: [],
    inputs: [
      {
        id: 'spaceId',
        title: 'Space ID',
        type: 'TEXTAREA',
        subtitle:
          'Trigger when a List is created within this Space. Use Connect Portal Workflow Settings to allow users to select a ClickUp Space. Defaults to all Spaces.',
      },
      {
        id: 'folderId',
        title: 'Folder ID',
        type: 'TEXTAREA',
        subtitle:
          'Trigger when a List is created within this Folder. Use Connect Portal Workflow Settings to allow users to select a ClickUp Space. Defaults to provided Space.',
      },
    ],
  },
  {
    title: 'List Updated',
    name: 'CLICKUP_TRIGGER_LIST_UPDATED',
    output: [],
    inputs: [
      {
        id: 'spaceId',
        title: 'Space ID',
        type: 'TEXTAREA',
        subtitle:
          'Trigger when a List is updated within this Space. Use Connect Portal Workflow Settings to allow users to select a ClickUp Space. Defaults to all Spaces.',
      },
      {
        id: 'folderId',
        title: 'Folder ID',
        type: 'TEXTAREA',
        subtitle:
          'Trigger when a List is updated within this Folder. Use Connect Portal Workflow Settings to allow users to select a ClickUp Folder. Defaults to provided Folder.',
      },
      {
        id: 'listId',
        title: 'List ID',
        type: 'TEXTAREA',
        subtitle:
          'Provide a List to watch for updates. Use Connect Portal Workflow Settings to allow users to select a ClickUp List. Defaults to provided Folder.',
      },
    ],
  },
  {
    title: 'New Space Created',
    name: 'CLICKUP_TRIGGER_SPACE_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Space Updated',
    name: 'CLICKUP_TRIGGER_SPACE_UPDATED',
    output: [],
    inputs: [
      {
        id: 'spaceId',
        title: 'Space ID',
        type: 'TEXTAREA',
        subtitle:
          'Provide a Space to watch for updates. Use Connect Portal Workflow Settings to allow users to select a ClickUp Space. Defaults to all Spaces.',
      },
    ],
  },
  {
    title: 'New Task Created',
    name: 'CLICKUP_TRIGGER_TASK_CREATED',
    output: [],
    inputs: [
      {
        id: 'listId',
        title: 'List',
        type: 'TEXTAREA',
        subtitle:
          'Select a List to create this task in. Use Connect Portal User Settings to allow users to select a ClickUp List.',
        required: true,
      },
    ],
  },
  {
    title: 'Task Updated',
    name: 'CLICKUP_TRIGGER_TASK_UPDATED',
    output: [],
    inputs: [
      {
        id: 'listId',
        title: 'List',
        type: 'TEXTAREA',
        subtitle:
          'Select a List to create this task in. Use Connect Portal User Settings to allow users to select a ClickUp List.',
        required: true,
      },
    ],
  },
  {
    title: 'New Comment on Task',
    name: 'CLICKUP_TRIGGER_TASK_NEW_COMMENT_ADDED',
    output: [],
    inputs: [
      {
        id: 'listId',
        title: 'List ID',
        type: 'TEXTAREA',
        subtitle:
          'Trigger when a comment is added to a Task within the provided List. Use Connect Portal Workflow Settings to allow users to select a ClickUp List.',
        required: true,
      },
      {
        id: 'taskId',
        title: 'Task ID',
        type: 'TEXTAREA',
        subtitle:
          'Trigger when a comment is added to the provided Task. Defaults to subscribing to all Tasks within the List. Use Connect Portal Workflow Settings to allow users to select a ClickUp Task.',
      },
    ],
  },
];

/**
 * intents for clickup
 */
exports.intents = [
  {
    title: 'Search Tasks',
    name: 'CLICKUP_SEARCH_TASKS',
    output: [],
    inputs: [
      {
        id: 'taskFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for tasks that match specified filters.',
        supportedKeys: [
          'space_ids%5B%5D',
          'project_ids%5B%5D',
          'list_ids%5B%5D',
          'statuses%5B%5D',
          'include_closed',
          'assignees%5B%5D',
          'tags%5B%5D',
          'due_date_gt',
          'due_date_lt',
          'date_created_gt',
          'date_created_lt',
          'date_updated_gt',
          'date_updated_lt',
          'date_created_gt',
        ],
        supportedOperators: [
          '$stringExactlyMatches',
          '$numberEquals',
          '$booleanFalse',
          '$booleanTrue',
          '$dateTimeEquals',
        ],
      },
    ],
  },
  {
    title: 'Get Tasks in List',
    name: 'CLICKUP_GET_TASK_IN_LIST',
    output: [],
    inputs: [
      {
        id: 'listId',
        title: 'List',
        type: 'TEXTAREA',
        subtitle:
          'Select a List to get tasks from. Use Connect Portal User Settings to allow users to select a ClickUp List.',
        required: true,
      },
      {
        id: 'taskFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for tasks that match specified filters.',
        supportedKeys: [
          'space_ids%5B%5D',
          'project_ids%5B%5D',
          'list_ids%5B%5D',
          'statuses%5B%5D',
          'include_closed',
          'assignees%5B%5D',
          'tags%5B%5D',
          'due_date_gt',
          'due_date_lt',
          'date_created_gt',
          'date_created_lt',
          'date_updated_gt',
          'date_updated_lt',
          'date_created_gt',
        ],
        supportedOperators: [
          '$stringExactlyMatches',
          '$numberEquals',
          '$booleanFalse',
          '$booleanTrue',
          '$dateTimeEquals',
        ],
      },
    ],
  },
  {
    title: 'Create Task',
    name: 'CLICKUP_CREATE_TASK',
    output: [],
    inputs: [
      {
        id: 'listId',
        title: 'List',
        type: 'TEXTAREA',
        subtitle:
          'Select a List to create this task in. Use Connect Portal User Settings to allow users to select a ClickUp List.',
        required: true,
      },
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'description',
        title: 'Description',
        type: 'TEXTAREA',
      },
      {
        id: 'status',
        title: 'Status',
        type: 'TEXTAREA',
        subtitle:
          'Select a Status for this task. Use Connect Portal User Settings to allow users to select a ClickUp Status.',
      },
      {
        id: 'assignees',
        title: 'Assignees',
        type: 'TEXTAREA',
        subtitle:
          'Select a Member (or an array of member IDs) to be assigned to this task. Use Connect Portal User Settings to allow users to select a ClickUp Member.',
      },
      {
        id: 'dueDate',
        title: 'Due Date',
        type: 'TEXTAREA',
        subtitle: 'Specify a date for this task to be due on.',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'TEXTAREA',
        subtitle: 'Specify additional fields to include on this task as JSON.',
      },
    ],
  },
  {
    title: 'Update Task',
    name: 'CLICKUP_UPDATE_TASK',
    output: [],
    inputs: [
      {
        id: 'taskId',
        title: 'Task ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the task to update.',
        required: true,
      },
      {
        id: 'listId',
        title: 'List',
        type: 'TEXTAREA',
        subtitle:
          'Select a List to create this task in. Use Connect Portal User Settings to allow users to select a ClickUp List.',
        required: true,
      },
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
      },
      {
        id: 'description',
        title: 'Description',
        type: 'TEXTAREA',
      },
      {
        id: 'status',
        title: 'Status',
        type: 'TEXTAREA',
        subtitle:
          'Select a Status for this task. Use Connect Portal User Settings to allow users to select a ClickUp Status.',
      },
      {
        id: 'assignees',
        title: 'Assignees',
        type: 'TEXTAREA',
        subtitle:
          'Select a Member (or an array of member IDs) to be assigned to this task. Use Connect Portal User Settings to allow users to select a ClickUp Member.',
      },
      {
        id: 'dueDate',
        title: 'Due Date',
        type: 'TEXTAREA',
        subtitle: 'Specify a date for this task to be due on.',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'TEXTAREA',
        subtitle: 'Specify additional fields to include on this task as JSON.',
      },
    ],
  },
  {
    title: 'Delete Task',
    name: 'CLICKUP_DELETE_TASK',
    output: [],
    inputs: [
      {
        id: 'taskId',
        title: 'Task ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the task to delete.',
        required: true,
      },
    ],
  },
];

/**
 * integration class for clickup
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'clickup',

  /**
   * action step methods
   */
  actions: {
    /**
     * Search Tasks
     * method for CLICKUP_SEARCH_TASKS
     */
    searchTasks: (inputs, options) => {
      return new ActionStep({
        intent: 'CLICKUP_SEARCH_TASKS',
        actionType: 'clickup',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Tasks in List
     * method for CLICKUP_GET_TASK_IN_LIST
     */
    getTaskInList: (inputs, options) => {
      return new ActionStep({
        intent: 'CLICKUP_GET_TASK_IN_LIST',
        actionType: 'clickup',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Task
     * method for CLICKUP_CREATE_TASK
     */
    createTask: (inputs, options) => {
      return new ActionStep({
        intent: 'CLICKUP_CREATE_TASK',
        actionType: 'clickup',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Task
     * method for CLICKUP_UPDATE_TASK
     */
    updateTask: (inputs, options) => {
      return new ActionStep({
        intent: 'CLICKUP_UPDATE_TASK',
        actionType: 'clickup',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Task
     * method for CLICKUP_DELETE_TASK
     */
    deleteTask: (inputs, options) => {
      return new ActionStep({
        intent: 'CLICKUP_DELETE_TASK',
        actionType: 'clickup',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Folder Created
     * method for CLICKUP_TRIGGER_FOLDER_CREATED
     */
    folderCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'CLICKUP_TRIGGER_FOLDER_CREATED',
        actionType: 'clickup',
        parameters: inputs,
      });
    },
    /**
     * Folder Updated
     * method for CLICKUP_TRIGGER_FOLDER_UPDATED
     */
    folderUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'CLICKUP_TRIGGER_FOLDER_UPDATED',
        actionType: 'clickup',
        parameters: inputs,
      });
    },
    /**
     * New List Created
     * method for CLICKUP_TRIGGER_LIST_CREATED
     */
    listCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'CLICKUP_TRIGGER_LIST_CREATED',
        actionType: 'clickup',
        parameters: inputs,
      });
    },
    /**
     * List Updated
     * method for CLICKUP_TRIGGER_LIST_UPDATED
     */
    listUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'CLICKUP_TRIGGER_LIST_UPDATED',
        actionType: 'clickup',
        parameters: inputs,
      });
    },
    /**
     * New Space Created
     * method for CLICKUP_TRIGGER_SPACE_CREATED
     */
    spaceCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'CLICKUP_TRIGGER_SPACE_CREATED',
        actionType: 'clickup',
        parameters: inputs,
      });
    },
    /**
     * Space Updated
     * method for CLICKUP_TRIGGER_SPACE_UPDATED
     */
    spaceUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'CLICKUP_TRIGGER_SPACE_UPDATED',
        actionType: 'clickup',
        parameters: inputs,
      });
    },
    /**
     * New Task Created
     * method for CLICKUP_TRIGGER_TASK_CREATED
     */
    taskCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'CLICKUP_TRIGGER_TASK_CREATED',
        actionType: 'clickup',
        parameters: inputs,
      });
    },
    /**
     * Task Updated
     * method for CLICKUP_TRIGGER_TASK_UPDATED
     */
    taskUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'CLICKUP_TRIGGER_TASK_UPDATED',
        actionType: 'clickup',
        parameters: inputs,
      });
    },
    /**
     * New Comment on Task
     * method for CLICKUP_TRIGGER_TASK_NEW_COMMENT_ADDED
     */
    taskNewCommentAdded: (inputs) => {
      return new ActionTriggerStep({
        intent: 'CLICKUP_TRIGGER_TASK_NEW_COMMENT_ADDED',
        actionType: 'clickup',
        parameters: inputs,
      });
    },
  },
};
