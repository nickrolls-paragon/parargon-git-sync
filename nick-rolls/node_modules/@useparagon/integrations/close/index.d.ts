import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  UserDefinedComboInputOptions,
  UserDefinedFieldMappingOptions,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type ICloseIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type:
        | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'boolean'
        | 'password'
        | 'users'
        | 'leads';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | ({
      type: 'field_mapping';
    } & UserDefinedFieldMappingOptions)
  | ({
      type: 'status' | 'custom_fields';
    } & UserDefinedComboInputOptions)
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;

  users: string;
  leads: string;
  status: {
    record_type: string;
    status: string;
  };
  custom_fields: {
    record_type: string;
    custom_fields: string;
  };
  field_mapping: {
    record_type: string;
    custom_fields: Record<string, any>;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, ICloseIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for close
 */
export type ICloseIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Record
     * method for CLOSE_CREATE_RECORD
     */
    createRecord: (
      inputs: IntentToInputOutput['CLOSE_CREATE_RECORD'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CLOSE_CREATE_RECORD'][0],
      IntentToInputOutput['CLOSE_CREATE_RECORD'][1]
    >;

    /**
     * Update Record
     * method for CLOSE_UPDATE_RECORD
     */
    updateRecord: (
      inputs: IntentToInputOutput['CLOSE_UPDATE_RECORD'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CLOSE_UPDATE_RECORD'][0],
      IntentToInputOutput['CLOSE_UPDATE_RECORD'][1]
    >;

    /**
     * Get Record by ID
     * method for CLOSE_GET_RECORD_BY_ID
     */
    getRecordById: (
      inputs: IntentToInputOutput['CLOSE_GET_RECORD_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CLOSE_GET_RECORD_BY_ID'][0],
      IntentToInputOutput['CLOSE_GET_RECORD_BY_ID'][1]
    >;

    /**
     * Search Record
     * method for CLOSE_SEARCH_RECORD
     */
    searchRecord: (
      inputs: IntentToInputOutput['CLOSE_SEARCH_RECORD'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CLOSE_SEARCH_RECORD'][0],
      IntentToInputOutput['CLOSE_SEARCH_RECORD'][1]
    >;

    /**
     * Delete Record
     * method for CLOSE_DELETE_RECORD
     */
    deleteRecord: (
      inputs: IntentToInputOutput['CLOSE_DELETE_RECORD'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CLOSE_DELETE_RECORD'][0],
      IntentToInputOutput['CLOSE_DELETE_RECORD'][1]
    >;

    /**
     * Search records by JSON filter
     * method for CLOSE_ADVANCED_FILTERING
     */
    advancedFiltering: (
      inputs: IntentToInputOutput['CLOSE_ADVANCED_FILTERING'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CLOSE_ADVANCED_FILTERING'][0],
      IntentToInputOutput['CLOSE_ADVANCED_FILTERING'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Record Created
     * method for CLOSE_TRIGGER_RECORD_CREATED
     */
    recordCreated: (
      inputs: TriggerIntentToInputOutput['CLOSE_TRIGGER_RECORD_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['CLOSE_TRIGGER_RECORD_CREATED'][0],
      TriggerIntentToInputOutput['CLOSE_TRIGGER_RECORD_CREATED'][1]
    >;

    /**
     * Record Updated
     * method for CLOSE_TRIGGER_RECORD_UPDATED
     */
    recordUpdated: (
      inputs: TriggerIntentToInputOutput['CLOSE_TRIGGER_RECORD_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['CLOSE_TRIGGER_RECORD_UPDATED'][0],
      TriggerIntentToInputOutput['CLOSE_TRIGGER_RECORD_UPDATED'][1]
    >;

    /**
     * Record Deleted
     * method for CLOSE_TRIGGER_RECORD_DELETED
     */
    recordDeleted: (
      inputs: TriggerIntentToInputOutput['CLOSE_TRIGGER_RECORD_DELETED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['CLOSE_TRIGGER_RECORD_DELETED'][0],
      TriggerIntentToInputOutput['CLOSE_TRIGGER_RECORD_DELETED'][1]
    >;
  };
};
