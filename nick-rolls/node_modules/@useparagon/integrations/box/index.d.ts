import { ActionStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';

type IBoxIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type: 'text' | 'number' | 'email' | 'url' | 'boolean' | 'password';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IBoxIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for box
 */
export type IBoxIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Upload File from URL
     * method for BOX_SAVE_FILE
     */
    saveFile: (
      inputs: IntentToInputOutput['BOX_SAVE_FILE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['BOX_SAVE_FILE'][0],
      IntentToInputOutput['BOX_SAVE_FILE'][1]
    >;

    /**
     * Upload File
     * method for BOX_SAVE_FILE_FROM_OBJECT
     */
    saveFileFromObject: (
      inputs: IntentToInputOutput['BOX_SAVE_FILE_FROM_OBJECT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['BOX_SAVE_FILE_FROM_OBJECT'][0],
      IntentToInputOutput['BOX_SAVE_FILE_FROM_OBJECT'][1]
    >;

    /**
     * Get File By ID
     * method for BOX_GET_FILE_BY_ID
     */
    getFileById: (
      inputs: IntentToInputOutput['BOX_GET_FILE_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['BOX_GET_FILE_BY_ID'][0],
      IntentToInputOutput['BOX_GET_FILE_BY_ID'][1]
    >;

    /**
     * List Files
     * method for BOX_LIST_FILES
     */
    listFiles: (
      inputs: IntentToInputOutput['BOX_LIST_FILES'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['BOX_LIST_FILES'][0],
      IntentToInputOutput['BOX_LIST_FILES'][1]
    >;

    /**
     * Download File
     * method for BOX_DOWNLOAD_FILE
     */
    downloadFile: (
      inputs: IntentToInputOutput['BOX_DOWNLOAD_FILE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['BOX_DOWNLOAD_FILE'][0],
      IntentToInputOutput['BOX_DOWNLOAD_FILE'][1]
    >;

    /**
     * Create Folder
     * method for BOX_CREATE_FOLDER
     */
    createFolder: (
      inputs: IntentToInputOutput['BOX_CREATE_FOLDER'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['BOX_CREATE_FOLDER'][0],
      IntentToInputOutput['BOX_CREATE_FOLDER'][1]
    >;

    /**
     * Move Folder
     * method for BOX_MOVE_FOLDER
     */
    moveFolder: (
      inputs: IntentToInputOutput['BOX_MOVE_FOLDER'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['BOX_MOVE_FOLDER'][0],
      IntentToInputOutput['BOX_MOVE_FOLDER'][1]
    >;

    /**
     * Get Folder By ID
     * method for BOX_GET_FOLDER_BY_ID
     */
    getFolderById: (
      inputs: IntentToInputOutput['BOX_GET_FOLDER_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['BOX_GET_FOLDER_BY_ID'][0],
      IntentToInputOutput['BOX_GET_FOLDER_BY_ID'][1]
    >;

    /**
     * Search Folders
     * method for BOX_SEARCH_FOLDERS
     */
    searchFolders: (
      inputs: IntentToInputOutput['BOX_SEARCH_FOLDERS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['BOX_SEARCH_FOLDERS'][0],
      IntentToInputOutput['BOX_SEARCH_FOLDERS'][1]
    >;

    /**
     * Delete Folder
     * method for BOX_DELETE_FOLDER
     */
    deleteFolder: (
      inputs: IntentToInputOutput['BOX_DELETE_FOLDER'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['BOX_DELETE_FOLDER'][0],
      IntentToInputOutput['BOX_DELETE_FOLDER'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {};
};
