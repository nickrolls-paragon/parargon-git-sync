const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for box
 */
exports.inputs = [];

/**
 * triggers for box
 */
exports.triggers = [];

/**
 * intents for box
 */
exports.intents = [
  {
    title: 'Upload File from URL',
    name: 'BOX_SAVE_FILE',
    output: [],
    inputs: [
      {
        id: 'fileAttributes',
        title: 'Attributes',
        type: 'CODE',
        placeholder:
          '{\n    "content_created_at": "2012-12-12T10:53:43-08:00",\n    "content_modified_at": "2012-12-12T10:53:43-08:00",\n    "name": "qwerty.png",\n    "parent": { "id": "1234567" }\n}',
        required: true,
      },
      {
        id: 'file',
        title: 'File URL',
        type: 'TEXTAREA',
        subtitle: 'Files must be smaller than 50MB in size.',
        placeholder: 'https://picsum.photos/200/300',
        required: true,
      },
    ],
  },
  {
    title: 'Upload File',
    name: 'BOX_SAVE_FILE_FROM_OBJECT',
    output: [],
    inputs: [
      {
        id: 'file',
        title: 'File',
        type: 'TEXTAREA',
        subtitle:
          'Accepts a File Object containing file data. Files must be smaller than 50MB in size.',
        placeholder: 'Choose a file',
        required: true,
      },
      {
        id: 'fileName',
        title: 'File Name',
        type: 'TEXTAREA',
        placeholder: 'qwerty.png',
        required: true,
      },
      {
        id: 'folder',
        title: 'Folder',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select the File’s Folder destination. Defaults to the user’s root folder if left blank.',
      },
    ],
  },
  {
    title: 'Get File By ID',
    name: 'BOX_GET_FILE_BY_ID',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle: 'The unique identifier that represents a file.',
        placeholder: '12345',
        required: true,
      },
    ],
  },
  {
    title: 'List Files',
    name: 'BOX_LIST_FILES',
    output: [],
    inputs: [
      {
        id: 'folderId',
        title: 'Folder ID',
        type: 'TEXTAREA',
        subtitle: 'The unique identifier that represents a folder.',
        placeholder: '0',
        required: true,
      },
      {
        id: 'filterFormula',
        title: 'Filter Search',
        type: 'CONDITIONAL',
        supportedKeys: ['direction', 'sort'],
        supportedOperators: [
          '$stringExactlyMatches',
          '$booleanFalse',
          '$booleanTrue',
          '$numberEquals',
        ],
        disableOrCondition: true,
      },
    ],
  },
  {
    title: 'Download File',
    name: 'BOX_DOWNLOAD_FILE',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle: 'The unique identifier that represents a file.',
        placeholder: '12345',
        required: true,
      },
    ],
  },
  {
    title: 'Create Folder',
    name: 'BOX_CREATE_FOLDER',
    output: [],
    inputs: [
      {
        id: 'folderName',
        title: 'Name',
        type: 'TEXTAREA',
        subtitle: 'The name for the new folder.',
        placeholder: 'New Folder',
        required: true,
      },
      {
        id: 'folderParent',
        title: 'Parent Folder',
        type: 'CODE',
        placeholder: '{\n    "id": "123456"\n}',
        required: true,
      },
    ],
  },
  {
    title: 'Move Folder',
    name: 'BOX_MOVE_FOLDER',
    output: [],
    inputs: [
      {
        id: 'folderId',
        title: 'Folder ID',
        type: 'TEXTAREA',
        subtitle: 'The unique identifier that represents a folder.',
        placeholder: '0',
        required: true,
      },
      {
        id: 'folderName',
        title: 'Name',
        type: 'TEXTAREA',
        subtitle: 'The name for the new folder.',
        placeholder: 'New Folder',
        required: true,
      },
      {
        id: 'folderParent',
        title: 'Parent Folder',
        type: 'CODE',
        placeholder: '{\n    "id": "123456"\n}',
        required: true,
      },
    ],
  },
  {
    title: 'Get Folder By ID',
    name: 'BOX_GET_FOLDER_BY_ID',
    output: [],
    inputs: [
      {
        id: 'folderId',
        title: 'Folder ID',
        type: 'TEXTAREA',
        subtitle: 'The unique identifier that represents a folder.',
        placeholder: '0',
        required: true,
      },
    ],
  },
  {
    title: 'Search Folders',
    name: 'BOX_SEARCH_FOLDERS',
    output: [],
    inputs: [
      {
        id: 'folderId',
        title: 'Folder ID',
        type: 'TEXTAREA',
        subtitle: 'The unique identifier that represents a folder.',
        placeholder: '0',
        required: true,
      },
      {
        id: 'filterFormula',
        title: 'Filter Search',
        type: 'CONDITIONAL',
        supportedKeys: ['direction', 'sort'],
        supportedOperators: [
          '$stringExactlyMatches',
          '$booleanFalse',
          '$booleanTrue',
          '$numberEquals',
        ],
        disableOrCondition: true,
      },
    ],
  },
  {
    title: 'Delete Folder',
    name: 'BOX_DELETE_FOLDER',
    output: [],
    inputs: [
      {
        id: 'folderId',
        title: 'Folder ID',
        type: 'TEXTAREA',
        subtitle: 'The unique identifier that represents a folder.',
        placeholder: '0',
        required: true,
      },
      {
        id: 'recursive',
        title: 'Recursive',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Delete a folder that is not empty by recursively deleting the folder and all of its content.',
      },
    ],
  },
];

/**
 * integration class for box
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'box',

  /**
   * action step methods
   */
  actions: {
    /**
     * Upload File from URL
     * method for BOX_SAVE_FILE
     */
    saveFile: (inputs, options) => {
      return new ActionStep({
        intent: 'BOX_SAVE_FILE',
        actionType: 'box',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Upload File
     * method for BOX_SAVE_FILE_FROM_OBJECT
     */
    saveFileFromObject: (inputs, options) => {
      return new ActionStep({
        intent: 'BOX_SAVE_FILE_FROM_OBJECT',
        actionType: 'box',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get File By ID
     * method for BOX_GET_FILE_BY_ID
     */
    getFileById: (inputs, options) => {
      return new ActionStep({
        intent: 'BOX_GET_FILE_BY_ID',
        actionType: 'box',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * List Files
     * method for BOX_LIST_FILES
     */
    listFiles: (inputs, options) => {
      return new ActionStep({
        intent: 'BOX_LIST_FILES',
        actionType: 'box',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Download File
     * method for BOX_DOWNLOAD_FILE
     */
    downloadFile: (inputs, options) => {
      return new ActionStep({
        intent: 'BOX_DOWNLOAD_FILE',
        actionType: 'box',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Folder
     * method for BOX_CREATE_FOLDER
     */
    createFolder: (inputs, options) => {
      return new ActionStep({
        intent: 'BOX_CREATE_FOLDER',
        actionType: 'box',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Move Folder
     * method for BOX_MOVE_FOLDER
     */
    moveFolder: (inputs, options) => {
      return new ActionStep({
        intent: 'BOX_MOVE_FOLDER',
        actionType: 'box',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Folder By ID
     * method for BOX_GET_FOLDER_BY_ID
     */
    getFolderById: (inputs, options) => {
      return new ActionStep({
        intent: 'BOX_GET_FOLDER_BY_ID',
        actionType: 'box',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Folders
     * method for BOX_SEARCH_FOLDERS
     */
    searchFolders: (inputs, options) => {
      return new ActionStep({
        intent: 'BOX_SEARCH_FOLDERS',
        actionType: 'box',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Folder
     * method for BOX_DELETE_FOLDER
     */
    deleteFolder: (inputs, options) => {
      return new ActionStep({
        intent: 'BOX_DELETE_FOLDER',
        actionType: 'box',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {},
};
