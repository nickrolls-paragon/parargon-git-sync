import { ConditionalInput } from '@useparagon/core/steps/library/conditional';

/**
 * Upload File from URL intent type
 */
type BoxSaveFile = {
  /**
   * Attributes
   *
   * **Example**:
   * ```
   * {
   *    "content_created_at": "2012-12-12T10:53:43-08:00",
   *    "content_modified_at": "2012-12-12T10:53:43-08:00",
   *    "name": "qwerty.png",
   *    "parent": { "id": "1234567" }
   *}
   * ```
   */
  fileAttributes: string;

  /**
   * File URL
   * Files must be smaller than 50MB in size.
   *
   * **Example**:
   * ```
   * https://picsum.photos/200/300
   * ```
   */
  file: string;
};

/**
 * Upload File intent type
 */
type BoxSaveFileFromObject = {
  /**
   * File
   * Accepts a File Object containing file data. Files must be smaller than 50MB in size.
   *
   * **Example**:
   * ```
   * Choose a file
   * ```
   */
  file: string;

  /**
   * File Name
   *
   * **Example**:
   * ```
   * qwerty.png
   * ```
   */
  fileName: string;

  /**
   * Folder
   * Use Connect Portal Workflow Settings to allow users to select the File’s Folder destination. Defaults to the user’s root folder if left blank.
   *
   */
  folder?: string;
};

/**
 * Get File By ID intent type
 */
type BoxGetFileById = {
  /**
   * File ID
   * The unique identifier that represents a file.
   *
   * **Example**:
   * ```
   * 12345
   * ```
   */
  fileId: string;
};

/**
 * List Files intent type
 */
type BoxListFiles = {
  /**
   * Folder ID
   * The unique identifier that represents a folder.
   *
   * **Example**:
   * ```
   * 0
   * ```
   */
  folderId: string;

  /**
   * Filter Search
   *
   */
  filterFormula?: ConditionalInput;
};

/**
 * Download File intent type
 */
type BoxDownloadFile = {
  /**
   * File ID
   * The unique identifier that represents a file.
   *
   * **Example**:
   * ```
   * 12345
   * ```
   */
  fileId: string;
};

/**
 * Create Folder intent type
 */
type BoxCreateFolder = {
  /**
   * Name
   * The name for the new folder.
   *
   * **Example**:
   * ```
   * New Folder
   * ```
   */
  folderName: string;

  /**
   * Parent Folder
   *
   * **Example**:
   * ```
   * {
   *    "id": "123456"
   *}
   * ```
   */
  folderParent: string;
};

/**
 * Move Folder intent type
 */
type BoxMoveFolder = {
  /**
   * Folder ID
   * The unique identifier that represents a folder.
   *
   * **Example**:
   * ```
   * 0
   * ```
   */
  folderId: string;

  /**
   * Name
   * The name for the new folder.
   *
   * **Example**:
   * ```
   * New Folder
   * ```
   */
  folderName: string;

  /**
   * Parent Folder
   *
   * **Example**:
   * ```
   * {
   *    "id": "123456"
   *}
   * ```
   */
  folderParent: string;
};

/**
 * Get Folder By ID intent type
 */
type BoxGetFolderById = {
  /**
   * Folder ID
   * The unique identifier that represents a folder.
   *
   * **Example**:
   * ```
   * 0
   * ```
   */
  folderId: string;
};

/**
 * Search Folders intent type
 */
type BoxSearchFolders = {
  /**
   * Folder ID
   * The unique identifier that represents a folder.
   *
   * **Example**:
   * ```
   * 0
   * ```
   */
  folderId: string;

  /**
   * Filter Search
   *
   */
  filterFormula?: ConditionalInput;
};

/**
 * Delete Folder intent type
 */
type BoxDeleteFolder = {
  /**
   * Folder ID
   * The unique identifier that represents a folder.
   *
   * **Example**:
   * ```
   * 0
   * ```
   */
  folderId: string;

  /**
   * Recursive
   * Delete a folder that is not empty by recursively deleting the folder and all of its content.
   *
   */
  recursive?: boolean;
};

export type IntentToInputOutput = {
  /**
   * BOX_SAVE_FILE
   */
  BOX_SAVE_FILE: [BoxSaveFile, any];

  /**
   * BOX_SAVE_FILE_FROM_OBJECT
   */
  BOX_SAVE_FILE_FROM_OBJECT: [BoxSaveFileFromObject, any];

  /**
   * BOX_GET_FILE_BY_ID
   */
  BOX_GET_FILE_BY_ID: [BoxGetFileById, any];

  /**
   * BOX_LIST_FILES
   */
  BOX_LIST_FILES: [BoxListFiles, any];

  /**
   * BOX_DOWNLOAD_FILE
   */
  BOX_DOWNLOAD_FILE: [BoxDownloadFile, any];

  /**
   * BOX_CREATE_FOLDER
   */
  BOX_CREATE_FOLDER: [BoxCreateFolder, any];

  /**
   * BOX_MOVE_FOLDER
   */
  BOX_MOVE_FOLDER: [BoxMoveFolder, any];

  /**
   * BOX_GET_FOLDER_BY_ID
   */
  BOX_GET_FOLDER_BY_ID: [BoxGetFolderById, any];

  /**
   * BOX_SEARCH_FOLDERS
   */
  BOX_SEARCH_FOLDERS: [BoxSearchFolders, any];

  /**
   * BOX_DELETE_FOLDER
   */
  BOX_DELETE_FOLDER: [BoxDeleteFolder, any];
};
