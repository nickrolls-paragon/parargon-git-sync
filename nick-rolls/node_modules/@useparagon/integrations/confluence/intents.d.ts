import { ConditionalInput } from '@useparagon/core/steps/library/conditional';

/**
 * Create Page intent type
 */
type ConfluenceCreatePage = {
  /**
   * Space ID
   * ID of the space
   *
   * **Example**:
   * ```
   * 65539
   * ```
   */
  spaceId: string;

  /**
   * Status
   * The status of the page
   *
   */
  status?: 'current' | 'draft';

  /**
   * Title
   * Title of the page, required if page status is not draft
   *
   * **Example**:
   * ```
   * Page Title
   * ```
   */
  title?: string;

  /**
   * Parent ID
   * The parent content ID of the page
   *
   * **Example**:
   * ```
   * 131154
   * ```
   */
  parentId?: string;

  /**
   * Body
   *
   * **Example**:
   * ```
   * {
   *  "storage": {
   *    "representation": "storage",
   *    "value": "<string>"
   *  },
   *  "atlas_doc_format": {
   *    "representation": "storage",
   *    "value": "<string>"
   *  },
   *  "wiki": {
   *    "representation": "storage",
   *    "value": "<string>"
   *  }
   *}
   * ```
   */
  additionalBody?: string;
};

/**
 * Update Page intent type
 */
type ConfluenceUpdatePage = {
  /**
   * Page ID
   * ID of the page
   *
   * **Example**:
   * ```
   * 3145729
   * ```
   */
  pageId: string;

  /**
   * Space ID
   * ID of the space
   *
   * **Example**:
   * ```
   * 65539
   * ```
   */
  spaceId: string;

  /**
   * Status
   * The current status of the page
   *
   */
  status: 'current' | 'draft' | 'archived' | 'deleted';

  /**
   * Title
   * Title of the page, required if page status is not draft
   *
   * **Example**:
   * ```
   * Page Title
   * ```
   */
  title: string;

  /**
   * Version
   * Version number and message to be stored with updated page
   *
   * **Example**:
   * ```
   * {
   *  "number":47,
   *  "message":"<string>"
   *}
   * ```
   */
  version: string;

  /**
   * Body
   *
   * **Example**:
   * ```
   * {
   *  "storage": {
   *    "representation": "storage",
   *    "value": "<string>"
   *  },
   *  "atlas_doc_format": {
   *    "representation": "storage",
   *    "value": "<string>"
   *  },
   *  "wiki": {
   *    "representation": "storage",
   *    "value": "<string>"
   *  }
   *}
   * ```
   */
  additionalBody: string;
};

/**
 * Get Page by ID intent type
 */
type ConfluenceGetPageById = {
  /**
   * Page ID
   * ID of the page
   *
   * **Example**:
   * ```
   * 3145729
   * ```
   */
  pageId: string;

  /**
   * Body Format
   * The content format types to be returned in the body field of the response
   *
   */
  bodyFormat?: 'storage' | 'atlas_doc_format';

  /**
   * Get Draft
   * Retrieve the draft version of this page. Defaults to false
   *
   */
  getDraft?: boolean;

  /**
   * Version Number
   * Allows you to retrieve a previously published version. Specify the previous version`s number to retrieve its details
   *
   * **Example**:
   * ```
   * 2
   * ```
   */
  versionNumber?: string;

  /**
   * Additional Fields
   *
   * **Example**:
   * ```
   * {
   *  "include-labels": true
   *}
   * ```
   */
  additionalFields?: string;
};

/**
 * Get Pages in Space intent type
 */
type ConfluenceGetPagesInSpace = {
  /**
   * Space ID
   * ID of the space
   *
   * **Example**:
   * ```
   * 65539
   * ```
   */
  spaceId: string;

  /**
   * Status
   * The status of the page
   *
   */
  status?: 'current' | 'archived' | 'trashed';

  /**
   * Body Format
   * The content format types to be returned in the body field of the response
   *
   */
  bodyFormat?: 'storage' | 'atlas_doc_format';

  /**
   * Limit
   * Maximum number of records to return in the result. Defaults to no limit.
   *
   * **Example**:
   * ```
   * No limit
   * ```
   */
  limit?: string;
};

/**
 * Get Pages by Label intent type
 */
type ConfluenceGetPagesByLabel = {
  /**
   * Label ID
   * The ID of the label for which pages should be returned
   *
   * **Example**:
   * ```
   * 3178497
   * ```
   */
  labelId: string;

  /**
   * Body Format
   * The content format types to be returned in the body field of the response
   *
   */
  bodyFormat?: 'storage' | 'atlas_doc_format';

  /**
   * Additional Fields
   *
   * **Example**:
   * ```
   * {
   *    "sort":"id"
   *}
   * ```
   */
  additionalFields?: string;

  /**
   * Limit
   * Maximum number of records to return in the result. Defaults to no limit.
   *
   * **Example**:
   * ```
   * No limit
   * ```
   */
  limit?: string;
};

/**
 * Search Pages intent type
 */
type ConfluenceSearchPages = {
  /**
   * Limit
   * Maximum number of records to return in the result. Defaults to no limit.
   *
   * **Example**:
   * ```
   * No limit
   * ```
   */
  limit?: string;

  /**
   * Filter Search
   *
   */
  filterFormula?: ConditionalInput;
};

/**
 * Delete Page intent type
 */
type ConfluenceDeletePage = {
  /**
   * Page ID
   * The ID of the page to be deleted
   *
   * **Example**:
   * ```
   * 3145729
   * ```
   */
  pageId: string;
};

/**
 * Get Space By ID intent type
 */
type ConfluenceGetSpaceById = {
  /**
   * Space ID
   * ID of the space
   *
   * **Example**:
   * ```
   * 65539
   * ```
   */
  spaceId: string;

  /**
   * Description Format
   * The content format type to be returned in the description field of the response
   *
   */
  descriptionFormat?: 'plain' | 'view';
};

/**
 * Search Spaces intent type
 */
type ConfluenceSearchSpaces = {
  /**
   * Limit
   * Maximum number of records to return in the result. Defaults to no limit.
   *
   * **Example**:
   * ```
   * No limit
   * ```
   */
  limit?: string;

  /**
   * Filter Search
   *
   */
  filterFormula?: ConditionalInput;
};

/**
 * Get Blog Posts intent type
 */
type ConfluenceGetBlogPosts = {
  /**
   * Limit
   * Maximum number of blog posts per result to return
   *
   * **Example**:
   * ```
   * No limit
   * ```
   */
  limit?: string;

  /**
   * Filter Search
   *
   */
  filterFormula?: ConditionalInput;
};

export type IntentToInputOutput = {
  /**
   * CONFLUENCE_CREATE_PAGE
   */
  CONFLUENCE_CREATE_PAGE: [ConfluenceCreatePage, any];

  /**
   * CONFLUENCE_UPDATE_PAGE
   */
  CONFLUENCE_UPDATE_PAGE: [ConfluenceUpdatePage, any];

  /**
   * CONFLUENCE_GET_PAGE_BY_ID
   */
  CONFLUENCE_GET_PAGE_BY_ID: [ConfluenceGetPageById, any];

  /**
   * CONFLUENCE_GET_PAGES_IN_SPACE
   */
  CONFLUENCE_GET_PAGES_IN_SPACE: [ConfluenceGetPagesInSpace, any];

  /**
   * CONFLUENCE_GET_PAGES_BY_LABEL
   */
  CONFLUENCE_GET_PAGES_BY_LABEL: [ConfluenceGetPagesByLabel, any];

  /**
   * CONFLUENCE_SEARCH_PAGES
   */
  CONFLUENCE_SEARCH_PAGES: [ConfluenceSearchPages, any];

  /**
   * CONFLUENCE_DELETE_PAGE
   */
  CONFLUENCE_DELETE_PAGE: [ConfluenceDeletePage, any];

  /**
   * CONFLUENCE_GET_SPACE_BY_ID
   */
  CONFLUENCE_GET_SPACE_BY_ID: [ConfluenceGetSpaceById, any];

  /**
   * CONFLUENCE_SEARCH_SPACES
   */
  CONFLUENCE_SEARCH_SPACES: [ConfluenceSearchSpaces, any];

  /**
   * CONFLUENCE_GET_BLOG_POSTS
   */
  CONFLUENCE_GET_BLOG_POSTS: [ConfluenceGetBlogPosts, any];
};
