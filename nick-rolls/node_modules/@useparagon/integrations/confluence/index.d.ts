import { ActionStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';

type IConfluenceIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type:
        | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'boolean'
        | 'password'
        | 'space';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
  space: string;
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IConfluenceIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for confluence
 */
export type IConfluenceIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Page
     * method for CONFLUENCE_CREATE_PAGE
     */
    createPage: (
      inputs: IntentToInputOutput['CONFLUENCE_CREATE_PAGE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CONFLUENCE_CREATE_PAGE'][0],
      IntentToInputOutput['CONFLUENCE_CREATE_PAGE'][1]
    >;

    /**
     * Update Page
     * method for CONFLUENCE_UPDATE_PAGE
     */
    updatePage: (
      inputs: IntentToInputOutput['CONFLUENCE_UPDATE_PAGE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CONFLUENCE_UPDATE_PAGE'][0],
      IntentToInputOutput['CONFLUENCE_UPDATE_PAGE'][1]
    >;

    /**
     * Get Page by ID
     * method for CONFLUENCE_GET_PAGE_BY_ID
     */
    getPageById: (
      inputs: IntentToInputOutput['CONFLUENCE_GET_PAGE_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CONFLUENCE_GET_PAGE_BY_ID'][0],
      IntentToInputOutput['CONFLUENCE_GET_PAGE_BY_ID'][1]
    >;

    /**
     * Get Pages in Space
     * method for CONFLUENCE_GET_PAGES_IN_SPACE
     */
    getPagesInSpace: (
      inputs: IntentToInputOutput['CONFLUENCE_GET_PAGES_IN_SPACE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CONFLUENCE_GET_PAGES_IN_SPACE'][0],
      IntentToInputOutput['CONFLUENCE_GET_PAGES_IN_SPACE'][1]
    >;

    /**
     * Get Pages by Label
     * method for CONFLUENCE_GET_PAGES_BY_LABEL
     */
    getPagesByLabel: (
      inputs: IntentToInputOutput['CONFLUENCE_GET_PAGES_BY_LABEL'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CONFLUENCE_GET_PAGES_BY_LABEL'][0],
      IntentToInputOutput['CONFLUENCE_GET_PAGES_BY_LABEL'][1]
    >;

    /**
     * Search Pages
     * method for CONFLUENCE_SEARCH_PAGES
     */
    searchPages: (
      inputs: IntentToInputOutput['CONFLUENCE_SEARCH_PAGES'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CONFLUENCE_SEARCH_PAGES'][0],
      IntentToInputOutput['CONFLUENCE_SEARCH_PAGES'][1]
    >;

    /**
     * Delete Page
     * method for CONFLUENCE_DELETE_PAGE
     */
    deletePage: (
      inputs: IntentToInputOutput['CONFLUENCE_DELETE_PAGE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CONFLUENCE_DELETE_PAGE'][0],
      IntentToInputOutput['CONFLUENCE_DELETE_PAGE'][1]
    >;

    /**
     * Get Space By ID
     * method for CONFLUENCE_GET_SPACE_BY_ID
     */
    getSpaceById: (
      inputs: IntentToInputOutput['CONFLUENCE_GET_SPACE_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CONFLUENCE_GET_SPACE_BY_ID'][0],
      IntentToInputOutput['CONFLUENCE_GET_SPACE_BY_ID'][1]
    >;

    /**
     * Search Spaces
     * method for CONFLUENCE_SEARCH_SPACES
     */
    searchSpaces: (
      inputs: IntentToInputOutput['CONFLUENCE_SEARCH_SPACES'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CONFLUENCE_SEARCH_SPACES'][0],
      IntentToInputOutput['CONFLUENCE_SEARCH_SPACES'][1]
    >;

    /**
     * Get Blog Posts
     * method for CONFLUENCE_GET_BLOG_POSTS
     */
    getBlogPosts: (
      inputs: IntentToInputOutput['CONFLUENCE_GET_BLOG_POSTS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['CONFLUENCE_GET_BLOG_POSTS'][0],
      IntentToInputOutput['CONFLUENCE_GET_BLOG_POSTS'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {};
};
