const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for confluence
 */
exports.inputs = [
  {
    id: 'spaceCacheKey',
    title: 'Space',
    type: 'DYNAMIC_DATA_SOURCE',
  },
];

/**
 * triggers for confluence
 */
exports.triggers = [];

/**
 * intents for confluence
 */
exports.intents = [
  {
    title: 'Create Page',
    name: 'CONFLUENCE_CREATE_PAGE',
    output: [],
    inputs: [
      {
        id: 'spaceId',
        title: 'Space ID',
        type: 'TEXTAREA',
        subtitle: 'ID of the space',
        placeholder: '65539',
        required: true,
      },
      {
        id: 'status',
        title: 'Status',
        type: 'ENUM',
        subtitle: 'The status of the page',
        values: ['current', 'draft'],
      },
      {
        id: 'title',
        title: 'Title',
        type: 'TEXTAREA',
        subtitle: 'Title of the page, required if page status is not draft',
        placeholder: 'Page Title',
      },
      {
        id: 'parentId',
        title: 'Parent ID',
        type: 'TEXTAREA',
        subtitle: 'The parent content ID of the page',
        placeholder: '131154',
      },
      {
        id: 'additionalBody',
        title: 'Body',
        type: 'CODE',
        placeholder:
          '{\n  "storage": {\n    "representation": "storage",\n    "value": "<string>"\n  },\n  "atlas_doc_format": {\n    "representation": "storage",\n    "value": "<string>"\n  },\n  "wiki": {\n    "representation": "storage",\n    "value": "<string>"\n  }\n}',
      },
    ],
  },
  {
    title: 'Update Page',
    name: 'CONFLUENCE_UPDATE_PAGE',
    output: [],
    inputs: [
      {
        id: 'pageId',
        title: 'Page ID',
        type: 'TEXTAREA',
        subtitle: 'ID of the page',
        placeholder: '3145729',
        required: true,
      },
      {
        id: 'spaceId',
        title: 'Space ID',
        type: 'TEXTAREA',
        subtitle: 'ID of the space',
        placeholder: '65539',
        required: true,
      },
      {
        id: 'status',
        title: 'Status',
        type: 'ENUM',
        subtitle: 'The current status of the page',
        required: true,
        values: ['current', 'draft', 'archived', 'deleted'],
      },
      {
        id: 'title',
        title: 'Title',
        type: 'TEXTAREA',
        subtitle: 'Title of the page, required if page status is not draft',
        placeholder: 'Page Title',
        required: true,
      },
      {
        id: 'version',
        title: 'Version',
        type: 'CODE',
        subtitle: 'Version number and message to be stored with updated page',
        placeholder: '{\n  "number":47,\n  "message":"<string>"\n}',
        required: true,
      },
      {
        id: 'additionalBody',
        title: 'Body',
        type: 'CODE',
        placeholder:
          '{\n  "storage": {\n    "representation": "storage",\n    "value": "<string>"\n  },\n  "atlas_doc_format": {\n    "representation": "storage",\n    "value": "<string>"\n  },\n  "wiki": {\n    "representation": "storage",\n    "value": "<string>"\n  }\n}',
        required: true,
      },
    ],
  },
  {
    title: 'Get Page by ID',
    name: 'CONFLUENCE_GET_PAGE_BY_ID',
    output: [],
    inputs: [
      {
        id: 'pageId',
        title: 'Page ID',
        type: 'TEXTAREA',
        subtitle: 'ID of the page',
        placeholder: '3145729',
        required: true,
      },
      {
        id: 'bodyFormat',
        title: 'Body Format',
        type: 'ENUM',
        subtitle:
          'The content format types to be returned in the body field of the response',
        values: ['storage', 'atlas_doc_format'],
      },
      {
        id: 'getDraft',
        title: 'Get Draft',
        type: 'BOOLEAN_INPUT',
        subtitle: 'Retrieve the draft version of this page. Defaults to false',
      },
      {
        id: 'versionNumber',
        title: 'Version Number',
        type: 'TEXTAREA',
        subtitle:
          'Allows you to retrieve a previously published version. Specify the previous version`s number to retrieve its details',
        placeholder: '2',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder: '{\n  "include-labels": true\n}',
      },
    ],
  },
  {
    title: 'Get Pages in Space',
    name: 'CONFLUENCE_GET_PAGES_IN_SPACE',
    output: [],
    inputs: [
      {
        id: 'spaceId',
        title: 'Space ID',
        type: 'TEXTAREA',
        subtitle: 'ID of the space',
        placeholder: '65539',
        required: true,
      },
      {
        id: 'status',
        title: 'Status',
        type: 'ENUM',
        subtitle: 'The status of the page',
        values: ['current', 'archived', 'trashed'],
      },
      {
        id: 'bodyFormat',
        title: 'Body Format',
        type: 'ENUM',
        subtitle:
          'The content format types to be returned in the body field of the response',
        values: ['storage', 'atlas_doc_format'],
      },
      {
        id: 'limit',
        title: 'Limit',
        type: 'TEXTAREA',
        subtitle:
          'Maximum number of records to return in the result. Defaults to no limit.',
        placeholder: 'No limit',
      },
    ],
  },
  {
    title: 'Get Pages by Label',
    name: 'CONFLUENCE_GET_PAGES_BY_LABEL',
    output: [],
    inputs: [
      {
        id: 'labelId',
        title: 'Label ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the label for which pages should be returned',
        placeholder: '3178497',
        required: true,
      },
      {
        id: 'bodyFormat',
        title: 'Body Format',
        type: 'ENUM',
        subtitle:
          'The content format types to be returned in the body field of the response',
        values: ['storage', 'atlas_doc_format'],
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder: '{\n    "sort":"id"\n}',
      },
      {
        id: 'limit',
        title: 'Limit',
        type: 'TEXTAREA',
        subtitle:
          'Maximum number of records to return in the result. Defaults to no limit.',
        placeholder: 'No limit',
      },
    ],
  },
  {
    title: 'Search Pages',
    name: 'CONFLUENCE_SEARCH_PAGES',
    output: [],
    inputs: [
      {
        id: 'limit',
        title: 'Limit',
        type: 'TEXTAREA',
        subtitle:
          'Maximum number of records to return in the result. Defaults to no limit.',
        placeholder: 'No limit',
      },
      {
        id: 'filterFormula',
        title: 'Filter Search',
        type: 'CONDITIONAL',
        supportedKeys: ['id', 'status', 'body-format'],
        supportedOperators: ['$stringExactlyMatches'],
        disableOrCondition: true,
      },
    ],
  },
  {
    title: 'Delete Page',
    name: 'CONFLUENCE_DELETE_PAGE',
    output: [],
    inputs: [
      {
        id: 'pageId',
        title: 'Page ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the page to be deleted',
        placeholder: '3145729',
        required: true,
      },
    ],
  },
  {
    title: 'Get Space By ID',
    name: 'CONFLUENCE_GET_SPACE_BY_ID',
    output: [],
    inputs: [
      {
        id: 'spaceId',
        title: 'Space ID',
        type: 'TEXTAREA',
        subtitle: 'ID of the space',
        placeholder: '65539',
        required: true,
      },
      {
        id: 'descriptionFormat',
        title: 'Description Format',
        type: 'ENUM',
        subtitle:
          'The content format type to be returned in the description field of the response',
        values: ['plain', 'view'],
      },
    ],
  },
  {
    title: 'Search Spaces',
    name: 'CONFLUENCE_SEARCH_SPACES',
    output: [],
    inputs: [
      {
        id: 'limit',
        title: 'Limit',
        type: 'TEXTAREA',
        subtitle:
          'Maximum number of records to return in the result. Defaults to no limit.',
        placeholder: 'No limit',
      },
      {
        id: 'filterFormula',
        title: 'Filter Search',
        type: 'CONDITIONAL',
        supportedKeys: [
          'ids',
          'keys',
          'type',
          'status',
          'labels',
          'sort',
          'description-format',
        ],
        supportedOperators: ['$stringExactlyMatches'],
        disableOrCondition: true,
      },
    ],
  },
  {
    title: 'Get Blog Posts',
    name: 'CONFLUENCE_GET_BLOG_POSTS',
    output: [],
    inputs: [
      {
        id: 'limit',
        title: 'Limit',
        type: 'TEXTAREA',
        subtitle: 'Maximum number of blog posts per result to return',
        placeholder: 'No limit',
      },
      {
        id: 'filterFormula',
        title: 'Filter Search',
        type: 'CONDITIONAL',
        supportedKeys: [
          'id',
          'space-id',
          'sort',
          'status',
          'title',
          'body-format',
          'cursor',
        ],
        supportedOperators: ['$stringExactlyMatches'],
        disableOrCondition: true,
      },
    ],
  },
];

/**
 * integration class for confluence
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'confluence',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Page
     * method for CONFLUENCE_CREATE_PAGE
     */
    createPage: (inputs, options) => {
      return new ActionStep({
        intent: 'CONFLUENCE_CREATE_PAGE',
        actionType: 'confluence',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Page
     * method for CONFLUENCE_UPDATE_PAGE
     */
    updatePage: (inputs, options) => {
      return new ActionStep({
        intent: 'CONFLUENCE_UPDATE_PAGE',
        actionType: 'confluence',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Page by ID
     * method for CONFLUENCE_GET_PAGE_BY_ID
     */
    getPageById: (inputs, options) => {
      return new ActionStep({
        intent: 'CONFLUENCE_GET_PAGE_BY_ID',
        actionType: 'confluence',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Pages in Space
     * method for CONFLUENCE_GET_PAGES_IN_SPACE
     */
    getPagesInSpace: (inputs, options) => {
      return new ActionStep({
        intent: 'CONFLUENCE_GET_PAGES_IN_SPACE',
        actionType: 'confluence',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Pages by Label
     * method for CONFLUENCE_GET_PAGES_BY_LABEL
     */
    getPagesByLabel: (inputs, options) => {
      return new ActionStep({
        intent: 'CONFLUENCE_GET_PAGES_BY_LABEL',
        actionType: 'confluence',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Pages
     * method for CONFLUENCE_SEARCH_PAGES
     */
    searchPages: (inputs, options) => {
      return new ActionStep({
        intent: 'CONFLUENCE_SEARCH_PAGES',
        actionType: 'confluence',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Page
     * method for CONFLUENCE_DELETE_PAGE
     */
    deletePage: (inputs, options) => {
      return new ActionStep({
        intent: 'CONFLUENCE_DELETE_PAGE',
        actionType: 'confluence',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Space By ID
     * method for CONFLUENCE_GET_SPACE_BY_ID
     */
    getSpaceById: (inputs, options) => {
      return new ActionStep({
        intent: 'CONFLUENCE_GET_SPACE_BY_ID',
        actionType: 'confluence',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Spaces
     * method for CONFLUENCE_SEARCH_SPACES
     */
    searchSpaces: (inputs, options) => {
      return new ActionStep({
        intent: 'CONFLUENCE_SEARCH_SPACES',
        actionType: 'confluence',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Blog Posts
     * method for CONFLUENCE_GET_BLOG_POSTS
     */
    getBlogPosts: (inputs, options) => {
      return new ActionStep({
        intent: 'CONFLUENCE_GET_BLOG_POSTS',
        actionType: 'confluence',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {},
};
