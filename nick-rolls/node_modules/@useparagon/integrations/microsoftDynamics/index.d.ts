import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  UserDefinedFieldMappingOptions,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type IMicrosoftDynamicsIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type:
        | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'boolean'
        | 'password'
        | 'custom_entity_name_(legacy)'
        | 'custom_entity_set_name'
        | 'potential_customer_id'
        | 'owner_(user_or_team)'
        | 'account'
        | 'contact'
        | 'lead'
        | 'opportunity'
        | 'process_stage'
        | 'transaction_currency';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | ({
      type: 'field_mapping';
    } & UserDefinedFieldMappingOptions)
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;

  'custom_entity_name_(legacy)': string;
  custom_entity_set_name: string;
  potential_customer_id: string;
  'owner_(user_or_team)': string;
  account: string;
  contact: string;
  lead: string;
  opportunity: string;
  process_stage: string;
  transaction_currency: string;
  field_mapping: {
    'custom_entity_name_(legacy)': string;
    custom_object_field: Record<string, any>;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IMicrosoftDynamicsIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for microsoftDynamics
 */
export type IMicrosoftDynamicsIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Create record
     * method for MICROSOFT_DYNAMICS_CREATE_RECORD
     */
    microsoftDynamicsCreateRecord: (
      inputs: IntentToInputOutput['MICROSOFT_DYNAMICS_CREATE_RECORD'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['MICROSOFT_DYNAMICS_CREATE_RECORD'][0],
      IntentToInputOutput['MICROSOFT_DYNAMICS_CREATE_RECORD'][1]
    >;

    /**
     * Update record
     * method for MICROSOFT_DYNAMICS_UPDATE_RECORD
     */
    microsoftDynamicsUpdateRecord: (
      inputs: IntentToInputOutput['MICROSOFT_DYNAMICS_UPDATE_RECORD'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['MICROSOFT_DYNAMICS_UPDATE_RECORD'][0],
      IntentToInputOutput['MICROSOFT_DYNAMICS_UPDATE_RECORD'][1]
    >;

    /**
     * Get record by ID
     * method for MICROSOFT_DYNAMICS_GET_RECORD_BY_ID
     */
    microsoftDynamicsGetRecordById: (
      inputs: IntentToInputOutput['MICROSOFT_DYNAMICS_GET_RECORD_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['MICROSOFT_DYNAMICS_GET_RECORD_BY_ID'][0],
      IntentToInputOutput['MICROSOFT_DYNAMICS_GET_RECORD_BY_ID'][1]
    >;

    /**
     * Search records
     * method for MICROSOFT_DYNAMICS_SEARCH_RECORDS
     */
    microsoftDynamicsSearchRecords: (
      inputs: IntentToInputOutput['MICROSOFT_DYNAMICS_SEARCH_RECORDS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['MICROSOFT_DYNAMICS_SEARCH_RECORDS'][0],
      IntentToInputOutput['MICROSOFT_DYNAMICS_SEARCH_RECORDS'][1]
    >;

    /**
     * Delete Record by ID
     * method for MICROSOFT_DYNAMICS_DELETE_RECORD
     */
    microsoftDynamicsDeleteRecord: (
      inputs: IntentToInputOutput['MICROSOFT_DYNAMICS_DELETE_RECORD'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['MICROSOFT_DYNAMICS_DELETE_RECORD'][0],
      IntentToInputOutput['MICROSOFT_DYNAMICS_DELETE_RECORD'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Record
     * method for MICROSOFT_DYNAMICS_TRIGGER_RECORD_CREATED
     */
    microsoftDynamicsTriggerRecordCreated: (
      inputs: TriggerIntentToInputOutput['MICROSOFT_DYNAMICS_TRIGGER_RECORD_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['MICROSOFT_DYNAMICS_TRIGGER_RECORD_CREATED'][0],
      TriggerIntentToInputOutput['MICROSOFT_DYNAMICS_TRIGGER_RECORD_CREATED'][1]
    >;

    /**
     * Record Updated
     * method for MICROSOFT_DYNAMICS_TRIGGER_RECORD_UPDATED
     */
    microsoftDynamicsTriggerRecordUpdated: (
      inputs: TriggerIntentToInputOutput['MICROSOFT_DYNAMICS_TRIGGER_RECORD_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['MICROSOFT_DYNAMICS_TRIGGER_RECORD_UPDATED'][0],
      TriggerIntentToInputOutput['MICROSOFT_DYNAMICS_TRIGGER_RECORD_UPDATED'][1]
    >;
  };
};
