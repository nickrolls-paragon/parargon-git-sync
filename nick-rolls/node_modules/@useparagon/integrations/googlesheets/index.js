const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for googlesheets
 */
exports.inputs = [
  {
    id: 'spreadSheets',
    title: 'Spreadsheet',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'columnMapper',
    title: 'Column Mapping',
    type: 'COMBO_INPUT_DATA_SOURCE',
    mainInputSource: {
      id: 'spreadSheets',
      title: 'Spreadsheet',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    dependentInputSource: {
      id: 'worksheetId',
      title: 'Worksheet',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    fieldSource: {
      id: 'cachedColumns',
      title: 'Column',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
];

/**
 * triggers for googlesheets
 */
exports.triggers = [
  {
    title: 'File Created',
    name: 'GOOGLE_SHEETS_TRIGGER_FILE_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'File Updated',
    name: 'GOOGLE_SHEETS_TRIGGER_FILE_UPDATED',
    output: [],
    inputs: [],
  },
];

/**
 * intents for googlesheets
 */
exports.intents = [
  {
    title: 'Get rows from spreadsheet',
    name: 'GOOGLE_SHEETS_GET_ROW',
    output: [],
    inputs: [
      {
        id: 'spreadsheetId',
        title: 'Spreadsheet',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a spreadsheet. Defaults to using the first worksheet in the selected spreadsheet.',
        placeholder: '{{settings.spreadsheet}}',
        required: true,
      },
      {
        id: 'limit',
        title: 'Limit rows',
        type: 'TEXTAREA',
        subtitle: 'Limit the maximum number of rows to return.',
      },
    ],
  },
  {
    title: 'Create row in spreadsheet',
    name: 'GOOGLE_SHEETS_CREATE_ROW',
    output: [],
    inputs: [
      {
        id: 'spreadsheetId',
        title: 'Spreadsheet',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a spreadsheet. Defaults to using the first worksheet in the selected spreadsheet.',
        placeholder: '{{settings.spreadsheet}}',
        required: true,
      },
      {
        id: 'worksheet',
        title: 'Worksheet',
        type: 'TEXTAREA',
        subtitle: 'Your worksheet must have column headers.',
        placeholder: '{{settings.worksheet}}',
        required: true,
      },
      {
        id: 'additionalFields',
        title: 'Fields',
        type: 'TEXTAREA',
        subtitle:
          'Include fields to create this row with, as an object with keys of Column Names. Use Connect Portal Workflow Settings to allow users to select a Column Mapping',
        placeholder:
          '{\n    columnName1: "columnValue1",\n    columnName2: "columnValue2",\n    columnName3: "columnValue3",\n    columnName4: "columnValue4",\n  }',
        required: true,
      },
    ],
  },
  {
    title: 'Update row in spreadsheet',
    name: 'GOOGLE_SHEETS_UPDATE_ROW',
    output: [],
    inputs: [
      {
        id: 'spreadsheetId',
        title: 'Spreadsheet',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a spreadsheet. Defaults to using the first worksheet in the selected spreadsheet.',
        placeholder: '{{settings.spreadsheet}}',
        required: true,
      },
      {
        id: 'worksheet',
        title: 'Worksheet',
        type: 'TEXTAREA',
        subtitle: 'Your worksheet must have column headers.',
        placeholder: '{{settings.worksheet}}',
        required: true,
      },
      {
        id: 'filterFormula',
        title: 'Filter records',
        type: 'CONDITIONAL',
        subtitle:
          'Specify which records should get updated using the filters below. Use Connect Portal Workflow Settings to allow users to select a column.',
        placeholder: '{{settings.column}}',
        supportedOperators: [
          '$stringContains',
          '$stringDoesNotContain',
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$stringStartsWith',
          '$stringDoesNotStartWith',
          '$stringEndsWith',
          '$stringDoesNotEndWith',
          '$numberGreaterThan',
          '$numberLessThan',
          '$numberEquals',
          '$numberDoesNotEqual',
          '$dateTimeAfter',
          '$dateTimeBefore',
          '$dateTimeEquals',
          '$booleanTrue',
          '$booleanFalse',
          '$exists',
          '$doesNotExist',
        ],
      },
      {
        id: 'additionalFields',
        title: 'Fields',
        type: 'TEXTAREA',
        subtitle:
          'Include fields to update, as an object with keys of Column Names. Use Connect Portal Workflow Settings to allow users to select a Column Mapping.',
        placeholder:
          '{\n    columnName1: "columnValue1",\n    columnName2: "columnValue2",\n    columnName3: "columnValue3",\n    columnName4: "columnValue4",\n  }',
        required: true,
      },
    ],
  },
];

/**
 * integration class for googlesheets
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'googlesheets',

  /**
   * action step methods
   */
  actions: {
    /**
     * Get rows from spreadsheet
     * method for GOOGLE_SHEETS_GET_ROW
     */
    googleSheetsGetRow: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_SHEETS_GET_ROW',
        actionType: 'googlesheets',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create row in spreadsheet
     * method for GOOGLE_SHEETS_CREATE_ROW
     */
    googleSheetsCreateRow: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_SHEETS_CREATE_ROW',
        actionType: 'googlesheets',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update row in spreadsheet
     * method for GOOGLE_SHEETS_UPDATE_ROW
     */
    googleSheetsUpdateRow: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_SHEETS_UPDATE_ROW',
        actionType: 'googlesheets',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * File Created
     * method for GOOGLE_SHEETS_TRIGGER_FILE_CREATED
     */
    googleSheetsTriggerFileCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_SHEETS_TRIGGER_FILE_CREATED',
        actionType: 'googlesheets',
        parameters: inputs,
      });
    },
    /**
     * File Updated
     * method for GOOGLE_SHEETS_TRIGGER_FILE_UPDATED
     */
    googleSheetsTriggerFileUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_SHEETS_TRIGGER_FILE_UPDATED',
        actionType: 'googlesheets',
        parameters: inputs,
      });
    },
  },
};
