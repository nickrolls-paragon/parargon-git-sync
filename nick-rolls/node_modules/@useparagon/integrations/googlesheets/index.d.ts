import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
  UserDefinedComboInputOptions,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type IGooglesheetsIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type:
        | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'boolean'
        | 'password'
        | 'spreadsheet';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | ({
      type: 'column_mapping';
    } & UserDefinedComboInputOptions)
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
  spreadsheet: string;
  column_mapping: {
    spreadsheet: string;
    worksheet: string;
    column: Record<string, any>;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IGooglesheetsIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for googlesheets
 */
export type IGooglesheetsIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Get rows from spreadsheet
     * method for GOOGLE_SHEETS_GET_ROW
     */
    googleSheetsGetRow: (
      inputs: IntentToInputOutput['GOOGLE_SHEETS_GET_ROW'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GOOGLE_SHEETS_GET_ROW'][0],
      IntentToInputOutput['GOOGLE_SHEETS_GET_ROW'][1]
    >;

    /**
     * Create row in spreadsheet
     * method for GOOGLE_SHEETS_CREATE_ROW
     */
    googleSheetsCreateRow: (
      inputs: IntentToInputOutput['GOOGLE_SHEETS_CREATE_ROW'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GOOGLE_SHEETS_CREATE_ROW'][0],
      IntentToInputOutput['GOOGLE_SHEETS_CREATE_ROW'][1]
    >;

    /**
     * Update row in spreadsheet
     * method for GOOGLE_SHEETS_UPDATE_ROW
     */
    googleSheetsUpdateRow: (
      inputs: IntentToInputOutput['GOOGLE_SHEETS_UPDATE_ROW'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GOOGLE_SHEETS_UPDATE_ROW'][0],
      IntentToInputOutput['GOOGLE_SHEETS_UPDATE_ROW'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * File Created
     * method for GOOGLE_SHEETS_TRIGGER_FILE_CREATED
     */
    googleSheetsTriggerFileCreated: (
      inputs: TriggerIntentToInputOutput['GOOGLE_SHEETS_TRIGGER_FILE_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GOOGLE_SHEETS_TRIGGER_FILE_CREATED'][0],
      TriggerIntentToInputOutput['GOOGLE_SHEETS_TRIGGER_FILE_CREATED'][1]
    >;

    /**
     * File Updated
     * method for GOOGLE_SHEETS_TRIGGER_FILE_UPDATED
     */
    googleSheetsTriggerFileUpdated: (
      inputs: TriggerIntentToInputOutput['GOOGLE_SHEETS_TRIGGER_FILE_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GOOGLE_SHEETS_TRIGGER_FILE_UPDATED'][0],
      TriggerIntentToInputOutput['GOOGLE_SHEETS_TRIGGER_FILE_UPDATED'][1]
    >;
  };
};
