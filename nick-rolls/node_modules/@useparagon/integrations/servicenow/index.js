const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for servicenow
 */
exports.inputs = [
  {
    id: 'getStatusForIncidentBoard',
    title: 'Incident Status',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'getStatusForTaskBoard',
    title: 'Task Status',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'mapServiceNowFields',
    title: 'Field Mapping',
    type: 'FIELD_MAPPER_DATA_SOURCE',
    fieldSource: {
      id: 'getFields',
      title: 'Fields',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    recordSource: {
      id: 'recordType',
      title: 'Record Type',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
];

/**
 * triggers for servicenow
 */
exports.triggers = [];

/**
 * intents for servicenow
 */
exports.intents = [
  {
    title: 'Create Ticket',
    name: 'SERVICENOW_CREATE_TICKET',
    output: [],
    inputs: [
      {
        id: 'ticketType',
        title: 'Ticket Type',
        type: 'EDITABLE_ENUM',
        subtitle: 'Specify the type of the ticket to create.',
        required: true,
        defaultValue: 'incident',
        values: ['incident', 'case'],
      },
      {
        id: 'description',
        title: 'Full Description',
        type: 'TEXT',
        subtitle: 'Specify a long-form description of the issue.',
      },
      {
        id: 'severity',
        title: 'Severity',
        type: 'EDITABLE_ENUM',
        subtitle:
          'Specify the severity of the issue described by the trouble ticket. Maps to the Priority field.',
        values: [1, 2, 3, 4, 5],
      },
      {
        id: 'name',
        title: 'Name',
        type: 'TEXT',
        subtitle:
          'Specify the name of the ticket, typically a short description of the issue. Maps to the Short description field.',
        placeholder: 'Bug report from Customer A',
      },
      {
        id: 'shortDescription',
        title: 'Short Description',
        type: 'TEXT',
        subtitle: 'Specify a one-line description of the issue.',
      },
      {
        id: 'status',
        title: 'Status',
        type: 'TEXT',
        subtitle:
          'Specify the current status of the ticket. Maps to the State field. You may provide the choice label or value.',
        placeholder: 'New',
      },
      {
        id: 'relatedPartyId',
        title: 'Related party ID',
        type: 'TEXT',
        subtitle:
          'Specify the sys_id of the related party associated with this ticket.',
        placeholder: '9d385017c611228701d22104cc95c371',
      },
      {
        id: 'referredType',
        title: 'Related Party Type',
        type: 'EDITABLE_ENUM',
        subtitle:
          'Specify the type of the related party associated with this ticket.',
        values: ['customer', 'customer_contact'],
      },
      {
        id: 'channelName',
        title: 'Channel Name',
        type: 'TEXT',
        subtitle: 'Specify the name of the contact method.',
        placeholder: 'Virtual Agent',
      },
      {
        id: 'note',
        title: 'Notes',
        type: 'CODE',
        placeholder:
          '\n[\n  {\n    "text": "Note content",\n    "@type": "work_notes"\n  }\n]',
      },
    ],
  },
  {
    title: 'Update Ticket',
    name: 'SERVICENOW_UPDATE_TICKET',
    output: [],
    inputs: [
      {
        id: 'ticketId',
        title: 'Ticket ID',
        type: 'TEXT',
        subtitle: 'Specify the sys_id ID of the ticket to fetch.',
        placeholder: '9d385017c611228701d22104cc95c371',
        required: true,
      },
      {
        id: 'ticketType',
        title: 'Ticket Type',
        type: 'EDITABLE_ENUM',
        subtitle: 'Specify the type of the ticket to create.',
        required: true,
        defaultValue: 'incident',
        values: ['incident', 'case'],
      },
      {
        id: 'description',
        title: 'Full Description',
        type: 'TEXT',
        subtitle: 'Specify a long-form description of the issue.',
      },
      {
        id: 'severity',
        title: 'Severity',
        type: 'EDITABLE_ENUM',
        subtitle:
          'Specify the severity of the issue described by the trouble ticket. Maps to the Priority field.',
        values: [1, 2, 3, 4, 5],
      },
      {
        id: 'name',
        title: 'Name',
        type: 'TEXT',
        subtitle:
          'Specify the name of the ticket, typically a short description of the issue. Maps to the Short description field.',
        placeholder: 'Bug report from Customer A',
      },
      {
        id: 'shortDescription',
        title: 'Short Description',
        type: 'TEXT',
        subtitle: 'Specify a one-line description of the issue.',
      },
      {
        id: 'status',
        title: 'Status',
        type: 'TEXT',
        subtitle:
          'Specify the current status of the ticket. Maps to the State field. You may provide the choice label or value.',
        placeholder: 'New',
      },
      {
        id: 'relatedPartyId',
        title: 'Related party ID',
        type: 'TEXT',
        subtitle:
          'Specify the sys_id of the related party associated with this ticket.',
        placeholder: '9d385017c611228701d22104cc95c371',
      },
      {
        id: 'referredType',
        title: 'Related Party Type',
        type: 'EDITABLE_ENUM',
        subtitle:
          'Specify the type of the related party associated with this ticket.',
        values: ['customer', 'customer_contact'],
      },
      {
        id: 'channelName',
        title: 'Channel Name',
        type: 'TEXT',
        subtitle: 'Specify the name of the contact method.',
        placeholder: 'Virtual Agent',
      },
      {
        id: 'note',
        title: 'Notes',
        type: 'CODE',
        placeholder:
          '\n[\n  {\n    "text": "Note content",\n    "@type": "work_notes"\n  }\n]',
      },
    ],
  },
  {
    title: 'Get Tickets',
    name: 'SERVICENOW_GET_TICKETS',
    output: [],
    inputs: [
      {
        id: 'ticketType',
        title: 'Ticket Type',
        type: 'EDITABLE_ENUM',
        subtitle: 'Specify the type of the ticket to get',
        required: true,
        defaultValue: 'incident',
        values: ['incident', 'ticket'],
      },
    ],
  },
  {
    title: 'Get Ticket by ID',
    name: 'SERVICENOW_GET_TICKET_BY_ID',
    output: [],
    inputs: [
      {
        id: 'ticketId',
        title: 'Ticket ID',
        type: 'TEXT',
        subtitle: 'Specify the sys_id ID of the ticket to fetch.',
        placeholder: '9d385017c611228701d22104cc95c371',
        required: true,
      },
      {
        id: 'ticketType',
        title: 'Ticket Type',
        type: 'EDITABLE_ENUM',
        subtitle: 'Specify the type of the ticket to create.',
        required: true,
        defaultValue: 'incident',
        values: ['incident', 'case'],
      },
    ],
  },
];

/**
 * integration class for servicenow
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'servicenow',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Ticket
     * method for SERVICENOW_CREATE_TICKET
     */
    createTicket: (inputs, options) => {
      return new ActionStep({
        intent: 'SERVICENOW_CREATE_TICKET',
        actionType: 'servicenow',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Ticket
     * method for SERVICENOW_UPDATE_TICKET
     */
    updateTicket: (inputs, options) => {
      return new ActionStep({
        intent: 'SERVICENOW_UPDATE_TICKET',
        actionType: 'servicenow',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Tickets
     * method for SERVICENOW_GET_TICKETS
     */
    getTickets: (inputs, options) => {
      return new ActionStep({
        intent: 'SERVICENOW_GET_TICKETS',
        actionType: 'servicenow',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Ticket by ID
     * method for SERVICENOW_GET_TICKET_BY_ID
     */
    getTicketById: (inputs, options) => {
      return new ActionStep({
        intent: 'SERVICENOW_GET_TICKET_BY_ID',
        actionType: 'servicenow',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {},
};
