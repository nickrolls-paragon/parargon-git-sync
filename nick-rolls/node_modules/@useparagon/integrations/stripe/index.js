const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for stripe
 */
exports.inputs = [
  {
    id: 'getPlans',
    title: 'Plan',
    type: 'DYNAMIC_DATA_SOURCE',
  },
];

/**
 * triggers for stripe
 */
exports.triggers = [];

/**
 * intents for stripe
 */
exports.intents = [
  {
    title: 'Create Customer',
    name: 'STRIPE_CREATE_CUSTOMER',
    output: [],
    inputs: [
      {
        id: 'emailCreateCustomer',
        title: 'Email address',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
      },
      {
        id: 'description',
        title: 'Description',
        type: 'TEXTAREA',
      },
      {
        id: 'metadataCreateCustomer',
        title: 'Metadata',
        type: 'CODE',
        placeholder: '{ “field1”: 1, “field2”: 2}',
      },
    ],
  },
  {
    title: 'Update Customer',
    name: 'STRIPE_UPDATE_CUSTOMER',
    output: [],
    inputs: [
      {
        id: 'customerId',
        title: 'Customer ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the customer to update.',
        required: true,
      },
      {
        id: 'emailUpdateCustomer',
        title: 'Email address',
        type: 'TEXTAREA',
      },
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
      },
      {
        id: 'description',
        title: 'Description',
        type: 'TEXTAREA',
      },
      {
        id: 'metadataUpdateCustomer',
        title: 'Metadata',
        type: 'CODE',
        placeholder: '{ “field1”: 1, “field2”: 2}',
      },
    ],
  },
  {
    title: 'Get Customer by ID',
    name: 'STRIPE_GET_CUSTOMER_BY_ID',
    output: [],
    inputs: [
      {
        id: 'idGetCustomer',
        title: 'Customer ID',
        type: 'TEXTAREA',
        required: true,
      },
    ],
  },
  {
    title: 'List Customers',
    name: 'STRIPE_GET_CUSTOMERS',
    output: [],
    inputs: [
      {
        id: 'emailGetCustomers',
        title: 'Email address',
        type: 'TEXTAREA',
        subtitle: 'Filters customers based on email address.',
      },
      {
        id: 'createdAfter',
        title: 'Created after',
        type: 'TEXTAREA',
        subtitle:
          'Filters customers created after the provided date (Unix timestamp).',
      },
      {
        id: 'createdBefore',
        title: 'Created before',
        type: 'TEXTAREA',
        subtitle:
          'Filters customers created before the provided date (Unix timestamp).',
      },
      {
        id: 'limitGetCustomers',
        title: 'Limit customers',
        type: 'TEXTAREA',
        subtitle:
          'Limit the maximum number of customers to return. Defaults to 10 if left blank.',
      },
    ],
  },
  {
    title: 'Create Subscription',
    name: 'STRIPE_CREATE_SUBSCRIPTION',
    output: [],
    inputs: [
      {
        id: 'customerIdCreateSubscription',
        title: 'Customer ID',
        type: 'TEXTAREA',
        subtitle: 'The Customer that the Subscription will be created for.',
        required: true,
      },
      {
        id: 'plan',
        title: 'Plan',
        type: 'TEXTAREA',
        subtitle:
          'The Plan that the Subscription will be created with. Use Connect Portal Workflow Settings to allow users to select a Plan.',
        placeholder: '{{settings.plan}}',
        required: true,
      },
      {
        id: 'metadataCreateSubscription',
        title: 'Metadata',
        type: 'CODE',
        placeholder: '{ “field1”: 1, “field2”: 2}',
      },
    ],
  },
  {
    title: 'List Subscriptions',
    name: 'STRIPE_GET_SUBSCRIPTIONS',
    output: [],
    inputs: [
      {
        id: 'customerIdGetSubscriptions',
        title: 'Customer ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Customer whose Subscriptions to list.',
      },
      {
        id: 'subscriptionStatus',
        title: 'Status',
        type: 'ENUM',
        placeholder: 'Select a Status',
        values: [
          'incomplete',
          'incomplete_expired',
          'trialing',
          'active',
          'past_due',
          'canceled',
          'unpaid',
        ],
      },
      {
        id: 'limitGetSubscriptions',
        title: 'Limit',
        type: 'TEXTAREA',
        subtitle:
          'Limit the maximum number of subscriptions to return. Defaults to 10 if left blank.',
      },
    ],
  },
  {
    title: 'Create Product',
    name: 'STRIPE_CREATE_PRODUCT',
    output: [],
    inputs: [
      {
        id: 'productName',
        title: 'Name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'description',
        title: 'Description',
        type: 'TEXTAREA',
      },
      {
        id: 'metadataProduct',
        title: 'Metadata',
        type: 'CODE',
        placeholder: '{ “field1”: 1, “field2”: 2}',
      },
    ],
  },
  {
    title: 'Get Product by ID',
    name: 'STRIPE_GET_PRODUCT_BY_ID',
    output: [],
    inputs: [
      {
        id: 'productId',
        title: 'Product ID',
        type: 'TEXTAREA',
        required: true,
      },
    ],
  },
  {
    title: 'List Products',
    name: 'STRIPE_GET_PRODUCTS',
    output: [],
    inputs: [
      {
        id: 'createdAfter',
        title: 'Created after',
        type: 'TEXTAREA',
        subtitle:
          'Filters customers created after the provided date (Unix timestamp).',
      },
      {
        id: 'createdBefore',
        title: 'Created before',
        type: 'TEXTAREA',
        subtitle:
          'Filters customers created before the provided date (Unix timestamp).',
      },
      {
        id: 'limitGetProducts',
        title: 'Limit Products',
        type: 'TEXTAREA',
        subtitle:
          'Limit the maximum number of products to return. Defaults to 10 if left blank.',
      },
    ],
  },
  {
    title: 'List Balance Transaction',
    name: 'STRIPE_GET_BALANCE_TRANSACTIONS',
    output: [],
    inputs: [
      {
        id: 'balanceTransactionType',
        title: 'Type',
        type: 'ENUM',
        subtitle: 'Only returns transactions of the given type.',
        values: ['charge', 'refund', 'payment', 'payment_refund'],
      },
    ],
  },
  {
    title: 'List Plans',
    name: 'STRIPE_GET_PLANS',
    output: [],
    inputs: [
      {
        id: 'isPlanActive',
        title: 'Active',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Select true to list all active plans or false to list all inactive plans.',
      },
    ],
  },
];

/**
 * integration class for stripe
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'stripe',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Customer
     * method for STRIPE_CREATE_CUSTOMER
     */
    createCustomer: (inputs, options) => {
      return new ActionStep({
        intent: 'STRIPE_CREATE_CUSTOMER',
        actionType: 'stripe',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Customer
     * method for STRIPE_UPDATE_CUSTOMER
     */
    updateCustomer: (inputs, options) => {
      return new ActionStep({
        intent: 'STRIPE_UPDATE_CUSTOMER',
        actionType: 'stripe',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Customer by ID
     * method for STRIPE_GET_CUSTOMER_BY_ID
     */
    getCustomerById: (inputs, options) => {
      return new ActionStep({
        intent: 'STRIPE_GET_CUSTOMER_BY_ID',
        actionType: 'stripe',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * List Customers
     * method for STRIPE_GET_CUSTOMERS
     */
    getCustomers: (inputs, options) => {
      return new ActionStep({
        intent: 'STRIPE_GET_CUSTOMERS',
        actionType: 'stripe',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Subscription
     * method for STRIPE_CREATE_SUBSCRIPTION
     */
    createSubscription: (inputs, options) => {
      return new ActionStep({
        intent: 'STRIPE_CREATE_SUBSCRIPTION',
        actionType: 'stripe',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * List Subscriptions
     * method for STRIPE_GET_SUBSCRIPTIONS
     */
    getSubscriptions: (inputs, options) => {
      return new ActionStep({
        intent: 'STRIPE_GET_SUBSCRIPTIONS',
        actionType: 'stripe',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Product
     * method for STRIPE_CREATE_PRODUCT
     */
    createProduct: (inputs, options) => {
      return new ActionStep({
        intent: 'STRIPE_CREATE_PRODUCT',
        actionType: 'stripe',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Product by ID
     * method for STRIPE_GET_PRODUCT_BY_ID
     */
    getProductById: (inputs, options) => {
      return new ActionStep({
        intent: 'STRIPE_GET_PRODUCT_BY_ID',
        actionType: 'stripe',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * List Products
     * method for STRIPE_GET_PRODUCTS
     */
    getProducts: (inputs, options) => {
      return new ActionStep({
        intent: 'STRIPE_GET_PRODUCTS',
        actionType: 'stripe',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * List Balance Transaction
     * method for STRIPE_GET_BALANCE_TRANSACTIONS
     */
    getBalanceTransactions: (inputs, options) => {
      return new ActionStep({
        intent: 'STRIPE_GET_BALANCE_TRANSACTIONS',
        actionType: 'stripe',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * List Plans
     * method for STRIPE_GET_PLANS
     */
    getPlans: (inputs, options) => {
      return new ActionStep({
        intent: 'STRIPE_GET_PLANS',
        actionType: 'stripe',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {},
};
