/**
 * Send message in channel intent type
 */
type SlackSendMessage = {
  /**
   * Channel
   * Use Connect Portal Workflow Settings to allow users to select a channel, or enter a channel name to create a new channel in the userâ€™s workspace.
   *
   * **Example**:
   * ```
   * {{settings.channel}}
   * ```
   */
  channel: string;

  /**
   * Message
   *
   */
  message: string;

  /**
   * Bot name
   * The name of the bot that sends this message.
   *
   */
  botName?: string;

  /**
   * Bot icon
   * Can be either an image URL or an emoji available to your team (e.g. :dog:)
   *
   */
  botIcon?: string;

  /**
   * Block kit JSON
   *
   * **Example**:
   * ```
   * {
   *  "blocks": [
   *    {
   *      "type": "section",
   *      "text": {
   *        "type": "mrkdwn",
   *        "text": "Hello, this is a sample message using Slack blocks!"
   *      }
   *    },
   *    {
   *      "type": "actions",
   *      "elements": [
   *        {
   *          "type": "button",
   *          "text": {
   *            "type": "plain_text",
   *            "text": "Click Me"
   *          },
   *          "value": "click_me_123"
   *        }
   *      ]
   *    }
   *  ]
   *}
   * ```
   */
  blocks?: string;

  /**
   * Send as authenticated user
   * If set to true, this message will appear to come from your authenticated Slack user instead of your application. Defaults to false.
   *
   */
  authenticatedUser?: boolean;

  /**
   * Additional Fields
   * Specify additional fields to include on this message as JSON. Doc link: https://api.slack.com/reference/messaging/link-unfurling
   *
   * **Example**:
   * ```
   * {
   *    "text": "<https://api.slack.com|Slack API>",
   *    "unfurl_links": true
   *}
   * ```
   */
  additionalFields?: string;
};

/**
 * Send direct message intent type
 */
type SlackSendDirectMessage = {
  /**
   * Recipient
   * Use Connect Portal Workflow Settings to allow users to select a workspace member to DM. Defaults to the authenticated user if not provided.
   *
   * **Example**:
   * ```
   * {{settings.WorkspaceMember}}
   * ```
   */
  memberId: string;

  /**
   * Message
   *
   */
  message: string;

  /**
   * Bot name
   * The name of the bot that sends this message.
   *
   */
  botName?: string;

  /**
   * Bot icon
   * Can be either an image URL or an emoji available to your team (e.g. :dog:)
   *
   */
  botIcon?: string;

  /**
   * Block kit JSON
   *
   * **Example**:
   * ```
   * {
   *  "blocks": [
   *    {
   *      "type": "section",
   *      "text": {
   *        "type": "mrkdwn",
   *        "text": "Hello, this is a sample message using Slack blocks!"
   *      }
   *    },
   *    {
   *      "type": "actions",
   *      "elements": [
   *        {
   *          "type": "button",
   *          "text": {
   *            "type": "plain_text",
   *            "text": "Click Me"
   *          },
   *          "value": "click_me_123"
   *        }
   *      ]
   *    }
   *  ]
   *}
   * ```
   */
  blocks?: string;

  /**
   * Send as authenticated user
   * If set to true, this message will appear to come from your authenticated Slack user instead of your application. Defaults to false.
   *
   */
  authenticatedUser?: boolean;

  /**
   * Additional Fields
   * Specify additional fields to include on this message as JSON. Doc link: https://api.slack.com/reference/messaging/link-unfurling
   *
   * **Example**:
   * ```
   * {
   *    "text": "<https://api.slack.com|Slack API>",
   *    "unfurl_links": true
   *}
   * ```
   */
  additionalFields?: string;
};

/**
 * Get User By Email intent type
 */
type SlackGetUserByEmail = {
  /**
   * Email
   * The email address of a user in the workspace.
   *
   */
  email: string;
};

/**
 * Search Messages intent type
 */
type SlackSearchMessages = {
  /**
   * Search Query
   * Search for messages that match specified Slack search query.
   *
   */
  query: string;
};

/**
 * Get users by name in Slack intent type
 */
type SlackGetUsersByName = {
  /**
   * Name
   *
   */
  name: string;

  /**
   * Display Name
   *
   */
  displayName: string;
};

export type IntentToInputOutput = {
  /**
   * SLACK_SEND_MESSAGE
   */
  SLACK_SEND_MESSAGE: [SlackSendMessage, any];

  /**
   * SLACK_SEND_DIRECT_MESSAGE
   */
  SLACK_SEND_DIRECT_MESSAGE: [SlackSendDirectMessage, any];

  /**
   * SLACK_GET_USER_BY_EMAIL
   */
  SLACK_GET_USER_BY_EMAIL: [SlackGetUserByEmail, any];

  /**
   * SLACK_SEARCH_MESSAGES
   */
  SLACK_SEARCH_MESSAGES: [SlackSearchMessages, any];

  /**
   * SLACK_GET_USERS_BY_NAME
   */
  SLACK_GET_USERS_BY_NAME: [SlackGetUsersByName, any];
};
