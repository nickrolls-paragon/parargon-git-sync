const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for slack
 */
exports.inputs = [
  {
    id: 'channels',
    title: 'Channel',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'members',
    title: 'Workspace Member',
    type: 'DYNAMIC_DATA_SOURCE',
  },
];

/**
 * triggers for slack
 */
exports.triggers = [
  {
    title: 'Direct Message Created',
    name: 'SLACK_TRIGGER_DIRECT_MESSAGE_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Channel Created',
    name: 'SLACK_TRIGGER_CHANNEL_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Direct Message Sent',
    name: 'SLACK_TRIGGER_DIRECT_MESSAGE_POSTED',
    output: [],
    inputs: [],
  },
  {
    title: 'File Deleted',
    name: 'SLACK_TRIGGER_FILE_DELETED',
    output: [],
    inputs: [],
  },
  {
    title: 'Group Message Sent',
    name: 'SLACK_TRIGGER_GROUP_MESSAGE_POSTED',
    output: [],
    inputs: [],
  },
  {
    title: 'Channel Message Sent',
    name: 'SLACK_TRIGGER_CHANNEL_MESSAGE_POSTED',
    output: [],
    inputs: [],
  },
  {
    title: 'Direct Message Updated',
    name: 'SLACK_TRIGGER_DIRECT_MESSAGE_UPDATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Group Message Updated',
    name: 'SLACK_TRIGGER_GROUP_MESSAGE_UPDATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Channel Message Updated',
    name: 'SLACK_TRIGGER_CHANNEL_MESSAGE_UPDATED',
    output: [],
    inputs: [],
  },
  {
    title: 'App Mentioned',
    name: 'SLACK_TRIGGER_APP_MENTIONED',
    output: [],
    inputs: [
      {
        id: 'appMentionedFilter',
        title: 'Filter Records',
        type: 'CONDITIONAL',
        subtitle: 'Search for records that match specified filters.',
        supportedKeys: ['user', 'channel'],
        supportedOperators: ['$stringExactlyMatches'],
      },
    ],
  },
  {
    title: 'New Message Reaction',
    name: 'SLACK_TRIGGER_NEW_REACTION',
    output: [],
    inputs: [
      {
        id: 'reactionFilter',
        title: 'Filter Records',
        type: 'CONDITIONAL',
        subtitle: 'Search for reactions that match specified filters.',
        supportedKeys: ['item_user', 'user', 'channel'],
        supportedOperators: [
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
        ],
      },
    ],
  },
  {
    title: 'Message Reaction Removed',
    name: 'SLACK_TRIGGER_REACTION_REMOVED',
    output: [],
    inputs: [
      {
        id: 'reactionFilter',
        title: 'Filter Records',
        type: 'CONDITIONAL',
        subtitle: 'Search for reactions that match specified filters.',
        supportedKeys: ['item_user', 'user', 'channel'],
        supportedOperators: [
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
        ],
      },
    ],
  },
  {
    title: 'Message Interaction',
    name: 'SLACK_TRIGGER_MESSAGE_INTERACTION',
    output: [],
    inputs: [],
  },
];

/**
 * intents for slack
 */
exports.intents = [
  {
    title: 'Send message in channel',
    name: 'SLACK_SEND_MESSAGE',
    output: [],
    inputs: [
      {
        id: 'channel',
        title: 'Channel',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a channel, or enter a channel name to create a new channel in the userâ€™s workspace.',
        placeholder: '{{settings.channel}}',
        required: true,
      },
      {
        id: 'message',
        title: 'Message',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'botName',
        title: 'Bot name',
        type: 'TEXTAREA',
        subtitle: 'The name of the bot that sends this message.',
      },
      {
        id: 'botIcon',
        title: 'Bot icon',
        type: 'TEXTAREA',
        subtitle:
          'Can be either an image URL or an emoji available to your team (e.g. :dog:)',
      },
      {
        id: 'blocks',
        title: 'Block kit JSON',
        type: 'CODE',
        placeholder:
          '{\n  "blocks": [\n    {\n      "type": "section",\n      "text": {\n        "type": "mrkdwn",\n        "text": "Hello, this is a sample message using Slack blocks!"\n      }\n    },\n    {\n      "type": "actions",\n      "elements": [\n        {\n          "type": "button",\n          "text": {\n            "type": "plain_text",\n            "text": "Click Me"\n          },\n          "value": "click_me_123"\n        }\n      ]\n    }\n  ]\n}',
      },
      {
        id: 'authenticatedUser',
        title: 'Send as authenticated user',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If set to true, this message will appear to come from your authenticated Slack user instead of your application. Defaults to false.',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        subtitle:
          'Specify additional fields to include on this message as JSON. Doc link: https://api.slack.com/reference/messaging/link-unfurling',
        placeholder:
          '{\n    "text": "<https://api.slack.com|Slack API>",\n    "unfurl_links": true\n}',
      },
    ],
  },
  {
    title: 'Send direct message',
    name: 'SLACK_SEND_DIRECT_MESSAGE',
    output: [],
    inputs: [
      {
        id: 'memberId',
        title: 'Recipient',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a workspace member to DM. Defaults to the authenticated user if not provided.',
        placeholder: '{{settings.WorkspaceMember}}',
        required: true,
      },
      {
        id: 'message',
        title: 'Message',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'botName',
        title: 'Bot name',
        type: 'TEXTAREA',
        subtitle: 'The name of the bot that sends this message.',
      },
      {
        id: 'botIcon',
        title: 'Bot icon',
        type: 'TEXTAREA',
        subtitle:
          'Can be either an image URL or an emoji available to your team (e.g. :dog:)',
      },
      {
        id: 'blocks',
        title: 'Block kit JSON',
        type: 'CODE',
        placeholder:
          '{\n  "blocks": [\n    {\n      "type": "section",\n      "text": {\n        "type": "mrkdwn",\n        "text": "Hello, this is a sample message using Slack blocks!"\n      }\n    },\n    {\n      "type": "actions",\n      "elements": [\n        {\n          "type": "button",\n          "text": {\n            "type": "plain_text",\n            "text": "Click Me"\n          },\n          "value": "click_me_123"\n        }\n      ]\n    }\n  ]\n}',
      },
      {
        id: 'authenticatedUser',
        title: 'Send as authenticated user',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If set to true, this message will appear to come from your authenticated Slack user instead of your application. Defaults to false.',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        subtitle:
          'Specify additional fields to include on this message as JSON. Doc link: https://api.slack.com/reference/messaging/link-unfurling',
        placeholder:
          '{\n    "text": "<https://api.slack.com|Slack API>",\n    "unfurl_links": true\n}',
      },
    ],
  },
  {
    title: 'Get User By Email',
    name: 'SLACK_GET_USER_BY_EMAIL',
    output: [],
    inputs: [
      {
        id: 'email',
        title: 'Email',
        type: 'TEXTAREA',
        subtitle: 'The email address of a user in the workspace.',
        required: true,
      },
    ],
  },
  {
    title: 'Search Messages',
    name: 'SLACK_SEARCH_MESSAGES',
    output: [],
    inputs: [
      {
        id: 'query',
        title: 'Search Query',
        type: 'TEXTAREA',
        subtitle:
          'Search for messages that match specified Slack search query.',
        required: true,
      },
    ],
  },
  {
    title: 'Get users by name in Slack',
    name: 'SLACK_GET_USERS_BY_NAME',
    output: [],
    inputs: [
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'displayName',
        title: 'Display Name',
        type: 'TEXTAREA',
        required: true,
      },
    ],
  },
];

/**
 * integration class for slack
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'slack',

  /**
   * action step methods
   */
  actions: {
    /**
     * Send message in channel
     * method for SLACK_SEND_MESSAGE
     */
    sendMessage: (inputs, options) => {
      return new ActionStep({
        intent: 'SLACK_SEND_MESSAGE',
        actionType: 'slack',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Send direct message
     * method for SLACK_SEND_DIRECT_MESSAGE
     */
    sendDirectMessage: (inputs, options) => {
      return new ActionStep({
        intent: 'SLACK_SEND_DIRECT_MESSAGE',
        actionType: 'slack',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get User By Email
     * method for SLACK_GET_USER_BY_EMAIL
     */
    getUserByEmail: (inputs, options) => {
      return new ActionStep({
        intent: 'SLACK_GET_USER_BY_EMAIL',
        actionType: 'slack',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Messages
     * method for SLACK_SEARCH_MESSAGES
     */
    searchMessages: (inputs, options) => {
      return new ActionStep({
        intent: 'SLACK_SEARCH_MESSAGES',
        actionType: 'slack',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get users by name in Slack
     * method for SLACK_GET_USERS_BY_NAME
     */
    getUsersByName: (inputs, options) => {
      return new ActionStep({
        intent: 'SLACK_GET_USERS_BY_NAME',
        actionType: 'slack',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Direct Message Created
     * method for SLACK_TRIGGER_DIRECT_MESSAGE_CREATED
     */
    directMessageCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_DIRECT_MESSAGE_CREATED',
        actionType: 'slack',
        parameters: inputs,
      });
    },
    /**
     * Channel Created
     * method for SLACK_TRIGGER_CHANNEL_CREATED
     */
    channelCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_CHANNEL_CREATED',
        actionType: 'slack',
        parameters: inputs,
      });
    },
    /**
     * Direct Message Sent
     * method for SLACK_TRIGGER_DIRECT_MESSAGE_POSTED
     */
    directMessagePosted: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_DIRECT_MESSAGE_POSTED',
        actionType: 'slack',
        parameters: inputs,
      });
    },
    /**
     * File Deleted
     * method for SLACK_TRIGGER_FILE_DELETED
     */
    fileDeleted: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_FILE_DELETED',
        actionType: 'slack',
        parameters: inputs,
      });
    },
    /**
     * Group Message Sent
     * method for SLACK_TRIGGER_GROUP_MESSAGE_POSTED
     */
    groupMessagePosted: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_GROUP_MESSAGE_POSTED',
        actionType: 'slack',
        parameters: inputs,
      });
    },
    /**
     * Channel Message Sent
     * method for SLACK_TRIGGER_CHANNEL_MESSAGE_POSTED
     */
    channelMessagePosted: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_CHANNEL_MESSAGE_POSTED',
        actionType: 'slack',
        parameters: inputs,
      });
    },
    /**
     * Direct Message Updated
     * method for SLACK_TRIGGER_DIRECT_MESSAGE_UPDATED
     */
    directMessageUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_DIRECT_MESSAGE_UPDATED',
        actionType: 'slack',
        parameters: inputs,
      });
    },
    /**
     * Group Message Updated
     * method for SLACK_TRIGGER_GROUP_MESSAGE_UPDATED
     */
    groupMessageUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_GROUP_MESSAGE_UPDATED',
        actionType: 'slack',
        parameters: inputs,
      });
    },
    /**
     * Channel Message Updated
     * method for SLACK_TRIGGER_CHANNEL_MESSAGE_UPDATED
     */
    channelMessageUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_CHANNEL_MESSAGE_UPDATED',
        actionType: 'slack',
        parameters: inputs,
      });
    },
    /**
     * App Mentioned
     * method for SLACK_TRIGGER_APP_MENTIONED
     */
    appMentioned: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_APP_MENTIONED',
        actionType: 'slack',
        parameters: inputs,
      });
    },
    /**
     * New Message Reaction
     * method for SLACK_TRIGGER_NEW_REACTION
     */
    newReaction: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_NEW_REACTION',
        actionType: 'slack',
        parameters: inputs,
      });
    },
    /**
     * Message Reaction Removed
     * method for SLACK_TRIGGER_REACTION_REMOVED
     */
    reactionRemoved: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_REACTION_REMOVED',
        actionType: 'slack',
        parameters: inputs,
      });
    },
    /**
     * Message Interaction
     * method for SLACK_TRIGGER_MESSAGE_INTERACTION
     */
    messageInteraction: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SLACK_TRIGGER_MESSAGE_INTERACTION',
        actionType: 'slack',
        parameters: inputs,
      });
    },
  },
};
