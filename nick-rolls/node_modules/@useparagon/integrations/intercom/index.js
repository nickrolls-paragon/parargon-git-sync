const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for intercom
 */
exports.inputs = [
  {
    id: 'adminIdList',
    title: 'Admin',
    type: 'DYNAMIC_DATA_SOURCE',
  },
];

/**
 * triggers for intercom
 */
exports.triggers = [
  {
    title: 'New Contact Created',
    name: 'INTERCOM_TRIGGER_CONTACT_CREATED',
    output: [],
    inputs: [
      {
        id: 'filterFormula',
        title: 'Filter records',
        type: 'CONDITIONAL',
        subtitle: 'Only trigger on records that match these filters.',
        placeholder: 'filter by property',
        supportedKeys: ['id', 'owner_id', 'role'],
        supportedOperators: [
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
        ],
      },
    ],
  },
  {
    title: 'Contact Updated',
    name: 'INTERCOM_TRIGGER_CONTACT_UPDATED',
    output: [],
    inputs: [
      {
        id: 'filterFormula',
        title: 'Filter records',
        type: 'CONDITIONAL',
        subtitle: 'Only trigger on records that match these filters.',
        placeholder: 'filter by property',
        supportedKeys: ['id', 'owner_id', 'role'],
        supportedOperators: [
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
        ],
      },
    ],
  },
  {
    title: 'New Company Created',
    name: 'INTERCOM_TRIGGER_COMPANY_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Company Updated',
    name: 'INTERCOM_TRIGGER_COMPANY_UPDATED',
    output: [],
    inputs: [],
  },
];

/**
 * intents for intercom
 */
exports.intents = [
  {
    title: 'Create contact',
    name: 'INTERCOM_CREATE_CONTACT',
    output: [],
    inputs: [
      {
        id: 'role',
        title: 'Role',
        type: 'ENUM',
        required: true,
        defaultValue: 'user',
        values: ['user', 'lead'],
      },
      {
        id: 'email',
        title: 'Email',
        type: 'TEXTAREA',
        placeholder: 'name@example.com',
        required: true,
      },
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
      },
      {
        id: 'externalId',
        title: 'External ID',
        type: 'TEXTAREA',
        subtitle:
          'A unique external identifier given to the contact (e.g. from your app)',
        placeholder: '25',
      },
      {
        id: 'phone',
        title: 'Phone',
        type: 'TEXTAREA',
        placeholder: '+1123456789',
      },
      {
        id: 'avatar',
        title: 'Avatar',
        type: 'TEXTAREA',
        placeholder: 'https://example.com/avatar.jpeg',
      },
      {
        id: 'signedUpDate',
        title: 'Signed up at',
        type: 'TEXTAREA',
        subtitle:
          'The time specified for when a contact signed up (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'lastSeenDate',
        title: 'Last seen at',
        type: 'TEXTAREA',
        subtitle:
          'The time when the contact was last seen (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'ownerId',
        title: 'Owner ID',
        type: 'TEXTAREA',
        subtitle:
          'The Intercom Admin that has been assigned account ownership of the contact. Use Connect Portal Workflow Settings to allow users to select an Admin.',
        placeholder: '{{settings.admin}}',
      },
      {
        id: 'unsubscribeFromEmail',
        title: 'Unsubscribed from emails',
        type: 'BOOLEAN_INPUT',
        subtitle: 'Whether the contact is unsubscribed from emails.',
      },
      {
        id: 'customAttribute',
        title: 'Custom attributes',
        type: 'CODE',
        placeholder:
          '{\n"paid_subscriber": true,\n"monthly_spend": 155.5,\n"team_mates": 1\n}',
      },
    ],
  },
  {
    title: 'Update contact',
    name: 'INTERCOM_UPDATE_CONTACT',
    output: [],
    inputs: [
      {
        id: 'contactId',
        title: 'Contact ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the contact to update.',
        required: true,
      },
      {
        id: 'role',
        title: 'Role',
        type: 'ENUM',
        defaultValue: 'user',
        values: ['user', 'lead'],
      },
      {
        id: 'email',
        title: 'Email',
        type: 'TEXTAREA',
        placeholder: 'name@example.com',
      },
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
      },
      {
        id: 'externalId',
        title: 'External ID',
        type: 'TEXTAREA',
        subtitle:
          'A unique external identifier given to the contact (e.g. from your app)',
        placeholder: '25',
      },
      {
        id: 'phone',
        title: 'Phone',
        type: 'TEXTAREA',
        placeholder: '+1123456789',
      },
      {
        id: 'avatar',
        title: 'Avatar',
        type: 'TEXTAREA',
        placeholder: 'https://example.com/avatar.jpeg',
      },
      {
        id: 'signedUpDate',
        title: 'Signed up at',
        type: 'TEXTAREA',
        subtitle:
          'The time specified for when a contact signed up (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'lastSeenDate',
        title: 'Last seen at',
        type: 'TEXTAREA',
        subtitle:
          'The time when the contact was last seen (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'ownerId',
        title: 'Owner ID',
        type: 'TEXTAREA',
        subtitle:
          'The Intercom Admin that has been assigned account ownership of the contact. Use Connect Portal Workflow Settings to allow users to select an Admin.',
        placeholder: '{{settings.admin}}',
      },
      {
        id: 'unsubscribeFromEmail',
        title: 'Unsubscribed from emails',
        type: 'BOOLEAN_INPUT',
        subtitle: 'Whether the contact is unsubscribed from emails.',
      },
      {
        id: 'customAttribute',
        title: 'Custom attributes',
        type: 'CODE',
        placeholder:
          '{\n"paid_subscriber": true,\n"monthly_spend": 155.5,\n"team_mates": 1\n}',
      },
    ],
  },
  {
    title: 'Get contact by ID',
    name: 'INTERCOM_GET_CONTACT_BY_ID',
    output: [],
    inputs: [
      {
        id: 'contactId',
        title: 'Contact ID',
        type: 'TEXTAREA',
        required: true,
      },
    ],
  },
  {
    title: 'Search contacts',
    name: 'INTERCOM_SEARCH_CONTACTS',
    output: [],
    inputs: [
      {
        id: 'filterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Get contacts that match the specified filters.',
        placeholder: 'field',
        supportedKeys: [
          'id',
          'external_id',
          'role',
          'email',
          'phone',
          'name',
          'avatar',
          'owner_id',
          'created_at',
          'updated_at',
          'last_seen_at',
          'signed_up_at',
        ],
        supportedOperators: [
          '$stringContains',
          '$stringDoesNotContain',
          '$stringStartsWith',
          '$stringEndsWith',
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$numberLessThan',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberDoesNotEqual',
          '$numberGreaterThanOrEqualTo',
          '$numberLessThanOrEqualTo',
          '$arrayIsIn',
          '$dateTimeEquals',
          '$dateTimeBefore',
          '$dateTimeAfter',
        ],
      },
    ],
  },
  {
    title: 'Send message',
    name: 'INTERCOM_SEND_MESSAGE',
    output: [],
    inputs: [
      {
        id: 'recipientContactType',
        title: 'Recipient contact type',
        type: 'ENUM',
        required: true,
        values: ['user', 'lead'],
      },
      {
        id: 'recepientContactId',
        title: 'Recipient contact ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the contact to send the message to.',
        required: true,
      },
      {
        id: 'messageType',
        title: 'Message type',
        type: 'ENUM',
        required: true,
        values: ['inapp', 'email'],
      },
      {
        id: 'fromId',
        title: 'From',
        type: 'TEXTAREA',
        subtitle:
          'The Intercom Admin the message will be sent from. Use Connect Portal Workflow Settings to allow users to select an Admin.',
        placeholder: '{{settings.admin}}',
        required: true,
      },
      {
        id: 'subject',
        title: 'Subject',
        type: 'TEXTAREA',
        subtitle: 'Required if sending an email.',
        placeholder: 'name@example.com',
      },
      {
        id: 'body',
        title: 'Body',
        type: 'TEXTAREA',
        subtitle:
          'The content of the message. HTML and plaintext are supported.',
        required: true,
      },
      {
        id: 'template',
        title: 'Template',
        type: 'ENUM',
        subtitle:
          'The style of the outgoing message. Required if sending an email.',
        values: ['personal', 'plain'],
      },
    ],
  },
];

/**
 * integration class for intercom
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'intercom',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create contact
     * method for INTERCOM_CREATE_CONTACT
     */
    createContact: (inputs, options) => {
      return new ActionStep({
        intent: 'INTERCOM_CREATE_CONTACT',
        actionType: 'intercom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update contact
     * method for INTERCOM_UPDATE_CONTACT
     */
    updateContact: (inputs, options) => {
      return new ActionStep({
        intent: 'INTERCOM_UPDATE_CONTACT',
        actionType: 'intercom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get contact by ID
     * method for INTERCOM_GET_CONTACT_BY_ID
     */
    getContactById: (inputs, options) => {
      return new ActionStep({
        intent: 'INTERCOM_GET_CONTACT_BY_ID',
        actionType: 'intercom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search contacts
     * method for INTERCOM_SEARCH_CONTACTS
     */
    searchContacts: (inputs, options) => {
      return new ActionStep({
        intent: 'INTERCOM_SEARCH_CONTACTS',
        actionType: 'intercom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Send message
     * method for INTERCOM_SEND_MESSAGE
     */
    sendMessage: (inputs, options) => {
      return new ActionStep({
        intent: 'INTERCOM_SEND_MESSAGE',
        actionType: 'intercom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Contact Created
     * method for INTERCOM_TRIGGER_CONTACT_CREATED
     */
    contactCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'INTERCOM_TRIGGER_CONTACT_CREATED',
        actionType: 'intercom',
        parameters: inputs,
      });
    },
    /**
     * Contact Updated
     * method for INTERCOM_TRIGGER_CONTACT_UPDATED
     */
    contactUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'INTERCOM_TRIGGER_CONTACT_UPDATED',
        actionType: 'intercom',
        parameters: inputs,
      });
    },
    /**
     * New Company Created
     * method for INTERCOM_TRIGGER_COMPANY_CREATED
     */
    companyCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'INTERCOM_TRIGGER_COMPANY_CREATED',
        actionType: 'intercom',
        parameters: inputs,
      });
    },
    /**
     * Company Updated
     * method for INTERCOM_TRIGGER_COMPANY_UPDATED
     */
    companyUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'INTERCOM_TRIGGER_COMPANY_UPDATED',
        actionType: 'intercom',
        parameters: inputs,
      });
    },
  },
};
