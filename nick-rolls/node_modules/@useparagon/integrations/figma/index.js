const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for figma
 */
exports.inputs = [];

/**
 * triggers for figma
 */
exports.triggers = [];

/**
 * intents for figma
 */
exports.intents = [
  {
    title: 'Get Files by ID',
    name: 'FIGMA_GET_FILE_BY_ID',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a File ID. The File ID can be parsed from file url: https://www.figma.com/file/:id/:title',
        placeholder: 'CRcEzuiEc3ybXCg6B',
        required: true,
      },
    ],
  },
  {
    title: 'Get File Node',
    name: 'FIGMA_GET_FILE_NODES',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a File ID. The File ID can be parsed from file url: https://www.figma.com/file/:id/:title',
        placeholder: 'CRcEzuiEc3ybXCg6B',
        required: true,
      },
      {
        id: 'ids',
        title: 'Node IDs',
        type: 'TEXTAREA',
        subtitle:
          'Specify a comma separated list of Node IDs to retrieve. The Node ID can be parsed from any Figma node url: https://www.figma.com/file/:key/:title?node-id=:id.',
        placeholder: '0:1,0:2',
        required: true,
      },
    ],
  },
  {
    title: 'Get Rendered Image from File',
    name: 'FIGMA_GET_RENDERED_IMAGE',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a File ID. The File ID can be parsed from file url: https://www.figma.com/file/:id/:title',
        placeholder: 'CRcEzuiEc3ybXCg6B',
        required: true,
      },
      {
        id: 'ids',
        title: 'Node IDs',
        type: 'TEXTAREA',
        subtitle:
          'Specify a comma separated list of Node IDs to retrieve. The Node ID can be parsed from any Figma node url: https://www.figma.com/file/:key/:title?node-id=:id.',
        placeholder: '0:1,0:2',
        required: true,
      },
    ],
  },
  {
    title: "Get Users' Projects",
    name: 'FIGMA_GET_PROJECT',
    output: [],
    inputs: [
      {
        id: 'teamId',
        title: 'Team ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify ID of the Team to list projects. The Team ID can be parsed from team url: https://www.figma.com/files/team/:id/:title',
        placeholder: '21321312',
        required: true,
      },
    ],
  },
  {
    title: 'Get Project Files',
    name: 'FIGMA_GET_PROJECT_FILES',
    output: [],
    inputs: [
      {
        id: 'projectId',
        title: 'Project ID',
        type: 'TEXTAREA',
        subtitle: 'Specify ID of the Project to list files from.',
        placeholder: '21321312',
        required: true,
      },
    ],
  },
  {
    title: 'Create Comment',
    name: 'FIGMA_CREATE_COMMENT',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a File ID. The File ID can be parsed from file url: https://www.figma.com/file/:id/:title',
        placeholder: 'CRcEzuiEc3ybXCg6B',
        required: true,
      },
      {
        id: 'message',
        title: 'Message',
        type: 'TEXTAREA',
        subtitle: 'The text contents of the comment to post',
        required: true,
      },
      {
        id: 'additionalData',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n  "comment_id": "string",\n  "client_meta": {\n    "x":100,\n    "y":100\n  }\n}',
      },
    ],
  },
  {
    title: 'Get Comments by File',
    name: 'FIGMA_GET_COMMENTS_BY_FILE',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a File ID. The File ID can be parsed from file url: https://www.figma.com/file/:id/:title',
        placeholder: 'CRcEzuiEc3ybXCg6B',
        required: true,
      },
    ],
  },
  {
    title: 'Delete Comment',
    name: 'FIGMA_DELETE_COMMENTS',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a File ID. The File ID can be parsed from file url: https://www.figma.com/file/:id/:title',
        placeholder: 'CRcEzuiEc3ybXCg6B',
        required: true,
      },
      {
        id: 'commentId',
        title: 'Comment ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the comment to delete.',
        placeholder: '469424202',
        required: true,
      },
    ],
  },
  {
    title: 'Create Comment Reaction',
    name: 'FIGMA_CREATE_COMMENT_REACTION',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a File ID. The File ID can be parsed from file url: https://www.figma.com/file/:id/:title',
        placeholder: 'CRcEzuiEc3ybXCg6B',
        required: true,
      },
      {
        id: 'commentId',
        title: 'Comment ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the comment to add reaction to.',
        placeholder: '469424202',
        required: true,
      },
      {
        id: 'emoji',
        title: 'Emoji',
        type: 'EDITABLE_ENUM',
        subtitle: 'Specify the emoji type of reaction to add.',
        required: true,
        values: [
          ':eyes:',
          ':heart_eyes:',
          ':heavy_plus_sign:',
          ':+1:',
          ':-1:',
          ':joy:',
          ':fire:',
        ],
      },
    ],
  },
  {
    title: 'Get Comment Reactions by File',
    name: 'FIGMA_GET_COMMENT_REACTION',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a File ID. The File ID can be parsed from file url: https://www.figma.com/file/:id/:title',
        placeholder: 'CRcEzuiEc3ybXCg6B',
        required: true,
      },
      {
        id: 'commentId',
        title: 'Comment ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the comment to get reactions from.',
        placeholder: '469424202',
        required: true,
      },
    ],
  },
  {
    title: 'Delete Comment Reaction',
    name: 'FIGMA_DELETE_COMMENT_REACTION',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a File ID. The File ID can be parsed from file url: https://www.figma.com/file/:id/:title',
        placeholder: 'CRcEzuiEc3ybXCg6B',
        required: true,
      },
      {
        id: 'commentId',
        title: 'Comment ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the comment to remove reaction from.',
        placeholder: '469424202',
        required: true,
      },
      {
        id: 'emoji',
        title: 'Emoji',
        type: 'EDITABLE_ENUM',
        subtitle: 'Specify the emoji type of reaction to delete.',
        required: true,
        values: [
          ':eyes:',
          ':heart_eyes:',
          ':heavy_plus_sign:',
          ':+1:',
          ':-1:',
          ':joy:',
          ':fire:',
        ],
      },
    ],
  },
];

/**
 * integration class for figma
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'figma',

  /**
   * action step methods
   */
  actions: {
    /**
     * Get Files by ID
     * method for FIGMA_GET_FILE_BY_ID
     */
    getFileById: (inputs, options) => {
      return new ActionStep({
        intent: 'FIGMA_GET_FILE_BY_ID',
        actionType: 'figma',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get File Node
     * method for FIGMA_GET_FILE_NODES
     */
    getFileNodes: (inputs, options) => {
      return new ActionStep({
        intent: 'FIGMA_GET_FILE_NODES',
        actionType: 'figma',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Rendered Image from File
     * method for FIGMA_GET_RENDERED_IMAGE
     */
    getRenderedImage: (inputs, options) => {
      return new ActionStep({
        intent: 'FIGMA_GET_RENDERED_IMAGE',
        actionType: 'figma',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Users' Projects
     * method for FIGMA_GET_PROJECT
     */
    getProject: (inputs, options) => {
      return new ActionStep({
        intent: 'FIGMA_GET_PROJECT',
        actionType: 'figma',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Project Files
     * method for FIGMA_GET_PROJECT_FILES
     */
    getProjectFiles: (inputs, options) => {
      return new ActionStep({
        intent: 'FIGMA_GET_PROJECT_FILES',
        actionType: 'figma',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Comment
     * method for FIGMA_CREATE_COMMENT
     */
    createComment: (inputs, options) => {
      return new ActionStep({
        intent: 'FIGMA_CREATE_COMMENT',
        actionType: 'figma',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Comments by File
     * method for FIGMA_GET_COMMENTS_BY_FILE
     */
    getCommentsByFile: (inputs, options) => {
      return new ActionStep({
        intent: 'FIGMA_GET_COMMENTS_BY_FILE',
        actionType: 'figma',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Comment
     * method for FIGMA_DELETE_COMMENTS
     */
    deleteComments: (inputs, options) => {
      return new ActionStep({
        intent: 'FIGMA_DELETE_COMMENTS',
        actionType: 'figma',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Comment Reaction
     * method for FIGMA_CREATE_COMMENT_REACTION
     */
    createCommentReaction: (inputs, options) => {
      return new ActionStep({
        intent: 'FIGMA_CREATE_COMMENT_REACTION',
        actionType: 'figma',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Comment Reactions by File
     * method for FIGMA_GET_COMMENT_REACTION
     */
    getCommentReaction: (inputs, options) => {
      return new ActionStep({
        intent: 'FIGMA_GET_COMMENT_REACTION',
        actionType: 'figma',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Comment Reaction
     * method for FIGMA_DELETE_COMMENT_REACTION
     */
    deleteCommentReaction: (inputs, options) => {
      return new ActionStep({
        intent: 'FIGMA_DELETE_COMMENT_REACTION',
        actionType: 'figma',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {},
};
