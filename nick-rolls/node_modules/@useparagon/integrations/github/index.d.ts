import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type IGithubIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type: 'text' | 'number' | 'email' | 'url' | 'boolean' | 'password';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IGithubIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for github
 */
export type IGithubIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Issue
     * method for GITHUB_CREATE_ISSUE
     */
    createIssue: (
      inputs: IntentToInputOutput['GITHUB_CREATE_ISSUE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GITHUB_CREATE_ISSUE'][0],
      IntentToInputOutput['GITHUB_CREATE_ISSUE'][1]
    >;

    /**
     * Update Issue
     * method for GITHUB_UPDATE_ISSUE
     */
    updateIssue: (
      inputs: IntentToInputOutput['GITHUB_UPDATE_ISSUE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GITHUB_UPDATE_ISSUE'][0],
      IntentToInputOutput['GITHUB_UPDATE_ISSUE'][1]
    >;

    /**
     * Get Issue by Number
     * method for GITHUB_GET_ISSUE_BY_NUMBER
     */
    getIssueByNumber: (
      inputs: IntentToInputOutput['GITHUB_GET_ISSUE_BY_NUMBER'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GITHUB_GET_ISSUE_BY_NUMBER'][0],
      IntentToInputOutput['GITHUB_GET_ISSUE_BY_NUMBER'][1]
    >;

    /**
     * Lock Issue
     * method for GITHUB_LOCK_ISSUE
     */
    lockIssue: (
      inputs: IntentToInputOutput['GITHUB_LOCK_ISSUE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GITHUB_LOCK_ISSUE'][0],
      IntentToInputOutput['GITHUB_LOCK_ISSUE'][1]
    >;

    /**
     * Search Issue
     * method for GITHUB_SEARCH_ISSUE
     */
    searchIssue: (
      inputs: IntentToInputOutput['GITHUB_SEARCH_ISSUE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GITHUB_SEARCH_ISSUE'][0],
      IntentToInputOutput['GITHUB_SEARCH_ISSUE'][1]
    >;

    /**
     * Create Release
     * method for GITHUB_CREATE_RELEASE
     */
    createRelease: (
      inputs: IntentToInputOutput['GITHUB_CREATE_RELEASE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GITHUB_CREATE_RELEASE'][0],
      IntentToInputOutput['GITHUB_CREATE_RELEASE'][1]
    >;

    /**
     * Update Release
     * method for GITHUB_UPDATE_RELEASE
     */
    updateRelease: (
      inputs: IntentToInputOutput['GITHUB_UPDATE_RELEASE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GITHUB_UPDATE_RELEASE'][0],
      IntentToInputOutput['GITHUB_UPDATE_RELEASE'][1]
    >;

    /**
     * Get Release by ID
     * method for GITHUB_GET_RELEASE_BY_ID
     */
    getReleaseById: (
      inputs: IntentToInputOutput['GITHUB_GET_RELEASE_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GITHUB_GET_RELEASE_BY_ID'][0],
      IntentToInputOutput['GITHUB_GET_RELEASE_BY_ID'][1]
    >;

    /**
     * Get Release by Tag Name
     * method for GITHUB_GET_RELEASE_BY_TAG_NAME
     */
    getReleaseByTagName: (
      inputs: IntentToInputOutput['GITHUB_GET_RELEASE_BY_TAG_NAME'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GITHUB_GET_RELEASE_BY_TAG_NAME'][0],
      IntentToInputOutput['GITHUB_GET_RELEASE_BY_TAG_NAME'][1]
    >;

    /**
     * Delete Release
     * method for GITHUB_DELETE_RELEASE
     */
    deleteRelease: (
      inputs: IntentToInputOutput['GITHUB_DELETE_RELEASE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GITHUB_DELETE_RELEASE'][0],
      IntentToInputOutput['GITHUB_DELETE_RELEASE'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Issue Created
     * method for GITHUB_TRIGGER_ISSUE_CREATED
     */
    issueCreated: (
      inputs: TriggerIntentToInputOutput['GITHUB_TRIGGER_ISSUE_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GITHUB_TRIGGER_ISSUE_CREATED'][0],
      TriggerIntentToInputOutput['GITHUB_TRIGGER_ISSUE_CREATED'][1]
    >;

    /**
     * Issue Updated
     * method for GITHUB_TRIGGER_ISSUE_UPDATED
     */
    issueUpdated: (
      inputs: TriggerIntentToInputOutput['GITHUB_TRIGGER_ISSUE_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GITHUB_TRIGGER_ISSUE_UPDATED'][0],
      TriggerIntentToInputOutput['GITHUB_TRIGGER_ISSUE_UPDATED'][1]
    >;

    /**
     * PR Created
     * method for GITHUB_TRIGGER_PULL_REQUEST_CREATED
     */
    pullRequestCreated: (
      inputs: TriggerIntentToInputOutput['GITHUB_TRIGGER_PULL_REQUEST_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GITHUB_TRIGGER_PULL_REQUEST_CREATED'][0],
      TriggerIntentToInputOutput['GITHUB_TRIGGER_PULL_REQUEST_CREATED'][1]
    >;

    /**
     * PR Updated
     * method for GITHUB_TRIGGER_PULL_REQUEST_UPDATED
     */
    pullRequestUpdated: (
      inputs: TriggerIntentToInputOutput['GITHUB_TRIGGER_PULL_REQUEST_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GITHUB_TRIGGER_PULL_REQUEST_UPDATED'][0],
      TriggerIntentToInputOutput['GITHUB_TRIGGER_PULL_REQUEST_UPDATED'][1]
    >;

    /**
     * Project Created
     * method for GITHUB_TRIGGER_PROJECT_CREATED
     */
    projectCreated: (
      inputs: TriggerIntentToInputOutput['GITHUB_TRIGGER_PROJECT_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GITHUB_TRIGGER_PROJECT_CREATED'][0],
      TriggerIntentToInputOutput['GITHUB_TRIGGER_PROJECT_CREATED'][1]
    >;

    /**
     * Project Updated
     * method for GITHUB_TRIGGER_PROJECT_UPDATED
     */
    projectUpdated: (
      inputs: TriggerIntentToInputOutput['GITHUB_TRIGGER_PROJECT_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GITHUB_TRIGGER_PROJECT_UPDATED'][0],
      TriggerIntentToInputOutput['GITHUB_TRIGGER_PROJECT_UPDATED'][1]
    >;

    /**
     * Project Created (Classic)
     * method for GITHUB_TRIGGER_CLASSIC_PROJECT_CREATED
     */
    classicProjectCreated: (
      inputs: TriggerIntentToInputOutput['GITHUB_TRIGGER_CLASSIC_PROJECT_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GITHUB_TRIGGER_CLASSIC_PROJECT_CREATED'][0],
      TriggerIntentToInputOutput['GITHUB_TRIGGER_CLASSIC_PROJECT_CREATED'][1]
    >;

    /**
     * Project Updated (Classic)
     * method for GITHUB_TRIGGER_CLASSIC_PROJECT_UPDATED
     */
    classicProjectUpdated: (
      inputs: TriggerIntentToInputOutput['GITHUB_TRIGGER_CLASSIC_PROJECT_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GITHUB_TRIGGER_CLASSIC_PROJECT_UPDATED'][0],
      TriggerIntentToInputOutput['GITHUB_TRIGGER_CLASSIC_PROJECT_UPDATED'][1]
    >;

    /**
     * Project Item Created
     * method for GITHUB_TRIGGER_PROJECT_ITEM_CREATED
     */
    projectItemCreated: (
      inputs: TriggerIntentToInputOutput['GITHUB_TRIGGER_PROJECT_ITEM_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GITHUB_TRIGGER_PROJECT_ITEM_CREATED'][0],
      TriggerIntentToInputOutput['GITHUB_TRIGGER_PROJECT_ITEM_CREATED'][1]
    >;

    /**
     * Project Item Updated
     * method for GITHUB_TRIGGER_PROJECT_ITEM_UPDATED
     */
    projectItemUpdated: (
      inputs: TriggerIntentToInputOutput['GITHUB_TRIGGER_PROJECT_ITEM_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GITHUB_TRIGGER_PROJECT_ITEM_UPDATED'][0],
      TriggerIntentToInputOutput['GITHUB_TRIGGER_PROJECT_ITEM_UPDATED'][1]
    >;
  };
};
