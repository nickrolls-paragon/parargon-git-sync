import { ConditionalInput } from '@useparagon/core/steps/library/conditional';

/**
 * Create Issue intent type
 */
type GithubCreateIssue = {
  /**
   * Owner
   * Specify the name of the account owner of the associated repository for this Issue.
   *
   * **Example**:
   * ```
   * abc
   * ```
   */
  owner: string;

  /**
   * Repository
   * Specify the name of the associated repository for this Issue.
   *
   */
  repo: string;

  /**
   * Issue Title
   * Specify the title of the issue to create.
   *
   */
  title: string;

  /**
   * Issue Body
   * Specify the body contents of the issue to create.
   *
   */
  body?: string;

  /**
   * Assignees
   * Specify the assignee(s)' GitHub login as an array of strings for this issue.
   *
   * **Example**:
   * ```
   * ["octocat"]
   * ```
   */
  assignees?: string;
};

/**
 * Update Issue  intent type
 */
type GithubUpdateIssue = {
  /**
   * Owner
   * Specify the name of the account owner of the associated repository for this Issue.
   *
   * **Example**:
   * ```
   * abc
   * ```
   */
  owner: string;

  /**
   * Repository
   * Specify the name of the associated repository for this Issue.
   *
   */
  repo: string;

  /**
   * Issue Number
   * Specify the number of the issue to update.
   *
   */
  issue_number: string;

  /**
   * Issue Title
   * Specify the title of the issue to update.
   *
   */
  title: string;

  /**
   * Issue Body
   * Specify the body contents of the issue to update.
   *
   */
  body?: string;

  /**
   * Assignees
   * Specify the assignee(s)' GitHub login as an array of strings for this issue.
   *
   * **Example**:
   * ```
   * ["octocat"]
   * ```
   */
  assignees?: string;

  /**
   * State
   * Specify the updated state of the issue.
   *
   */
  state?: 'open' | 'closed';
};

/**
 * Get Issue by Number intent type
 */
type GithubGetIssueByNumber = {
  /**
   * Owner
   * Specify the name of the account owner of the associated repository for this Issue.
   *
   * **Example**:
   * ```
   * abc
   * ```
   */
  owner: string;

  /**
   * Repository
   * Specify the name of the associated repository for this Issue.
   *
   */
  repo: string;

  /**
   * Issue Number
   * Specify the number of the issue to be fetch.
   *
   */
  issue_number: string;
};

/**
 * Lock Issue intent type
 */
type GithubLockIssue = {
  /**
   * Owner
   * Specify the name of the account owner of the associated repository for this Issue.
   *
   * **Example**:
   * ```
   * abc
   * ```
   */
  owner: string;

  /**
   * Repository
   * Specify the name of the associated repository for this Issue.
   *
   */
  repo: string;

  /**
   * Issue Number
   * Specify the number of the issue to lock.
   *
   */
  issue_number: string;

  /**
   * Lock Reason
   * Specify a reason for locking the issue or pull request conversation.
   *
   */
  lock_reason: 'off-topic' | 'too heated' | 'resolved' | 'spam';
};

/**
 * Search Issue intent type
 */
type GithubSearchIssue = {
  /**
   * Owner
   * Specify the name of the account owner of the associated repository for this Issue.
   *
   * **Example**:
   * ```
   * abc
   * ```
   */
  owner: string;

  /**
   * Repository
   * Specify the name of the associated repository for this Issue.
   *
   */
  repo: string;

  /**
   * Filter search
   * Search for issue that match specified filters.
   *
   */
  filter: ConditionalInput;
};

/**
 * Create Release intent type
 */
type GithubCreateRelease = {
  /**
   * Owner
   * Specify the name of the account owner of the associated repository for this Release.
   *
   * **Example**:
   * ```
   * abc
   * ```
   */
  owner: string;

  /**
   * Repository
   * Specify the name of the associated repository for this Release.
   *
   */
  repo: string;

  /**
   * Name
   * Specify the name of the release tag to be created.
   *
   * **Example**:
   * ```
   * v1.0.0
   * ```
   */
  tag_name: string;

  /**
   * Target
   * Specify the target of the release. This can either be a branch name or a commit SHA. Defaults to the main branch.
   *
   * **Example**:
   * ```
   * master
   * ```
   */
  target_commitish?: string;

  /**
   * Body
   * Specify a description for this release.
   *
   */
  body?: string;

  /**
   * Draft
   * Specify whether the created release should be a draft (unpublished) release.
   *
   */
  draft?: 'true' | 'false';

  /**
   * Prerelease
   * Specify whether the created release should be a prerelease.
   *
   */
  prerelease?: 'true' | 'false';

  /**
   * Discussion Category Name
   * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository.
   *
   */
  discussion_category_name?: string;

  /**
   * Release Notes
   * Specify whether the created release should automatically create release notes using the provided name and body specified.
   *
   */
  generate_release_notes?: 'true' | 'false';
};

/**
 * Update Release intent type
 */
type GithubUpdateRelease = {
  /**
   * Owner
   * Specify the name of the account owner of the associated repository for this Release.
   *
   * **Example**:
   * ```
   * abc
   * ```
   */
  owner: string;

  /**
   * Repository
   * Specify the name of the associated repository for this Release.
   *
   */
  repo: string;

  /**
   * Release ID
   * Specify the ID of the release to update.
   *
   */
  id: string;

  /**
   * Name
   * Specify the name of the release tag to be updated.
   *
   * **Example**:
   * ```
   * v1.0.0
   * ```
   */
  tag_name?: string;

  /**
   * Target
   * Specify the target of the release. This can either be a branch name or a commit SHA. Defaults to the main branch.
   *
   * **Example**:
   * ```
   * master
   * ```
   */
  target_commitish?: string;

  /**
   * Body
   * Specify a description for this release.
   *
   */
  body?: string;

  /**
   * Draft
   * Specify whether the created release should be a draft (unpublished) release.
   *
   */
  draft?: 'true' | 'false';

  /**
   * Prerelease
   * Specify whether the created release should be a prerelease.
   *
   */
  prerelease?: 'true' | 'false';

  /**
   * Discussion Category Name
   * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository.
   *
   */
  discussion_category_name?: string;

  /**
   * Release Notes
   * Specify whether the created release should automatically create release notes using the provided name and body specified.
   *
   */
  generate_release_notes?: 'true' | 'false';
};

/**
 * Get Release by ID intent type
 */
type GithubGetReleaseById = {
  /**
   * Owner
   * Specify the name of the account owner of the associated repository for this Issue.
   *
   * **Example**:
   * ```
   * abc
   * ```
   */
  owner: string;

  /**
   * Repository
   * Specify the name of the associated repository for this Issue.
   *
   */
  repo: string;

  /**
   * Release ID
   * Specify the release ID of the release to fetch.
   *
   */
  id: string;
};

/**
 * Get Release by Tag Name intent type
 */
type GithubGetReleaseByTagName = {
  /**
   * Owner
   * Specify the name of the account owner of the associated repository for this Issue.
   *
   * **Example**:
   * ```
   * abc
   * ```
   */
  owner: string;

  /**
   * Repository
   * Specify the name of the associated repository for this Issue.
   *
   */
  repo: string;

  /**
   * Name
   * Specify the tag of the release to fetch.
   *
   * **Example**:
   * ```
   * v1.0.0
   * ```
   */
  tag_name: string;
};

/**
 * Delete Release intent type
 */
type GithubDeleteRelease = {
  /**
   * Owner
   * Specify the name of the account owner of the associated repository for this Issue.
   *
   * **Example**:
   * ```
   * abc
   * ```
   */
  owner: string;

  /**
   * Repository
   * Specify the name of the associated repository for this Issue.
   *
   */
  repo: string;

  /**
   * Release ID
   * Specify the ID of the release to delete.
   *
   */
  id: string;
};

export type IntentToInputOutput = {
  /**
   * GITHUB_CREATE_ISSUE
   */
  GITHUB_CREATE_ISSUE: [GithubCreateIssue, any];

  /**
   * GITHUB_UPDATE_ISSUE
   */
  GITHUB_UPDATE_ISSUE: [GithubUpdateIssue, any];

  /**
   * GITHUB_GET_ISSUE_BY_NUMBER
   */
  GITHUB_GET_ISSUE_BY_NUMBER: [GithubGetIssueByNumber, any];

  /**
   * GITHUB_LOCK_ISSUE
   */
  GITHUB_LOCK_ISSUE: [GithubLockIssue, any];

  /**
   * GITHUB_SEARCH_ISSUE
   */
  GITHUB_SEARCH_ISSUE: [GithubSearchIssue, any];

  /**
   * GITHUB_CREATE_RELEASE
   */
  GITHUB_CREATE_RELEASE: [GithubCreateRelease, any];

  /**
   * GITHUB_UPDATE_RELEASE
   */
  GITHUB_UPDATE_RELEASE: [GithubUpdateRelease, any];

  /**
   * GITHUB_GET_RELEASE_BY_ID
   */
  GITHUB_GET_RELEASE_BY_ID: [GithubGetReleaseById, any];

  /**
   * GITHUB_GET_RELEASE_BY_TAG_NAME
   */
  GITHUB_GET_RELEASE_BY_TAG_NAME: [GithubGetReleaseByTagName, any];

  /**
   * GITHUB_DELETE_RELEASE
   */
  GITHUB_DELETE_RELEASE: [GithubDeleteRelease, any];
};
