const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for github
 */
exports.inputs = [];

/**
 * triggers for github
 */
exports.triggers = [
  {
    title: 'Issue Created',
    name: 'GITHUB_TRIGGER_ISSUE_CREATED',
    output: [],
    inputs: [
      {
        id: 'apiType',
        title: 'Trigger Type',
        type: 'ENUM',
        required: true,
        values: [
          'githubApp',
          {
            value: 'organization',
            dependentInputs: [
              {
                id: 'organization',
                title: 'Organization',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the Organization name. The name is not case sensitive.',
                placeholder: 'Paragon',
                required: true,
              },
            ],
          },
          {
            value: 'repository',
            dependentInputs: [
              {
                id: 'owner',
                title: 'Owner',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the name of the account owner of the associated repository for this Issue.',
                placeholder: 'abc',
                required: true,
              },
              {
                id: 'repo',
                title: 'Repository',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the name of the associated repository for this Issue.',
                required: true,
              },
            ],
          },
        ],
      },
    ],
  },
  {
    title: 'Issue Updated',
    name: 'GITHUB_TRIGGER_ISSUE_UPDATED',
    output: [],
    inputs: [
      {
        id: 'apiType',
        title: 'Trigger Type',
        type: 'ENUM',
        required: true,
        values: [
          'githubApp',
          {
            value: 'organization',
            dependentInputs: [
              {
                id: 'organization',
                title: 'Organization',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the Organization name. The name is not case sensitive.',
                placeholder: 'Paragon',
                required: true,
              },
            ],
          },
          {
            value: 'repository',
            dependentInputs: [
              {
                id: 'owner',
                title: 'Owner',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the name of the account owner of the associated repository for this Issue.',
                placeholder: 'abc',
                required: true,
              },
              {
                id: 'repo',
                title: 'Repository',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the name of the associated repository for this Issue.',
                required: true,
              },
            ],
          },
        ],
      },
    ],
  },
  {
    title: 'PR Created',
    name: 'GITHUB_TRIGGER_PULL_REQUEST_CREATED',
    output: [],
    inputs: [
      {
        id: 'apiType',
        title: 'Trigger Type',
        type: 'ENUM',
        required: true,
        values: [
          'githubApp',
          {
            value: 'organization',
            dependentInputs: [
              {
                id: 'organization',
                title: 'Organization',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the Organization name. The name is not case sensitive.',
                placeholder: 'Paragon',
                required: true,
              },
            ],
          },
          {
            value: 'repository',
            dependentInputs: [
              {
                id: 'owner',
                title: 'Owner',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the name of the account owner of the associated repository for this Pull Request.',
                placeholder: 'abc',
                required: true,
              },
              {
                id: 'repo',
                title: 'Repository',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the name of the associated repository for this Pull Request.',
                required: true,
              },
            ],
          },
        ],
      },
    ],
  },
  {
    title: 'PR Updated',
    name: 'GITHUB_TRIGGER_PULL_REQUEST_UPDATED',
    output: [],
    inputs: [
      {
        id: 'apiType',
        title: 'Trigger Type',
        type: 'ENUM',
        required: true,
        values: [
          'githubApp',
          {
            value: 'organization',
            dependentInputs: [
              {
                id: 'organization',
                title: 'Organization',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the Organization name. The name is not case sensitive.',
                placeholder: 'Paragon',
                required: true,
              },
            ],
          },
          {
            value: 'repository',
            dependentInputs: [
              {
                id: 'owner',
                title: 'Owner',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the name of the account owner of the associated repository for this Pull Request.',
                placeholder: 'abc',
                required: true,
              },
              {
                id: 'repo',
                title: 'Repository',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the name of the associated repository for this Pull Request.',
                required: true,
              },
            ],
          },
        ],
      },
    ],
  },
  {
    title: 'Project Created',
    name: 'GITHUB_TRIGGER_PROJECT_CREATED',
    output: [],
    inputs: [
      {
        id: 'apiType',
        title: 'Trigger Type',
        type: 'ENUM',
        required: true,
        values: [
          {
            value: 'organization',
            dependentInputs: [
              {
                id: 'organization',
                title: 'Organization',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the Organization name. The name is not case sensitive.',
                placeholder: 'Paragon',
                required: true,
              },
            ],
          },
        ],
      },
    ],
  },
  {
    title: 'Project Updated',
    name: 'GITHUB_TRIGGER_PROJECT_UPDATED',
    output: [],
    inputs: [
      {
        id: 'apiType',
        title: 'Trigger Type',
        type: 'ENUM',
        required: true,
        values: [
          {
            value: 'organization',
            dependentInputs: [
              {
                id: 'organization',
                title: 'Organization',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the Organization name. The name is not case sensitive.',
                placeholder: 'Paragon',
                required: true,
              },
            ],
          },
        ],
      },
    ],
  },
  {
    title: 'Project Created (Classic)',
    name: 'GITHUB_TRIGGER_CLASSIC_PROJECT_CREATED',
    output: [],
    inputs: [
      {
        id: 'apiType',
        title: 'Trigger Type',
        type: 'ENUM',
        required: true,
        values: [
          'githubApp',
          {
            value: 'organization',
            dependentInputs: [
              {
                id: 'organization',
                title: 'Organization',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the Organization name. The name is not case sensitive.',
                placeholder: 'Paragon',
                required: true,
              },
            ],
          },
          {
            value: 'repository',
            dependentInputs: [
              {
                id: 'owner',
                title: 'Owner',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the name of the account owner of the associated repository for this Project (Classic).',
                placeholder: 'abc',
                required: true,
              },
              {
                id: 'repo',
                title: 'Repository',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the name of the associated repository for this Project (Classic).',
                required: true,
              },
            ],
          },
        ],
      },
    ],
  },
  {
    title: 'Project Updated (Classic)',
    name: 'GITHUB_TRIGGER_CLASSIC_PROJECT_UPDATED',
    output: [],
    inputs: [
      {
        id: 'apiType',
        title: 'Trigger Type',
        type: 'ENUM',
        required: true,
        values: [
          'githubApp',
          {
            value: 'organization',
            dependentInputs: [
              {
                id: 'organization',
                title: 'Organization',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the Organization name. The name is not case sensitive.',
                placeholder: 'Paragon',
                required: true,
              },
            ],
          },
          {
            value: 'repository',
            dependentInputs: [
              {
                id: 'owner',
                title: 'Owner',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the name of the account owner of the associated repository for this Project (Classic).',
                placeholder: 'abc',
                required: true,
              },
              {
                id: 'repo',
                title: 'Repository',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the name of the associated repository for this Project (Classic).',
                required: true,
              },
            ],
          },
        ],
      },
    ],
  },
  {
    title: 'Project Item Created',
    name: 'GITHUB_TRIGGER_PROJECT_ITEM_CREATED',
    output: [],
    inputs: [
      {
        id: 'apiType',
        title: 'Trigger Type',
        type: 'ENUM',
        required: true,
        values: [
          'githubApp',
          {
            value: 'organization',
            dependentInputs: [
              {
                id: 'organization',
                title: 'Organization',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the Organization name. The name is not case sensitive.',
                placeholder: 'Paragon',
                required: true,
              },
            ],
          },
        ],
      },
    ],
  },
  {
    title: 'Project Item Updated',
    name: 'GITHUB_TRIGGER_PROJECT_ITEM_UPDATED',
    output: [],
    inputs: [
      {
        id: 'apiType',
        title: 'Trigger Type',
        type: 'ENUM',
        required: true,
        values: [
          'githubApp',
          {
            value: 'organization',
            dependentInputs: [
              {
                id: 'organization',
                title: 'Organization',
                type: 'TEXTAREA',
                subtitle:
                  'Specify the Organization name. The name is not case sensitive.',
                placeholder: 'Paragon',
                required: true,
              },
            ],
          },
        ],
      },
    ],
  },
];

/**
 * intents for github
 */
exports.intents = [
  {
    title: 'Create Issue',
    name: 'GITHUB_CREATE_ISSUE',
    output: [],
    inputs: [
      {
        id: 'owner',
        title: 'Owner',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the account owner of the associated repository for this Issue.',
        placeholder: 'abc',
        required: true,
      },
      {
        id: 'repo',
        title: 'Repository',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the associated repository for this Issue.',
        required: true,
      },
      {
        id: 'title',
        title: 'Issue Title',
        type: 'TEXTAREA',
        subtitle: 'Specify the title of the issue to create.',
        required: true,
      },
      {
        id: 'body',
        title: 'Issue Body',
        type: 'TEXTAREA',
        subtitle: 'Specify the body contents of the issue to create.',
      },
      {
        id: 'assignees',
        title: 'Assignees',
        type: 'TEXTAREA',
        subtitle:
          "Specify the assignee(s)' GitHub login as an array of strings for this issue.",
        placeholder: '["octocat"]',
      },
    ],
  },
  {
    title: 'Update Issue ',
    name: 'GITHUB_UPDATE_ISSUE',
    output: [],
    inputs: [
      {
        id: 'owner',
        title: 'Owner',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the account owner of the associated repository for this Issue.',
        placeholder: 'abc',
        required: true,
      },
      {
        id: 'repo',
        title: 'Repository',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the associated repository for this Issue.',
        required: true,
      },
      {
        id: 'issue_number',
        title: 'Issue Number',
        type: 'TEXTAREA',
        subtitle: 'Specify the number of the issue to update.',
        required: true,
      },
      {
        id: 'title',
        title: 'Issue Title',
        type: 'TEXTAREA',
        subtitle: 'Specify the title of the issue to update.',
        required: true,
      },
      {
        id: 'body',
        title: 'Issue Body',
        type: 'TEXTAREA',
        subtitle: 'Specify the body contents of the issue to update.',
      },
      {
        id: 'assignees',
        title: 'Assignees',
        type: 'TEXTAREA',
        subtitle:
          "Specify the assignee(s)' GitHub login as an array of strings for this issue.",
        placeholder: '["octocat"]',
      },
      {
        id: 'state',
        title: 'State',
        type: 'ENUM',
        subtitle: 'Specify the updated state of the issue.',
        values: ['open', 'closed'],
      },
    ],
  },
  {
    title: 'Get Issue by Number',
    name: 'GITHUB_GET_ISSUE_BY_NUMBER',
    output: [],
    inputs: [
      {
        id: 'owner',
        title: 'Owner',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the account owner of the associated repository for this Issue.',
        placeholder: 'abc',
        required: true,
      },
      {
        id: 'repo',
        title: 'Repository',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the associated repository for this Issue.',
        required: true,
      },
      {
        id: 'issue_number',
        title: 'Issue Number',
        type: 'TEXTAREA',
        subtitle: 'Specify the number of the issue to be fetch.',
        required: true,
      },
    ],
  },
  {
    title: 'Lock Issue',
    name: 'GITHUB_LOCK_ISSUE',
    output: [],
    inputs: [
      {
        id: 'owner',
        title: 'Owner',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the account owner of the associated repository for this Issue.',
        placeholder: 'abc',
        required: true,
      },
      {
        id: 'repo',
        title: 'Repository',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the associated repository for this Issue.',
        required: true,
      },
      {
        id: 'issue_number',
        title: 'Issue Number',
        type: 'TEXTAREA',
        subtitle: 'Specify the number of the issue to lock.',
        required: true,
      },
      {
        id: 'lock_reason',
        title: 'Lock Reason',
        type: 'ENUM',
        subtitle:
          'Specify a reason for locking the issue or pull request conversation.',
        required: true,
        values: ['off-topic', 'too heated', 'resolved', 'spam'],
      },
    ],
  },
  {
    title: 'Search Issue',
    name: 'GITHUB_SEARCH_ISSUE',
    output: [],
    inputs: [
      {
        id: 'owner',
        title: 'Owner',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the account owner of the associated repository for this Issue.',
        placeholder: 'abc',
        required: true,
      },
      {
        id: 'repo',
        title: 'Repository',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the associated repository for this Issue.',
        required: true,
      },
      {
        id: 'filter',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for issue that match specified filters.',
        required: true,
        supportedKeys: ['assignee', 'creator', 'mentioned', 'labels'],
        supportedOperators: ['$stringExactlyMatches'],
      },
    ],
  },
  {
    title: 'Create Release',
    name: 'GITHUB_CREATE_RELEASE',
    output: [],
    inputs: [
      {
        id: 'owner',
        title: 'Owner',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the account owner of the associated repository for this Release.',
        placeholder: 'abc',
        required: true,
      },
      {
        id: 'repo',
        title: 'Repository',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the associated repository for this Release.',
        required: true,
      },
      {
        id: 'tag_name',
        title: 'Name',
        type: 'TEXTAREA',
        subtitle: 'Specify the name of the release tag to be created.',
        placeholder: 'v1.0.0',
        required: true,
      },
      {
        id: 'target_commitish',
        title: 'Target',
        type: 'TEXTAREA',
        subtitle:
          'Specify the target of the release. This can either be a branch name or a commit SHA. Defaults to the main branch.',
        placeholder: 'master',
      },
      {
        id: 'body',
        title: 'Body',
        type: 'TEXTAREA',
        subtitle: 'Specify a description for this release.',
      },
      {
        id: 'draft',
        title: 'Draft',
        type: 'ENUM',
        subtitle:
          'Specify whether the created release should be a draft (unpublished) release.',
        values: ['true', 'false'],
      },
      {
        id: 'prerelease',
        title: 'Prerelease',
        type: 'ENUM',
        subtitle: 'Specify whether the created release should be a prerelease.',
        values: ['true', 'false'],
      },
      {
        id: 'discussion_category_name',
        title: 'Discussion Category Name',
        type: 'TEXTAREA',
        subtitle:
          'If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository.',
      },
      {
        id: 'generate_release_notes',
        title: 'Release Notes',
        type: 'ENUM',
        subtitle:
          'Specify whether the created release should automatically create release notes using the provided name and body specified.',
        values: ['true', 'false'],
      },
    ],
  },
  {
    title: 'Update Release',
    name: 'GITHUB_UPDATE_RELEASE',
    output: [],
    inputs: [
      {
        id: 'owner',
        title: 'Owner',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the account owner of the associated repository for this Release.',
        placeholder: 'abc',
        required: true,
      },
      {
        id: 'repo',
        title: 'Repository',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the associated repository for this Release.',
        required: true,
      },
      {
        id: 'id',
        title: 'Release ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the release to update.',
        required: true,
      },
      {
        id: 'tag_name',
        title: 'Name',
        type: 'TEXTAREA',
        subtitle: 'Specify the name of the release tag to be updated.',
        placeholder: 'v1.0.0',
      },
      {
        id: 'target_commitish',
        title: 'Target',
        type: 'TEXTAREA',
        subtitle:
          'Specify the target of the release. This can either be a branch name or a commit SHA. Defaults to the main branch.',
        placeholder: 'master',
      },
      {
        id: 'body',
        title: 'Body',
        type: 'TEXTAREA',
        subtitle: 'Specify a description for this release.',
      },
      {
        id: 'draft',
        title: 'Draft',
        type: 'ENUM',
        subtitle:
          'Specify whether the created release should be a draft (unpublished) release.',
        values: ['true', 'false'],
      },
      {
        id: 'prerelease',
        title: 'Prerelease',
        type: 'ENUM',
        subtitle: 'Specify whether the created release should be a prerelease.',
        values: ['true', 'false'],
      },
      {
        id: 'discussion_category_name',
        title: 'Discussion Category Name',
        type: 'TEXTAREA',
        subtitle:
          'If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository.',
      },
      {
        id: 'generate_release_notes',
        title: 'Release Notes',
        type: 'ENUM',
        subtitle:
          'Specify whether the created release should automatically create release notes using the provided name and body specified.',
        values: ['true', 'false'],
      },
    ],
  },
  {
    title: 'Get Release by ID',
    name: 'GITHUB_GET_RELEASE_BY_ID',
    output: [],
    inputs: [
      {
        id: 'owner',
        title: 'Owner',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the account owner of the associated repository for this Issue.',
        placeholder: 'abc',
        required: true,
      },
      {
        id: 'repo',
        title: 'Repository',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the associated repository for this Issue.',
        required: true,
      },
      {
        id: 'id',
        title: 'Release ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the release ID of the release to fetch.',
        required: true,
      },
    ],
  },
  {
    title: 'Get Release by Tag Name',
    name: 'GITHUB_GET_RELEASE_BY_TAG_NAME',
    output: [],
    inputs: [
      {
        id: 'owner',
        title: 'Owner',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the account owner of the associated repository for this Issue.',
        placeholder: 'abc',
        required: true,
      },
      {
        id: 'repo',
        title: 'Repository',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the associated repository for this Issue.',
        required: true,
      },
      {
        id: 'tag_name',
        title: 'Name',
        type: 'TEXTAREA',
        subtitle: 'Specify the tag of the release to fetch.',
        placeholder: 'v1.0.0',
        required: true,
      },
    ],
  },
  {
    title: 'Delete Release',
    name: 'GITHUB_DELETE_RELEASE',
    output: [],
    inputs: [
      {
        id: 'owner',
        title: 'Owner',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the account owner of the associated repository for this Issue.',
        placeholder: 'abc',
        required: true,
      },
      {
        id: 'repo',
        title: 'Repository',
        type: 'TEXTAREA',
        subtitle:
          'Specify the name of the associated repository for this Issue.',
        required: true,
      },
      {
        id: 'id',
        title: 'Release ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the release to delete.',
        required: true,
      },
    ],
  },
];

/**
 * integration class for github
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'github',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Issue
     * method for GITHUB_CREATE_ISSUE
     */
    createIssue: (inputs, options) => {
      return new ActionStep({
        intent: 'GITHUB_CREATE_ISSUE',
        actionType: 'github',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Issue
     * method for GITHUB_UPDATE_ISSUE
     */
    updateIssue: (inputs, options) => {
      return new ActionStep({
        intent: 'GITHUB_UPDATE_ISSUE',
        actionType: 'github',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Issue by Number
     * method for GITHUB_GET_ISSUE_BY_NUMBER
     */
    getIssueByNumber: (inputs, options) => {
      return new ActionStep({
        intent: 'GITHUB_GET_ISSUE_BY_NUMBER',
        actionType: 'github',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Lock Issue
     * method for GITHUB_LOCK_ISSUE
     */
    lockIssue: (inputs, options) => {
      return new ActionStep({
        intent: 'GITHUB_LOCK_ISSUE',
        actionType: 'github',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Issue
     * method for GITHUB_SEARCH_ISSUE
     */
    searchIssue: (inputs, options) => {
      return new ActionStep({
        intent: 'GITHUB_SEARCH_ISSUE',
        actionType: 'github',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Release
     * method for GITHUB_CREATE_RELEASE
     */
    createRelease: (inputs, options) => {
      return new ActionStep({
        intent: 'GITHUB_CREATE_RELEASE',
        actionType: 'github',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Release
     * method for GITHUB_UPDATE_RELEASE
     */
    updateRelease: (inputs, options) => {
      return new ActionStep({
        intent: 'GITHUB_UPDATE_RELEASE',
        actionType: 'github',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Release by ID
     * method for GITHUB_GET_RELEASE_BY_ID
     */
    getReleaseById: (inputs, options) => {
      return new ActionStep({
        intent: 'GITHUB_GET_RELEASE_BY_ID',
        actionType: 'github',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Release by Tag Name
     * method for GITHUB_GET_RELEASE_BY_TAG_NAME
     */
    getReleaseByTagName: (inputs, options) => {
      return new ActionStep({
        intent: 'GITHUB_GET_RELEASE_BY_TAG_NAME',
        actionType: 'github',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Release
     * method for GITHUB_DELETE_RELEASE
     */
    deleteRelease: (inputs, options) => {
      return new ActionStep({
        intent: 'GITHUB_DELETE_RELEASE',
        actionType: 'github',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Issue Created
     * method for GITHUB_TRIGGER_ISSUE_CREATED
     */
    issueCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GITHUB_TRIGGER_ISSUE_CREATED',
        actionType: 'github',
        parameters: inputs,
      });
    },
    /**
     * Issue Updated
     * method for GITHUB_TRIGGER_ISSUE_UPDATED
     */
    issueUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GITHUB_TRIGGER_ISSUE_UPDATED',
        actionType: 'github',
        parameters: inputs,
      });
    },
    /**
     * PR Created
     * method for GITHUB_TRIGGER_PULL_REQUEST_CREATED
     */
    pullRequestCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GITHUB_TRIGGER_PULL_REQUEST_CREATED',
        actionType: 'github',
        parameters: inputs,
      });
    },
    /**
     * PR Updated
     * method for GITHUB_TRIGGER_PULL_REQUEST_UPDATED
     */
    pullRequestUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GITHUB_TRIGGER_PULL_REQUEST_UPDATED',
        actionType: 'github',
        parameters: inputs,
      });
    },
    /**
     * Project Created
     * method for GITHUB_TRIGGER_PROJECT_CREATED
     */
    projectCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GITHUB_TRIGGER_PROJECT_CREATED',
        actionType: 'github',
        parameters: inputs,
      });
    },
    /**
     * Project Updated
     * method for GITHUB_TRIGGER_PROJECT_UPDATED
     */
    projectUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GITHUB_TRIGGER_PROJECT_UPDATED',
        actionType: 'github',
        parameters: inputs,
      });
    },
    /**
     * Project Created (Classic)
     * method for GITHUB_TRIGGER_CLASSIC_PROJECT_CREATED
     */
    classicProjectCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GITHUB_TRIGGER_CLASSIC_PROJECT_CREATED',
        actionType: 'github',
        parameters: inputs,
      });
    },
    /**
     * Project Updated (Classic)
     * method for GITHUB_TRIGGER_CLASSIC_PROJECT_UPDATED
     */
    classicProjectUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GITHUB_TRIGGER_CLASSIC_PROJECT_UPDATED',
        actionType: 'github',
        parameters: inputs,
      });
    },
    /**
     * Project Item Created
     * method for GITHUB_TRIGGER_PROJECT_ITEM_CREATED
     */
    projectItemCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GITHUB_TRIGGER_PROJECT_ITEM_CREATED',
        actionType: 'github',
        parameters: inputs,
      });
    },
    /**
     * Project Item Updated
     * method for GITHUB_TRIGGER_PROJECT_ITEM_UPDATED
     */
    projectItemUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GITHUB_TRIGGER_PROJECT_ITEM_UPDATED',
        actionType: 'github',
        parameters: inputs,
      });
    },
  },
};
