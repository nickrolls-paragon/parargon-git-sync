const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for sharepoint
 */
exports.inputs = [
  {
    id: 'listCacheKey',
    title: 'List',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'comboColumnFields',
    title: 'Column',
    type: 'COMBO_INPUT_DATA_SOURCE',
    mainInputSource: {
      id: 'listCacheKey',
      title: 'List',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    dependentInputSource: {
      id: 'columnCacheKey',
      title: 'Column',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
  {
    id: 'customItemMapping',
    title: 'Custom Item Mapping',
    type: 'FIELD_MAPPER_DATA_SOURCE',
    fieldSource: {
      id: 'columnCacheKey',
      title: 'Column',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    recordSource: {
      id: 'listCacheKey',
      title: 'List',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
];

/**
 * triggers for sharepoint
 */
exports.triggers = [
  {
    title: 'Item Created',
    name: 'SHAREPOINT_TRIGGER_ITEM_CREATED',
    output: [],
    inputs: [
      {
        id: 'listId',
        title: 'List ID',
        type: 'TEXTAREA',
        subtitle:
          'The List ID of the item in Sharepoint. Use Connect Portal User Settings to allow users to select a List.',
        placeholder: '22e03ef3-6ef4-424d-a1d3-92a337807c30',
        required: true,
      },
    ],
  },
  {
    title: 'Item Updated',
    name: 'SHAREPOINT_TRIGGER_ITEM_UPDATED',
    output: [],
    inputs: [
      {
        id: 'listId',
        title: 'List ID',
        type: 'TEXTAREA',
        subtitle:
          'The List ID of the item in Sharepoint. Use Connect Portal User Settings to allow users to select a List.',
        placeholder: '22e03ef3-6ef4-424d-a1d3-92a337807c30',
        required: true,
      },
    ],
  },
  {
    title: 'File Deleted',
    name: 'SHAREPOINT_TRIGGER_FILE_DELETED',
    output: [],
    inputs: [],
  },
  {
    title: 'Page Modified',
    name: 'SHAREPOINT_TRIGGER_PAGE_MODIFIED',
    output: [],
    inputs: [],
  },
];

/**
 * intents for sharepoint
 */
exports.intents = [
  {
    title: 'Create Item',
    name: 'SHAREPOINT_CREATE_ITEM',
    output: [],
    inputs: [
      {
        id: 'title',
        title: 'Title',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'listId',
        title: 'List ID',
        type: 'TEXTAREA',
        subtitle:
          'The List ID to create the item in. Use Connect Portal User Settings to allow users to select a List.',
        placeholder: '22e03ef3-6ef4-424d-a1d3-92a337807c30',
        required: true,
      },
      {
        id: 'fields',
        title: 'Fields',
        type: 'CODE',
        subtitle:
          'The column values of the new item.  Use Connect Portal Workflow Settings to allow users to select which item columns to update.',
      },
    ],
  },
  {
    title: 'Update Item',
    name: 'SHAREPOINT_UPDATE_ITEM',
    output: [],
    inputs: [
      {
        id: 'itemId',
        title: 'Item ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the item to update.',
        required: true,
      },
      {
        id: 'title',
        title: 'Title',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'listId',
        title: 'List ID',
        type: 'TEXTAREA',
        subtitle:
          'The List ID to update the item in. Use Connect Portal User Settings to allow users to select a List.',
        placeholder: '22e03ef3-6ef4-424d-a1d3-92a337807c30',
        required: true,
      },
      {
        id: 'fields',
        title: 'Fields',
        type: 'CODE',
        subtitle:
          'The column values of the new item.  Use Connect Portal Workflow Settings to allow users to select which item columns to update.',
      },
    ],
  },
  {
    title: 'Get Item by ID',
    name: 'SHAREPOINT_GET_ITEM_BY_ID',
    output: [],
    inputs: [
      {
        id: 'itemId',
        title: 'Item ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the item to get.',
        required: true,
      },
      {
        id: 'listId',
        title: 'List ID',
        type: 'TEXTAREA',
        subtitle:
          'The List ID to get the item from. Use Connect Portal User Settings to allow users to select a List.',
        placeholder: '22e03ef3-6ef4-424d-a1d3-92a337807c30',
        required: true,
      },
    ],
  },
  {
    title: 'Get Items in a List',
    name: 'SHAREPOINT_GET_ITEMS_IN_A_LIST',
    output: [],
    inputs: [
      {
        id: 'listId',
        title: 'List ID',
        type: 'TEXTAREA',
        subtitle:
          'The List ID to get items from. Use Connect Portal User Settings to allow users to select a List.',
        placeholder: '22e03ef3-6ef4-424d-a1d3-92a337807c30',
        required: true,
      },
      {
        id: 'itemsFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for items that match specified filters.',
        supportedKeys: [
          'fields/Title',
          'fields/Modified',
          'fields/Created',
          'fields/AuthorLookupId',
          'fields/EditorLookupId',
          'fields/LinkTitle',
        ],
        supportedOperators: [
          '$stringExactlyMatches',
          '$numberEquals',
          '$stringDoesNotExactlyMatch',
          '$numberGreaterThan',
          '$numberLessThan',
          '$numberGreaterThanOrEqualTo',
          '$numberLessThanOrEqualTo',
          '$dateTimeAfter',
          '$dateTimeBefore',
          '$dateTimeEquals',
        ],
      },
    ],
  },
  {
    title: 'Delete Item',
    name: 'SHAREPOINT_DELETE_ITEM',
    output: [],
    inputs: [
      {
        id: 'itemId',
        title: 'Item ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the item to delete.',
        required: true,
      },
      {
        id: 'listId',
        title: 'List ID',
        type: 'TEXTAREA',
        subtitle:
          'The List ID to delete the item from. Use Connect Portal User Settings to allow users to select a List.',
        placeholder: '22e03ef3-6ef4-424d-a1d3-92a337807c30',
        required: true,
      },
    ],
  },
  {
    title: 'Create List',
    name: 'SHAREPOINT_CREATE_LIST',
    output: [],
    inputs: [
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'description',
        title: 'Description',
        type: 'TEXTAREA',
        subtitle:
          'Description or acceptance criteria for this epic to be considered complete.',
      },
    ],
  },
  {
    title: 'Get List by ID',
    name: 'SHAREPOINT_GET_LIST_BY_ID',
    output: [],
    inputs: [
      {
        id: 'listId',
        title: 'List ID',
        type: 'TEXTAREA',
        subtitle:
          'The ID of the list to get. Use Connect Portal User Settings to allow users to select a List.',
        placeholder: '22e03ef3-6ef4-424d-a1d3-92a337807c30',
        required: true,
      },
    ],
  },
  {
    title: 'Get Lists',
    name: 'SHAREPOINT_GET_LISTS',
    output: [],
    inputs: [
      {
        id: 'listsFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for items that match specified filters.',
        supportedKeys: ['displayName'],
        supportedOperators: ['$stringExactlyMatches'],
      },
    ],
  },
  {
    title: 'Create List column',
    name: 'SHAREPOINT_CREATE_LIST_COLUMN',
    output: [],
    inputs: [
      {
        id: 'listId',
        title: 'List ID',
        type: 'TEXTAREA',
        subtitle:
          'The List ID to create the column in. Use Connect Portal User Settings to allow users to select a List.',
        placeholder: '22e03ef3-6ef4-424d-a1d3-92a337807c30',
        required: true,
      },
      {
        id: 'dataType',
        title: 'Data Type',
        type: 'EDITABLE_ENUM',
        subtitle: 'Determines what type of data the column stores',
        required: true,
        values: [
          'boolean',
          {
            value: 'choice',
            dependentInputs: [
              {
                id: 'allowTextEntry',
                title: 'Allow Text Entry',
                type: 'BOOLEAN_INPUT',
                subtitle:
                  'If true, allows custom values that arenâ€™t in the configured choices.',
                defaultValue: false,
              },
              {
                id: 'choices',
                title: 'Choices',
                type: 'CODE',
                subtitle: 'The list of values available for this column.',
                placeholder: '["red", "blue", "green"]',
              },
              {
                id: 'displayAs',
                title: 'Display As',
                type: 'ENUM',
                subtitle: 'How the choices are to be presented in the UX.',
                values: ['Checkboxes', 'Dropdown Menu', 'Radio Buttons'],
              },
            ],
          },
          {
            value: 'dateTime',
            dependentInputs: [
              {
                id: 'displayAs',
                title: 'Display As',
                type: 'ENUM',
                subtitle: 'How the choices are to be presented in the UX.',
                values: ['Default', 'Friendly', 'Standard'],
              },
              {
                id: 'format',
                title: 'Format',
                type: 'ENUM',
                subtitle:
                  'Indicates whether the value should be presented as a date only or a date and time.',
                values: ['Date Only', 'Date Time'],
              },
            ],
          },
          {
            value: 'number',
            dependentInputs: [
              {
                id: 'displayAs',
                title: 'Display As',
                type: 'ENUM',
                subtitle: 'How the choices are to be presented in the UX.',
                values: ['Number', 'Percentage'],
              },
              {
                id: 'maximum',
                title: 'Maximum',
                type: 'TEXTAREA',
                subtitle: 'The maximum permitted value.',
              },
              {
                id: 'minimum',
                title: 'Minimum',
                type: 'TEXTAREA',
                subtitle: 'The minimum permitted value.',
              },
            ],
          },
          {
            value: 'text',
            dependentInputs: [
              {
                id: 'linesForEditing',
                title: 'Lines for Editing',
                type: 'TEXTAREA',
                subtitle: 'The size of the text box.',
              },
              {
                id: 'maxLength',
                title: 'Max Length',
                type: 'TEXTAREA',
                subtitle: 'The maximum number of characters for the value.',
              },
              {
                id: 'textType',
                title: 'Text Type',
                type: 'ENUM',
                required: true,
                defaultValue: 'Plain Text',
                values: ['Plain Text', 'Rich Text'],
              },
              {
                id: 'allowMultipleLines',
                title: 'Allow Multiple Lines',
                type: 'BOOLEAN_INPUT',
                subtitle: 'Whether to allow multiple lines of text.',
                defaultValue: true,
              },
            ],
          },
        ],
      },
      {
        id: 'displayName',
        title: 'Display Name',
        type: 'TEXTAREA',
        subtitle: 'The user-facing name of the column.',
        required: true,
      },
      {
        id: 'apiName',
        title: 'Api Name',
        type: 'TEXTAREA',
        subtitle:
          'The API-facing name of the column as it appears in the fields on a List Item.',
        required: true,
      },
      {
        id: 'description',
        title: 'Description',
        type: 'TEXTAREA',
        subtitle:
          'Description or acceptance criteria for this epic to be considered complete.',
      },
      {
        id: 'defaultValue',
        title: 'Default Value',
        type: 'TEXTAREA',
        subtitle: 'The default value for this column.',
      },
      {
        id: 'hidden',
        title: 'Hidden',
        type: 'BOOLEAN_INPUT',
        defaultValue: false,
      },
      {
        id: 'readOnly',
        title: 'Read-only',
        type: 'BOOLEAN_INPUT',
        defaultValue: false,
      },
    ],
  },
  {
    title: 'Get List columns',
    name: 'SHAREPOINT_GET_LIST_COLUMNS',
    output: [],
    inputs: [
      {
        id: 'listId',
        title: 'List ID',
        type: 'TEXTAREA',
        subtitle:
          'The ID of the list to get. Use Connect Portal User Settings to allow users to select a List.',
        placeholder: '22e03ef3-6ef4-424d-a1d3-92a337807c30',
        required: true,
      },
    ],
  },
];

/**
 * integration class for sharepoint
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'sharepoint',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Item
     * method for SHAREPOINT_CREATE_ITEM
     */
    createItem: (inputs, options) => {
      return new ActionStep({
        intent: 'SHAREPOINT_CREATE_ITEM',
        actionType: 'sharepoint',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Item
     * method for SHAREPOINT_UPDATE_ITEM
     */
    updateItem: (inputs, options) => {
      return new ActionStep({
        intent: 'SHAREPOINT_UPDATE_ITEM',
        actionType: 'sharepoint',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Item by ID
     * method for SHAREPOINT_GET_ITEM_BY_ID
     */
    getItemById: (inputs, options) => {
      return new ActionStep({
        intent: 'SHAREPOINT_GET_ITEM_BY_ID',
        actionType: 'sharepoint',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Items in a List
     * method for SHAREPOINT_GET_ITEMS_IN_A_LIST
     */
    getItemsInAList: (inputs, options) => {
      return new ActionStep({
        intent: 'SHAREPOINT_GET_ITEMS_IN_A_LIST',
        actionType: 'sharepoint',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Item
     * method for SHAREPOINT_DELETE_ITEM
     */
    deleteItem: (inputs, options) => {
      return new ActionStep({
        intent: 'SHAREPOINT_DELETE_ITEM',
        actionType: 'sharepoint',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create List
     * method for SHAREPOINT_CREATE_LIST
     */
    createList: (inputs, options) => {
      return new ActionStep({
        intent: 'SHAREPOINT_CREATE_LIST',
        actionType: 'sharepoint',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get List by ID
     * method for SHAREPOINT_GET_LIST_BY_ID
     */
    getListById: (inputs, options) => {
      return new ActionStep({
        intent: 'SHAREPOINT_GET_LIST_BY_ID',
        actionType: 'sharepoint',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Lists
     * method for SHAREPOINT_GET_LISTS
     */
    getLists: (inputs, options) => {
      return new ActionStep({
        intent: 'SHAREPOINT_GET_LISTS',
        actionType: 'sharepoint',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create List column
     * method for SHAREPOINT_CREATE_LIST_COLUMN
     */
    createListColumn: (inputs, options) => {
      return new ActionStep({
        intent: 'SHAREPOINT_CREATE_LIST_COLUMN',
        actionType: 'sharepoint',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get List columns
     * method for SHAREPOINT_GET_LIST_COLUMNS
     */
    getListColumns: (inputs, options) => {
      return new ActionStep({
        intent: 'SHAREPOINT_GET_LIST_COLUMNS',
        actionType: 'sharepoint',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Item Created
     * method for SHAREPOINT_TRIGGER_ITEM_CREATED
     */
    itemCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHAREPOINT_TRIGGER_ITEM_CREATED',
        actionType: 'sharepoint',
        parameters: inputs,
      });
    },
    /**
     * Item Updated
     * method for SHAREPOINT_TRIGGER_ITEM_UPDATED
     */
    itemUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHAREPOINT_TRIGGER_ITEM_UPDATED',
        actionType: 'sharepoint',
        parameters: inputs,
      });
    },
    /**
     * File Deleted
     * method for SHAREPOINT_TRIGGER_FILE_DELETED
     */
    fileDeleted: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHAREPOINT_TRIGGER_FILE_DELETED',
        actionType: 'sharepoint',
        parameters: inputs,
      });
    },
    /**
     * Page Modified
     * method for SHAREPOINT_TRIGGER_PAGE_MODIFIED
     */
    pageModified: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHAREPOINT_TRIGGER_PAGE_MODIFIED',
        actionType: 'sharepoint',
        parameters: inputs,
      });
    },
  },
};
