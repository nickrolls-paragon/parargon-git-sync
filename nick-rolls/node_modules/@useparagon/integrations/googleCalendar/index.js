const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for googleCalendar
 */
exports.inputs = [
  {
    id: 'calendars',
    title: 'Calendar',
    type: 'DYNAMIC_DATA_SOURCE',
  },
];

/**
 * triggers for googleCalendar
 */
exports.triggers = [
  {
    title: 'New Event (Legacy)',
    name: 'GOOGLE_CALENDAR_TRIGGER_EVENT_CREATED',
    output: [],
    inputs: [
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a calendar. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
      {
        id: 'collapseRecurringEventUpdates',
        title: 'Collapse recurring event updates',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If on, recurring event updates will not be expanded into multiple instances of the event. ',
        defaultValue: true,
      },
    ],
  },
  {
    title: 'Event Updated (Legacy)',
    name: 'GOOGLE_CALENDAR_TRIGGER_EVENT_UPDATED',
    output: [],
    inputs: [
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a calendar. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
      {
        id: 'collapseRecurringEventUpdates',
        title: 'Collapse recurring event updates',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If on, recurring event updates will not be expanded into multiple instances of the event. ',
        defaultValue: true,
      },
      {
        id: 'shouldTriggerOnPastEventUpdates',
        title: 'Trigger on past event updates',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If on, this workflow will trigger when events that have already passed are updated. This can add significant event volume to this workflow.',
        defaultValue: false,
      },
    ],
  },
  {
    title: 'Event Cancelled (Legacy)',
    name: 'GOOGLE_CALENDAR_TRIGGER_EVENT_CANCELLED',
    output: [],
    inputs: [
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a calendar. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
      {
        id: 'collapseRecurringEventUpdates',
        title: 'Collapse recurring event updates',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If on, recurring event updates will not be expanded into multiple instances of the event. ',
        defaultValue: true,
      },
      {
        id: 'shouldTriggerOnPastEventUpdates',
        title: 'Trigger on past event updates',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If on, this workflow will trigger when events that have already passed are cancelled. This can add significant event volume to this workflow.',
        defaultValue: false,
      },
    ],
  },
  {
    title: 'Event Started',
    name: 'GOOGLE_CALENDAR_TRIGGER_EVENT_STARTED',
    output: [],
    inputs: [
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a calendar. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
      {
        id: 'timeBefore',
        title: 'Time Before',
        type: 'TIME_CONSTRAINT_INPUT',
        subtitle: 'How long before an event starts this should be triggered.',
      },
    ],
  },
  {
    title: 'Event Ended',
    name: 'GOOGLE_CALENDAR_TRIGGER_EVENT_ENDED',
    output: [],
    inputs: [
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a calendar. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
    ],
  },
  {
    title: 'New Event',
    name: 'GOOGLE_CALENDAR_WEBHOOK_TRIGGER_EVENT_CREATED',
    output: [],
    inputs: [
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a calendar. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
      {
        id: 'collapseRecurringEventUpdates',
        title: 'Collapse recurring event updates',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If on, recurring event updates will not be expanded into multiple instances of the event. ',
        defaultValue: true,
      },
    ],
  },
  {
    title: 'Event Updated',
    name: 'GOOGLE_CALENDAR_WEBHOOK_TRIGGER_EVENT_UPDATED',
    output: [],
    inputs: [
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a calendar. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
      {
        id: 'collapseRecurringEventUpdates',
        title: 'Collapse recurring event updates',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If on, recurring event updates will not be expanded into multiple instances of the event. ',
        defaultValue: true,
      },
      {
        id: 'shouldTriggerOnPastEventUpdates',
        title: 'Trigger on past event updates',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If on, this workflow will trigger when events that have already passed are updated. This can add significant event volume to this workflow.',
        defaultValue: false,
      },
    ],
  },
  {
    title: 'Event Cancelled',
    name: 'GOOGLE_CALENDAR_WEBHOOK_TRIGGER_EVENT_CANCELLED',
    output: [],
    inputs: [
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a calendar. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
      {
        id: 'collapseRecurringEventUpdates',
        title: 'Collapse recurring event updates',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If on, recurring event updates will not be expanded into multiple instances of the event. ',
        defaultValue: true,
      },
      {
        id: 'shouldTriggerOnPastEventUpdates',
        title: 'Trigger on past event updates',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If on, this workflow will trigger when events that have already passed are cancelled. This can add significant event volume to this workflow.',
        defaultValue: false,
      },
    ],
  },
];

/**
 * intents for googleCalendar
 */
exports.intents = [
  {
    title: 'Create event',
    name: 'GOOGLE_CALENDAR_CREATE_EVENT',
    output: [],
    inputs: [
      {
        id: 'eventName',
        title: 'Event name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'startTime',
        title: 'Start time',
        type: 'TEXTAREA',
        subtitle: 'Accepts Unix timestamp or ISO8601 date formats.',
        required: true,
      },
      {
        id: 'endTime',
        title: 'End time',
        type: 'TEXTAREA',
        subtitle: 'Defaults to one hour after the start time if left blank.',
      },
      {
        id: 'calendar',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which calendar the event will be added to. Defaults to the user’s primary calendar if left blank.',
      },
      {
        id: 'attendees',
        title: 'Attendees',
        type: 'TEXTAREA',
        subtitle:
          'Accepts an array of email addresses or email addresses separated by commas.',
      },
      {
        id: 'eventLocation',
        title: 'Event location',
        type: 'TEXTAREA',
      },
      {
        id: 'eventDescription',
        title: 'Event description',
        type: 'TEXTAREA',
      },
      {
        id: 'eventId',
        title: 'Event ID',
        type: 'TEXTAREA',
        subtitle:
          'An ID from your application to associate this event with. You can use this ID to sync updates to this event later.',
      },
      {
        id: 'includeMeetLink',
        title: 'Include Google Meet link?',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Automatically creates Google Meet conference link for this event.',
        defaultValue: false,
      },
    ],
  },
  {
    title: 'Update event',
    name: 'GOOGLE_CALENDAR_UPDATE_EVENT',
    output: [],
    inputs: [
      {
        id: 'eventId',
        title: 'Event ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the event to update.',
        required: true,
      },
      {
        id: 'eventName',
        title: 'Event name',
        type: 'TEXTAREA',
      },
      {
        id: 'startTime',
        title: 'Start time',
        type: 'TEXTAREA',
        subtitle: 'Accepts Unix timestamp or ISO8601 date formats.',
      },
      {
        id: 'endTime',
        title: 'End time',
        type: 'TEXTAREA',
        subtitle: 'Defaults to one hour after the start time if left blank.',
      },
      {
        id: 'calendar',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which calendar the event will be added to. Defaults to the user’s primary calendar if left blank.',
      },
      {
        id: 'attendees',
        title: 'Attendees',
        type: 'TEXTAREA',
        subtitle:
          'Accepts an array of email addresses or email addresses separated by commas.',
      },
      {
        id: 'eventLocation',
        title: 'Event location',
        type: 'TEXTAREA',
      },
      {
        id: 'eventDescription',
        title: 'Event description',
        type: 'TEXTAREA',
      },
    ],
  },
  {
    title: 'List events',
    name: 'GOOGLE_CALENDAR_LIST_EVENTS',
    output: [],
    inputs: [
      {
        id: 'calendar',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which calendar the event will be added to. Defaults to the user’s primary calendar if left blank.',
      },
      {
        id: 'after',
        title: 'After',
        type: 'TEXTAREA',
        subtitle:
          'Filters events that start after the provided date (Unix in milliseconds or ISO timestamp).',
        placeholder: '2025-04-12T10:00:00Z or 1712908800000',
      },
      {
        id: 'before',
        title: 'Before',
        type: 'TEXTAREA',
        subtitle:
          'Filters events that end before the provided date (Unix in milliseconds or ISO timestamp).',
        placeholder: '2025-04-12T10:00:00Z or 1712908800000',
      },
    ],
  },
  {
    title: 'Get event by ID',
    name: 'GOOGLE_CALENDAR_GET_EVENT_BY_ID',
    output: [],
    inputs: [
      {
        id: 'eventId',
        title: 'Event ID',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'calendar',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which calendar the event will be added to. Defaults to the user’s primary calendar if left blank.',
      },
    ],
  },
  {
    title: 'Delete event',
    name: 'GOOGLE_CALENDAR_DELETE_EVENT',
    output: [],
    inputs: [
      {
        id: 'eventId',
        title: 'Event ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the calendar event to be deleted.',
        required: true,
      },
      {
        id: 'calendar',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which calendar the event will be added to. Defaults to the user’s primary calendar if left blank.',
      },
    ],
  },
  {
    title: 'Get contacts',
    name: 'GOOGLE_CALENDAR_GET_CONTACTS',
    output: [],
    inputs: [],
  },
  {
    title: 'Search contacts',
    name: 'GOOGLE_CALENDAR_SEARCH_CONTACTS',
    output: [],
    inputs: [
      {
        id: 'query',
        title: 'Search query to search contacts',
        type: 'TEXTAREA',
      },
    ],
  },
  {
    title: 'List directory people',
    name: 'GOOGLE_CALENDAR_LIST_DIRECTORY_PEOPLE',
    output: [],
    inputs: [],
  },
  {
    title: 'Search directory people',
    name: 'GOOGLE_CALENDAR_SEARCH_DIRECTORY_PEOPLE',
    output: [],
    inputs: [
      {
        id: 'query',
        title: 'Search query to search contacts',
        type: 'TEXTAREA',
        required: true,
      },
    ],
  },
  {
    title: 'List other contacts',
    name: 'GOOGLE_CALENDAR_LIST_OTHER_CONTACTS',
    output: [],
    inputs: [],
  },
  {
    title: 'Search other contacts',
    name: 'GOOGLE_CALENDAR_SEARCH_OTHER_CONTACTS',
    output: [],
    inputs: [
      {
        id: 'query',
        title: 'Search query to search contacts',
        type: 'TEXTAREA',
      },
    ],
  },
  {
    title: 'Get availability',
    name: 'GOOGLE_CALENDAR_GET_AVAILABILITY',
    output: [],
    inputs: [
      {
        id: 'timeMin',
        title: 'The start of the interval. In ISO format',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'timeMax',
        title: 'The end of the interval. In ISO format',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'timeZone',
        title: 'Time zone used in the response. Optional. The default is UTC.',
        type: 'TEXTAREA',
      },
      {
        id: 'items',
        title:
          'List of calendars and/or groups to query. Defaults to the user default calendar.',
        type: 'CODE',
        placeholder:
          '[\n                  {\n                    "id": "calendar_group_id"/ The calendar or group ID\n                  }\n                ]',
      },
    ],
  },
];

/**
 * integration class for googleCalendar
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'googleCalendar',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create event
     * method for GOOGLE_CALENDAR_CREATE_EVENT
     */
    googleCalendarCreateEvent: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_CALENDAR_CREATE_EVENT',
        actionType: 'googleCalendar',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update event
     * method for GOOGLE_CALENDAR_UPDATE_EVENT
     */
    googleCalendarUpdateEvent: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_CALENDAR_UPDATE_EVENT',
        actionType: 'googleCalendar',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * List events
     * method for GOOGLE_CALENDAR_LIST_EVENTS
     */
    googleCalendarListEvents: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_CALENDAR_LIST_EVENTS',
        actionType: 'googleCalendar',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get event by ID
     * method for GOOGLE_CALENDAR_GET_EVENT_BY_ID
     */
    googleCalendarGetEventById: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_CALENDAR_GET_EVENT_BY_ID',
        actionType: 'googleCalendar',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete event
     * method for GOOGLE_CALENDAR_DELETE_EVENT
     */
    googleCalendarDeleteEvent: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_CALENDAR_DELETE_EVENT',
        actionType: 'googleCalendar',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get contacts
     * method for GOOGLE_CALENDAR_GET_CONTACTS
     */
    googleCalendarGetContacts: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_CALENDAR_GET_CONTACTS',
        actionType: 'googleCalendar',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search contacts
     * method for GOOGLE_CALENDAR_SEARCH_CONTACTS
     */
    googleCalendarSearchContacts: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_CALENDAR_SEARCH_CONTACTS',
        actionType: 'googleCalendar',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * List directory people
     * method for GOOGLE_CALENDAR_LIST_DIRECTORY_PEOPLE
     */
    googleCalendarListDirectoryPeople: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_CALENDAR_LIST_DIRECTORY_PEOPLE',
        actionType: 'googleCalendar',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search directory people
     * method for GOOGLE_CALENDAR_SEARCH_DIRECTORY_PEOPLE
     */
    googleCalendarSearchDirectoryPeople: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_CALENDAR_SEARCH_DIRECTORY_PEOPLE',
        actionType: 'googleCalendar',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * List other contacts
     * method for GOOGLE_CALENDAR_LIST_OTHER_CONTACTS
     */
    googleCalendarListOtherContacts: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_CALENDAR_LIST_OTHER_CONTACTS',
        actionType: 'googleCalendar',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search other contacts
     * method for GOOGLE_CALENDAR_SEARCH_OTHER_CONTACTS
     */
    googleCalendarSearchOtherContacts: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_CALENDAR_SEARCH_OTHER_CONTACTS',
        actionType: 'googleCalendar',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get availability
     * method for GOOGLE_CALENDAR_GET_AVAILABILITY
     */
    googleCalendarGetAvailability: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_CALENDAR_GET_AVAILABILITY',
        actionType: 'googleCalendar',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Event (Legacy)
     * method for GOOGLE_CALENDAR_TRIGGER_EVENT_CREATED
     */
    googleCalendarTriggerEventCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_CALENDAR_TRIGGER_EVENT_CREATED',
        actionType: 'googleCalendar',
        parameters: inputs,
      });
    },
    /**
     * Event Updated (Legacy)
     * method for GOOGLE_CALENDAR_TRIGGER_EVENT_UPDATED
     */
    googleCalendarTriggerEventUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_CALENDAR_TRIGGER_EVENT_UPDATED',
        actionType: 'googleCalendar',
        parameters: inputs,
      });
    },
    /**
     * Event Cancelled (Legacy)
     * method for GOOGLE_CALENDAR_TRIGGER_EVENT_CANCELLED
     */
    googleCalendarTriggerEventCancelled: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_CALENDAR_TRIGGER_EVENT_CANCELLED',
        actionType: 'googleCalendar',
        parameters: inputs,
      });
    },
    /**
     * Event Started
     * method for GOOGLE_CALENDAR_TRIGGER_EVENT_STARTED
     */
    googleCalendarTriggerEventStarted: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_CALENDAR_TRIGGER_EVENT_STARTED',
        actionType: 'googleCalendar',
        parameters: inputs,
      });
    },
    /**
     * Event Ended
     * method for GOOGLE_CALENDAR_TRIGGER_EVENT_ENDED
     */
    googleCalendarTriggerEventEnded: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_CALENDAR_TRIGGER_EVENT_ENDED',
        actionType: 'googleCalendar',
        parameters: inputs,
      });
    },
    /**
     * New Event
     * method for GOOGLE_CALENDAR_WEBHOOK_TRIGGER_EVENT_CREATED
     */
    googleCalendarWebhookTriggerEventCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_CALENDAR_WEBHOOK_TRIGGER_EVENT_CREATED',
        actionType: 'googleCalendar',
        parameters: inputs,
      });
    },
    /**
     * Event Updated
     * method for GOOGLE_CALENDAR_WEBHOOK_TRIGGER_EVENT_UPDATED
     */
    googleCalendarWebhookTriggerEventUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_CALENDAR_WEBHOOK_TRIGGER_EVENT_UPDATED',
        actionType: 'googleCalendar',
        parameters: inputs,
      });
    },
    /**
     * Event Cancelled
     * method for GOOGLE_CALENDAR_WEBHOOK_TRIGGER_EVENT_CANCELLED
     */
    googleCalendarWebhookTriggerEventCancelled: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_CALENDAR_WEBHOOK_TRIGGER_EVENT_CANCELLED',
        actionType: 'googleCalendar',
        parameters: inputs,
      });
    },
  },
};
