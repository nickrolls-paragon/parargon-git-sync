import { ActionStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
  UserDefinedComboInputOptions,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';

type IAzuredevopsIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type:
        | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'boolean'
        | 'password'
        | 'project'
        | 'area'
        | 'iteration';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | ({
      type: 'states';
    } & UserDefinedComboInputOptions)
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
  project: string;
  area: string;
  iteration: string;
  states: {
    project: string;
    work_item_types: string;
    work_item_type_states: Record<string, any>;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IAzuredevopsIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for azuredevops
 */
export type IAzuredevopsIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Search Work Items
     * method for AZURE_DEVOPS_SEARCH_WORKITEMS
     */
    azureDevopsSearchWorkitems: (
      inputs: IntentToInputOutput['AZURE_DEVOPS_SEARCH_WORKITEMS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['AZURE_DEVOPS_SEARCH_WORKITEMS'][0],
      IntentToInputOutput['AZURE_DEVOPS_SEARCH_WORKITEMS'][1]
    >;

    /**
     * Create Work Item
     * method for AZURE_DEVOPS_CREATE_WORKITEM
     */
    azureDevopsCreateWorkitem: (
      inputs: IntentToInputOutput['AZURE_DEVOPS_CREATE_WORKITEM'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['AZURE_DEVOPS_CREATE_WORKITEM'][0],
      IntentToInputOutput['AZURE_DEVOPS_CREATE_WORKITEM'][1]
    >;

    /**
     * Update Work Item
     * method for AZURE_DEVOPS_UPDATE_WORKITEM
     */
    azureDevopsUpdateWorkitem: (
      inputs: IntentToInputOutput['AZURE_DEVOPS_UPDATE_WORKITEM'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['AZURE_DEVOPS_UPDATE_WORKITEM'][0],
      IntentToInputOutput['AZURE_DEVOPS_UPDATE_WORKITEM'][1]
    >;

    /**
     * Delete Work Item
     * method for AZURE_DEVOPS_DELETE_WORKITEM
     */
    azureDevopsDeleteWorkitem: (
      inputs: IntentToInputOutput['AZURE_DEVOPS_DELETE_WORKITEM'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['AZURE_DEVOPS_DELETE_WORKITEM'][0],
      IntentToInputOutput['AZURE_DEVOPS_DELETE_WORKITEM'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {};
};
