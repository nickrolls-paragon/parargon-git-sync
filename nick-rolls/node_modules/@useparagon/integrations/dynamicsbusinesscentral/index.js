const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for dynamicsbusinesscentral
 */
exports.inputs = [
  {
    id: 'vendorCacheKey',
    title: 'Vendors',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'accountCacheKey',
    title: 'General Ledger Accounts',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'mapDynamicsBusinessCentralFields',
    title: 'Field Mapping',
    type: 'FIELD_MAPPER_DATA_SOURCE',
    fieldSource: {
      id: 'getFields',
      title: 'Fields',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    recordSource: {
      id: 'recordType',
      title: 'Record Type',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
];

/**
 * triggers for dynamicsbusinesscentral
 */
exports.triggers = [
  {
    title: 'Record Created',
    name: 'DYNAMICS_BUSINESS_CENTRAL_TRIGGER_RECORD_CREATED',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'ENUM',
        required: true,
        values: [
          {
            value: 'purchaseInvoices',
            dependentInputs: [
              {
                id: 'businessCentralFilterFormula',
                title: 'Filter records',
                type: 'CONDITIONAL',
                subtitle: 'Only trigger on records that match these filters.',
                placeholder: 'Field',
                supportedKeys: [
                  'id',
                  'vendorName',
                  'vendorInvoiceNumber',
                  'dueDate',
                  'postingDate',
                  'status',
                ],
                supportedOperators: [
                  '$stringExactlyMatches',
                  '$stringDoesNotExactlyMatch',
                  '$numberEquals',
                  '$numberGreaterThan',
                  '$numberLessThan',
                  '$numberGreaterThanOrEqualTo',
                  '$numberDoesNotEqual',
                  '$dateTimeEquals',
                  '$dateTimeBefore',
                  '$dateTimeAfter',
                ],
              },
            ],
          },
          {
            value: 'vendors',
            dependentInputs: [
              {
                id: 'businessCentralFilterFormula',
                title: 'Filter records',
                type: 'CONDITIONAL',
                subtitle: 'Only trigger on records that match these filters.',
                placeholder: 'Field',
                supportedKeys: [
                  'id',
                  'displayName',
                  'number',
                  'email',
                  'taxRegistrationNumber',
                  'paymentTermsId',
                ],
                supportedOperators: [
                  '$stringExactlyMatches',
                  '$stringDoesNotExactlyMatch',
                  '$numberEquals',
                  '$numberGreaterThan',
                  '$numberLessThan',
                  '$numberGreaterThanOrEqualTo',
                  '$numberDoesNotEqual',
                  '$dateTimeEquals',
                  '$dateTimeBefore',
                  '$dateTimeAfter',
                ],
              },
            ],
          },
        ],
      },
    ],
  },
  {
    title: 'Record Updated',
    name: 'DYNAMICS_BUSINESS_CENTRAL_TRIGGER_RECORD_UPDATED',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'ENUM',
        required: true,
        values: [
          {
            value: 'purchaseInvoices',
            dependentInputs: [
              {
                id: 'businessCentralFilterFormula',
                title: 'Filter records',
                type: 'CONDITIONAL',
                subtitle: 'Only trigger on records that match these filters.',
                placeholder: 'Field',
                supportedKeys: [
                  'id',
                  'vendorName',
                  'vendorInvoiceNumber',
                  'dueDate',
                  'postingDate',
                  'status',
                ],
                supportedOperators: [
                  '$stringExactlyMatches',
                  '$stringDoesNotExactlyMatch',
                  '$numberEquals',
                  '$numberGreaterThan',
                  '$numberLessThan',
                  '$numberGreaterThanOrEqualTo',
                  '$numberDoesNotEqual',
                  '$dateTimeEquals',
                  '$dateTimeBefore',
                  '$dateTimeAfter',
                ],
              },
            ],
          },
          {
            value: 'vendors',
            dependentInputs: [
              {
                id: 'businessCentralFilterFormula',
                title: 'Filter records',
                type: 'CONDITIONAL',
                subtitle: 'Only trigger on records that match these filters.',
                placeholder: 'Field',
                supportedKeys: [
                  'id',
                  'displayName',
                  'number',
                  'email',
                  'taxRegistrationNumber',
                  'paymentTermsId',
                ],
                supportedOperators: [
                  '$stringExactlyMatches',
                  '$stringDoesNotExactlyMatch',
                  '$numberEquals',
                  '$numberGreaterThan',
                  '$numberLessThan',
                  '$numberGreaterThanOrEqualTo',
                  '$numberDoesNotEqual',
                  '$dateTimeEquals',
                  '$dateTimeBefore',
                  '$dateTimeAfter',
                ],
              },
            ],
          },
        ],
      },
    ],
  },
  {
    title: 'Record Deleted',
    name: 'DYNAMICS_BUSINESS_CENTRAL_TRIGGER_RECORD_DELETED',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'ENUM',
        required: true,
        values: ['purchaseInvoices', 'vendors'],
      },
    ],
  },
];

/**
 * intents for dynamicsbusinesscentral
 */
exports.intents = [
  {
    title: 'Create Vendor',
    name: 'DYNAMICS_BUSINESS_CENTRAL_CREATE_VENDOR',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'vendorNumber',
        title: 'Vendor Number',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'vendorName',
        title: 'Name',
        type: 'TEXTAREA',
      },
      {
        id: 'vendorEmail',
        title: 'Email',
        type: 'TEXTAREA',
        placeholder: 'primary@vendor.com',
      },
      {
        id: 'taxRegNumber',
        title: 'Tax Registration Number',
        type: 'TEXTAREA',
        subtitle: "The vendor's tax registration number.",
      },
      {
        id: 'paymentTermsId',
        title: 'Payment Term ID',
        type: 'TEXTAREA',
      },
      {
        id: 'addressLine1',
        title: 'Address Line 1',
        type: 'TEXT',
      },
      {
        id: 'addressLine2',
        title: 'Address Line 2',
        type: 'TEXT',
      },
      {
        id: 'city',
        title: 'City',
        type: 'TEXT',
      },
      {
        id: 'state',
        title: 'State',
        type: 'TEXT',
        placeholder: 'Use state or province.',
      },
      {
        id: 'zip',
        title: 'ZIP',
        type: 'TEXT',
        placeholder: 'Use ZIP or postal code, if applicable.',
      },
      {
        id: 'country',
        title: 'Country',
        type: 'TEXT',
      },
      {
        id: 'vendorsAdditionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n  "phoneNumber": "string",\n  "website": "string",\n  "currencyCode": "string",\n  "irs1099Code": "string",\n  "taxLiable": "boolean",\n  "balance": "decimal",\n  "lastModifiedDateTime": "datetime"\n}',
      },
    ],
  },
  {
    title: 'Update Vendor',
    name: 'DYNAMICS_BUSINESS_CENTRAL_UPDATE_VENDOR',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'vendorId',
        title: 'Vendor ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the record ID of the Vendor to update.',
        required: true,
      },
      {
        id: 'vendorNumber',
        title: 'Vendor Number',
        type: 'TEXTAREA',
      },
      {
        id: 'vendorName',
        title: 'Name',
        type: 'TEXTAREA',
      },
      {
        id: 'vendorEmail',
        title: 'Email',
        type: 'TEXTAREA',
        placeholder: 'primary@vendor.com',
      },
      {
        id: 'taxRegNumber',
        title: 'Tax Registration Number',
        type: 'TEXTAREA',
        subtitle: "The vendor's tax registration number.",
      },
      {
        id: 'paymentTermsId',
        title: 'Payment Term ID',
        type: 'TEXTAREA',
      },
      {
        id: 'addressLine1',
        title: 'Address Line 1',
        type: 'TEXT',
      },
      {
        id: 'addressLine2',
        title: 'Address Line 2',
        type: 'TEXT',
      },
      {
        id: 'city',
        title: 'City',
        type: 'TEXT',
      },
      {
        id: 'state',
        title: 'State',
        type: 'TEXT',
        placeholder: 'Use state or province.',
      },
      {
        id: 'zip',
        title: 'ZIP',
        type: 'TEXT',
        placeholder: 'Use ZIP or postal code, if applicable.',
      },
      {
        id: 'country',
        title: 'Country',
        type: 'TEXT',
      },
      {
        id: 'vendorsAdditionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n  "phoneNumber": "string",\n  "website": "string",\n  "currencyCode": "string",\n  "irs1099Code": "string",\n  "taxLiable": "boolean",\n  "balance": "decimal",\n  "lastModifiedDateTime": "datetime"\n}',
      },
    ],
  },
  {
    title: 'Get Vendor by ID',
    name: 'DYNAMICS_BUSINESS_CENTRAL_GET_VENDOR_BY_ID',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'vendorId',
        title: 'Vendor ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the record ID of the Vendor to fetch.',
        required: true,
      },
    ],
  },
  {
    title: 'Search for Vendor',
    name: 'DYNAMICS_BUSINESS_CENTRAL_SEARCH_VENDOR',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'vendorsFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for records that match specified filters.',
        placeholder: 'field',
        supportedKeys: [
          'id',
          'displayName',
          'email',
          'taxRegistrationNumber',
          'paymentTermsId',
        ],
        supportedOperators: [
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberLessThan',
          '$numberGreaterThanOrEqualTo',
          '$numberDoesNotEqual',
          '$dateTimeEquals',
          '$dateTimeBefore',
          '$dateTimeAfter',
        ],
      },
    ],
  },
  {
    title: 'Delete Vendor',
    name: 'DYNAMICS_BUSINESS_CENTRAL_DELETE_VENDOR',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'vendorId',
        title: 'Vendor ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the record ID of the Vendor to delete.',
        required: true,
      },
    ],
  },
  {
    title: 'Create Purchase Invoice',
    name: 'DYNAMICS_BUSINESS_CENTRAL_CREATE_PURCHASE_INVOICE',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'purchaseInvoiceVendorId',
        title: 'Vendor Id',
        type: 'TEXTAREA',
        subtitle: 'The Id of the vendor who delivers the products.',
        required: true,
      },
      {
        id: 'vendorInvoiceNumber',
        title: 'Vendor Invoice Number',
        type: 'TEXTAREA',
        subtitle: 'An internal number for the invoice.',
      },
      {
        id: 'invoiceDate',
        title: 'Invoice Date',
        type: 'TEXTAREA',
        subtitle: 'Accepts ISO 8601 date format.',
        placeholder: '2022-01-01',
      },
      {
        id: 'postingDate',
        title: 'Posting Date',
        type: 'TEXTAREA',
        subtitle: 'Accepts ISO 8601 date format.',
        placeholder: '2022-01-02',
      },
      {
        id: 'dueDate',
        title: 'Due Date',
        type: 'TEXTAREA',
        subtitle: 'Accepts ISO 8601 date format.',
        placeholder: '2022-02-03',
      },
      {
        id: 'purchaseInvoiceAdditionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n  shipToName: "John Apple",\n  shipToAddressLine1: "2000 Durant Ave."\n}',
      },
    ],
  },
  {
    title: 'Update Purchase Invoice',
    name: 'DYNAMICS_BUSINESS_CENTRAL_UPDATE_PURCHASE_INVOICE',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'purchaseInvoiceId',
        title: 'Purchase Invoice ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the record ID of the Purchase Invoice to update.',
        required: true,
      },
      {
        id: 'purchaseInvoiceVendorId',
        title: 'Vendor Id',
        type: 'TEXTAREA',
        subtitle: 'The Id of the vendor who delivers the products.',
        required: true,
      },
      {
        id: 'vendorInvoiceNumber',
        title: 'Vendor Invoice Number',
        type: 'TEXTAREA',
        subtitle: 'An internal number for the invoice.',
      },
      {
        id: 'invoiceDate',
        title: 'Invoice Date',
        type: 'TEXTAREA',
        subtitle: 'Accepts ISO 8601 date format.',
        placeholder: '2022-01-01',
      },
      {
        id: 'postingDate',
        title: 'Posting Date',
        type: 'TEXTAREA',
        subtitle: 'Accepts ISO 8601 date format.',
        placeholder: '2022-01-02',
      },
      {
        id: 'dueDate',
        title: 'Due Date',
        type: 'TEXTAREA',
        subtitle: 'Accepts ISO 8601 date format.',
        placeholder: '2022-02-03',
      },
      {
        id: 'purchaseInvoiceAdditionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n  shipToName: "John Apple",\n  shipToAddressLine1: "2000 Durant Ave."\n}',
      },
    ],
  },
  {
    title: 'Post a Purchase Invoice',
    name: 'DYNAMICS_BUSINESS_CENTRAL_POST_PURCHASE_INVOICE',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'purchaseInvoiceId',
        title: 'Purchase Invoice ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify the record ID of the Purchase Invoice to post to the ledger.',
        required: true,
      },
    ],
  },
  {
    title: 'Get Purchase Invoice by ID',
    name: 'DYNAMICS_BUSINESS_CENTRAL_GET_PURCHASE_INVOICE_BY_ID',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'purchaseInvoiceId',
        title: 'Purchase Invoice ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the record ID of the Purchase Invoice to fetch.',
        required: true,
      },
    ],
  },
  {
    title: 'Search for Purchase Invoice',
    name: 'DYNAMICS_BUSINESS_CENTRAL_SEARCH_FOR_PURCHASE_INVOICE',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'purchaseInvoicesFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for records that match specified filters.',
        placeholder: 'field',
        supportedKeys: [
          'vendorName',
          'vendorInvoiceNumber',
          'dueDate',
          'postingDate',
          'status',
        ],
        supportedOperators: [
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberLessThan',
          '$numberGreaterThanOrEqualTo',
          '$numberDoesNotEqual',
          '$dateTimeEquals',
          '$dateTimeBefore',
          '$dateTimeAfter',
        ],
      },
    ],
  },
  {
    title: 'Delete Purchase Invoice',
    name: 'DYNAMICS_BUSINESS_CENTRAL_DELETE_PURCHASE_INVOICE',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'purchaseInvoiceId',
        title: 'Purchase Invoice ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the record ID of the Purchase Invoice to delete.',
        required: true,
      },
    ],
  },
  {
    title: 'Create Purchase Invoice Line Item',
    name: 'DYNAMICS_BUSINESS_CENTRAL_CREATE_PURCHASE_INVOICE_LINE_ITEM',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'parentInvoiceId',
        title: 'Parent Purchase Invoice Id',
        type: 'TEXT',
        required: true,
      },
      {
        id: 'lineType',
        title: 'Line Type',
        type: 'EDITABLE_ENUM',
        required: true,
        values: [
          'Item',
          'Resource',
          'Comment',
          'Account',
          'Fixed Asset',
          'Charge',
        ],
      },
      {
        id: 'resourceNumber',
        title: 'Number',
        type: 'TEXTAREA',
        subtitle:
          'Specify the number of the item, account, resource, charge, or fixed asset associated with the Purchase Invoice Line. Items and resources will be created if they do not exist.',
        placeholder: '1896-S',
        required: true,
      },
      {
        id: 'lineDescription',
        title: 'Description',
        type: 'TEXTAREA',
        placeholder: 'ATHENS Desk',
        required: true,
      },
      {
        id: 'quantity',
        title: 'Quantity',
        type: 'TEXTAREA',
        placeholder: '20',
        required: true,
      },
      {
        id: 'unitCost',
        title: 'Unit Cost',
        type: 'TEXTAREA',
        placeholder: '10.99',
        required: true,
      },
      {
        id: 'accountId',
        title: 'Account ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify the ID of the Account that the Purchase Invoice Line is related to.',
        placeholder: '00000000-0000-0000-0000-000000000000',
        required: true,
      },
      {
        id: 'measureCodeUnit',
        title: 'Unit of Measure Code',
        type: 'TEXTAREA',
        placeholder: 'PCS',
      },
      {
        id: 'taxPercent',
        title: 'Tax Percent',
        type: 'TEXTAREA',
        placeholder: '6.00004',
      },
      {
        id: 'taxGroupCode',
        title: 'Tax Group Code',
        type: 'TEXTAREA',
        placeholder: 'FURNITURE',
      },
      {
        id: 'purchaseInvoiceLineAdditionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n  documentId: "5d115c9c-44e3-ea11-bb43-000d3a2feca1",\n}',
      },
    ],
  },
  {
    title: 'Update Purchase Invoice Line Item',
    name: 'DYNAMICS_BUSINESS_CENTRAL_UPDATE_PURCHASE_INVOICE_LINE_ITEM',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'purchaseInvoiceLineId',
        title: 'Purchase Invoice Line ID',
        type: 'TEXTAREA',
        subtitle: 'The record ID of the Purchase Invoice Line to update.',
        required: true,
      },
      {
        id: 'lineType',
        title: 'Line Type',
        type: 'EDITABLE_ENUM',
        required: true,
        values: [
          'Item',
          'Resource',
          'Comment',
          'Account',
          'Fixed Asset',
          'Charge',
        ],
      },
      {
        id: 'resourceNumber',
        title: 'Number',
        type: 'TEXTAREA',
        subtitle:
          'Specify the number of the item, account, resource, charge, or fixed asset associated with the Purchase Invoice Line. Items and resources will be created if they do not exist.',
        placeholder: '1896-S',
        required: true,
      },
      {
        id: 'lineDescription',
        title: 'Description',
        type: 'TEXTAREA',
        placeholder: 'ATHENS Desk',
        required: true,
      },
      {
        id: 'quantity',
        title: 'Quantity',
        type: 'TEXTAREA',
        placeholder: '20',
        required: true,
      },
      {
        id: 'unitCost',
        title: 'Unit Cost',
        type: 'TEXTAREA',
        placeholder: '10.99',
        required: true,
      },
      {
        id: 'accountId',
        title: 'Account ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify the ID of the Account that the Purchase Invoice Line is related to.',
        placeholder: '00000000-0000-0000-0000-000000000000',
      },
      {
        id: 'measureCodeUnit',
        title: 'Unit of Measure Code',
        type: 'TEXTAREA',
        placeholder: 'PCS',
      },
      {
        id: 'taxPercent',
        title: 'Tax Percent',
        type: 'TEXTAREA',
        placeholder: '6.00004',
      },
      {
        id: 'taxGroupCode',
        title: 'Tax Group Code',
        type: 'TEXTAREA',
        placeholder: 'FURNITURE',
      },
      {
        id: 'purchaseInvoiceLineAdditionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n  documentId: "5d115c9c-44e3-ea11-bb43-000d3a2feca1",\n}',
      },
    ],
  },
  {
    title: 'Get Purchase Invoice Lines',
    name: 'DYNAMICS_BUSINESS_CENTRAL_GET_PURCHASE_INVOICE_LINES',
    output: [],
    inputs: [
      {
        id: 'purchaseInvoiceId',
        title: 'Purchase Invoice ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify the record ID of the Purchase Invoice ID to fetch all associated Purchase Invoice Lines.',
        required: true,
      },
    ],
  },
  {
    title: 'Get Purchase Invoice Line Item by ID',
    name: 'DYNAMICS_BUSINESS_CENTRAL_GET_PURCHASE_INVOICE_LINE_ITEM_BY_ID',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'purchaseInvoiceLineId',
        title: 'Purchase Invoice Line ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify the record ID of the Purchase Invoice Line to fetch.',
        required: true,
      },
    ],
  },
  {
    title: 'Search for Purchase Invoice Line Item',
    name: 'DYNAMICS_BUSINESS_CENTRAL_SEARCH_PURCHASE_INVOICE_LINE_ITEM',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'parentInvoiceId',
        title: 'Parent Purchase Invoice Id',
        type: 'TEXT',
        required: true,
      },
      {
        id: 'purchaseInvoiceLinesFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for records that match specified filters.',
        placeholder: 'field',
        supportedKeys: ['taxCode', 'description', 'lineType'],
        supportedOperators: [
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberLessThan',
          '$numberGreaterThanOrEqualTo',
          '$numberDoesNotEqual',
          '$dateTimeEquals',
          '$dateTimeBefore',
          '$dateTimeAfter',
        ],
      },
    ],
  },
  {
    title: 'Delete Purchase Invoice Line Item',
    name: 'DYNAMICS_BUSINESS_CENTRAL_DELETE_PURCHASE_INVOICE_LINE_ITEM',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'purchaseInvoiceLineId',
        title: 'Purchase Invoice Line ID',
        type: 'TEXTAREA',
        subtitle: 'The record ID of the Purchase Invoice Line to delete.',
        required: true,
      },
    ],
  },
  {
    title: 'Get Accounts',
    name: 'DYNAMICS_BUSINESS_CENTRAL_GET_ACCOUNTS',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
    ],
  },
  {
    title: 'Get Account by ID',
    name: 'DYNAMICS_BUSINESS_CENTRAL_GET_ACCOUNT_BY_ID',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'accountId',
        title: 'Account ID',
        type: 'TEXTAREA',
        subtitle: ' Specify the record ID of the Account to fetch.',
        required: true,
      },
    ],
  },
  {
    title: 'Create Tax Group',
    name: 'DYNAMICS_BUSINESS_CENTRAL_CREATE_TAX_GROUP',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'taxGroupCode',
        title: 'Tax Group Code',
        type: 'TEXTAREA',
        subtitle: 'Specify the code of the Tax Group.',
        placeholder: 'FURNITURE',
        required: true,
      },
      {
        id: 'taxGroupName',
        title: 'Name',
        type: 'TEXTAREA',
        placeholder: 'Taxable Olympic Furniture',
        required: true,
      },
    ],
  },
  {
    title: 'Update Tax Group',
    name: 'DYNAMICS_BUSINESS_CENTRAL_UPDATE_TAX_GROUP',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'taxGroupId',
        title: 'Tax Group ID',
        type: 'TEXTAREA',
        subtitle: 'The record ID of the Tax Group to update.',
        required: true,
      },
      {
        id: 'taxGroupName',
        title: 'Name',
        type: 'TEXTAREA',
        placeholder: 'Taxable Olympic Furniture',
      },
    ],
  },
  {
    title: 'Get Tax Group by ID',
    name: 'DYNAMICS_BUSINESS_CENTRAL_GET_TAX_GROUP_BY_ID',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'taxGroupId',
        title: 'Tax Group ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the record ID of the Tax Group to fetch.',
        required: true,
      },
    ],
  },
  {
    title: 'Search for Tax Group',
    name: 'DYNAMICS_BUSINESS_CENTRAL_SEARCH_TAX_GROUP',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'taxGroupsFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for records that match specified filters.',
        placeholder: 'field',
        supportedKeys: ['code', 'displayName', 'taxType'],
        supportedOperators: [
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberLessThan',
          '$numberGreaterThanOrEqualTo',
          '$numberDoesNotEqual',
          '$dateTimeEquals',
          '$dateTimeBefore',
          '$dateTimeAfter',
        ],
      },
    ],
  },
  {
    title: 'Delete Tax Group',
    name: 'DYNAMICS_BUSINESS_CENTRAL_DELETE_TAX_GROUP',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'taxGroupId',
        title: 'Tax Group ID',
        type: 'TEXTAREA',
        subtitle: 'The record ID of the Tax Group to delete.',
        required: true,
      },
    ],
  },
  {
    title: 'Create Payment Term',
    name: 'DYNAMICS_BUSINESS_CENTRAL_CREATE_PAYMENT_TERM',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'paymentTermCode',
        title: 'Payment Term Code',
        type: 'TEXTAREA',
        subtitle: 'The code to identify this set of payment terms.',
        placeholder: '10 DAYS',
      },
      {
        id: 'paymentTermName',
        title: 'Name',
        type: 'TEXTAREA',
        subtitle:
          'This name will appear on all sales documents for the payment term.',
        placeholder: 'Net 10 days',
      },
      {
        id: 'dueDateCalculation',
        title: 'Due Date Calculation',
        type: 'TEXTAREA',
        placeholder: '10D',
      },
      {
        id: 'discountDateCalculation',
        title: 'Discount Date Calculation',
        type: 'TEXTAREA',
        placeholder: '8D',
      },
      {
        id: 'discountPercent',
        title: 'Discount Percent',
        type: 'TEXTAREA',
        subtitle:
          'Specify the percentage of the invoice amount (amount including tax is the default setting) that will constitute a possible payment discount.',
        placeholder: '2',
      },
    ],
  },
  {
    title: 'Update Payment Term',
    name: 'DYNAMICS_BUSINESS_CENTRAL_UPDATE_PAYMENT_TERM',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'paymentTermsId',
        title: 'Payment Term ID',
        type: 'TEXTAREA',
        subtitle: 'The record ID of the Payment Term to update.',
        required: true,
      },
      {
        id: 'paymentTermCode',
        title: 'Payment Term Code',
        type: 'TEXTAREA',
        subtitle: 'The code to identify this set of payment terms.',
        placeholder: '10 DAYS',
      },
      {
        id: 'paymentTermName',
        title: 'Name',
        type: 'TEXTAREA',
        subtitle:
          'This name will appear on all sales documents for the payment term.',
        placeholder: 'Net 10 days',
      },
      {
        id: 'dueDateCalculation',
        title: 'Due Date Calculation',
        type: 'TEXTAREA',
        placeholder: '10D',
      },
      {
        id: 'discountDateCalculation',
        title: 'Discount Date Calculation',
        type: 'TEXTAREA',
        placeholder: '8D',
      },
      {
        id: 'discountPercent',
        title: 'Discount Percent',
        type: 'TEXTAREA',
        subtitle:
          'Specify the percentage of the invoice amount (amount including tax is the default setting) that will constitute a possible payment discount.',
        placeholder: '2',
      },
    ],
  },
  {
    title: 'Get Payment Term by ID',
    name: 'DYNAMICS_BUSINESS_CENTRAL_GET_PAYMENT_TERM_BY_ID',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'paymentTermsId',
        title: 'Payment Term ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the record ID of the Payment Term to fetch.',
        required: true,
      },
    ],
  },
  {
    title: 'Search for Payment Term',
    name: 'DYNAMICS_BUSINESS_CENTRAL_SEARCH_PAYMENT_TERM',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'paymentTermsFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for records that match specified filters.',
        placeholder: 'field',
        supportedKeys: ['code', 'displayName', 'discountPercent'],
        supportedOperators: [
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberLessThan',
          '$numberGreaterThanOrEqualTo',
          '$numberDoesNotEqual',
          '$dateTimeEquals',
          '$dateTimeBefore',
          '$dateTimeAfter',
        ],
      },
    ],
  },
  {
    title: 'Delete Payment Term',
    name: 'DYNAMICS_BUSINESS_CENTRAL_DELETE_PAYMENT_TERM',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'RecordType',
        type: 'TEXT',
      },
      {
        id: 'paymentTermsId',
        title: 'Payment Term ID',
        type: 'TEXTAREA',
        subtitle: 'The record ID of the Payment Term to delete.',
        required: true,
      },
    ],
  },
];

/**
 * integration class for dynamicsbusinesscentral
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'dynamicsbusinesscentral',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Vendor
     * method for DYNAMICS_BUSINESS_CENTRAL_CREATE_VENDOR
     */
    dynamicsBusinessCentralCreateVendor: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_CREATE_VENDOR',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Vendor
     * method for DYNAMICS_BUSINESS_CENTRAL_UPDATE_VENDOR
     */
    dynamicsBusinessCentralUpdateVendor: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_UPDATE_VENDOR',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Vendor by ID
     * method for DYNAMICS_BUSINESS_CENTRAL_GET_VENDOR_BY_ID
     */
    dynamicsBusinessCentralGetVendorById: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_GET_VENDOR_BY_ID',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search for Vendor
     * method for DYNAMICS_BUSINESS_CENTRAL_SEARCH_VENDOR
     */
    dynamicsBusinessCentralSearchVendor: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_SEARCH_VENDOR',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Vendor
     * method for DYNAMICS_BUSINESS_CENTRAL_DELETE_VENDOR
     */
    dynamicsBusinessCentralDeleteVendor: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_DELETE_VENDOR',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Purchase Invoice
     * method for DYNAMICS_BUSINESS_CENTRAL_CREATE_PURCHASE_INVOICE
     */
    dynamicsBusinessCentralCreatePurchaseInvoice: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_CREATE_PURCHASE_INVOICE',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Purchase Invoice
     * method for DYNAMICS_BUSINESS_CENTRAL_UPDATE_PURCHASE_INVOICE
     */
    dynamicsBusinessCentralUpdatePurchaseInvoice: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_UPDATE_PURCHASE_INVOICE',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Post a Purchase Invoice
     * method for DYNAMICS_BUSINESS_CENTRAL_POST_PURCHASE_INVOICE
     */
    dynamicsBusinessCentralPostPurchaseInvoice: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_POST_PURCHASE_INVOICE',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Purchase Invoice by ID
     * method for DYNAMICS_BUSINESS_CENTRAL_GET_PURCHASE_INVOICE_BY_ID
     */
    dynamicsBusinessCentralGetPurchaseInvoiceById: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_GET_PURCHASE_INVOICE_BY_ID',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search for Purchase Invoice
     * method for DYNAMICS_BUSINESS_CENTRAL_SEARCH_FOR_PURCHASE_INVOICE
     */
    dynamicsBusinessCentralSearchForPurchaseInvoice: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_SEARCH_FOR_PURCHASE_INVOICE',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Purchase Invoice
     * method for DYNAMICS_BUSINESS_CENTRAL_DELETE_PURCHASE_INVOICE
     */
    dynamicsBusinessCentralDeletePurchaseInvoice: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_DELETE_PURCHASE_INVOICE',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Purchase Invoice Line Item
     * method for DYNAMICS_BUSINESS_CENTRAL_CREATE_PURCHASE_INVOICE_LINE_ITEM
     */
    dynamicsBusinessCentralCreatePurchaseInvoiceLineItem: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_CREATE_PURCHASE_INVOICE_LINE_ITEM',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Purchase Invoice Line Item
     * method for DYNAMICS_BUSINESS_CENTRAL_UPDATE_PURCHASE_INVOICE_LINE_ITEM
     */
    dynamicsBusinessCentralUpdatePurchaseInvoiceLineItem: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_UPDATE_PURCHASE_INVOICE_LINE_ITEM',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Purchase Invoice Lines
     * method for DYNAMICS_BUSINESS_CENTRAL_GET_PURCHASE_INVOICE_LINES
     */
    dynamicsBusinessCentralGetPurchaseInvoiceLines: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_GET_PURCHASE_INVOICE_LINES',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Purchase Invoice Line Item by ID
     * method for DYNAMICS_BUSINESS_CENTRAL_GET_PURCHASE_INVOICE_LINE_ITEM_BY_ID
     */
    dynamicsBusinessCentralGetPurchaseInvoiceLineItemById: (
      inputs,
      options,
    ) => {
      return new ActionStep({
        intent:
          'DYNAMICS_BUSINESS_CENTRAL_GET_PURCHASE_INVOICE_LINE_ITEM_BY_ID',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search for Purchase Invoice Line Item
     * method for DYNAMICS_BUSINESS_CENTRAL_SEARCH_PURCHASE_INVOICE_LINE_ITEM
     */
    dynamicsBusinessCentralSearchPurchaseInvoiceLineItem: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_SEARCH_PURCHASE_INVOICE_LINE_ITEM',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Purchase Invoice Line Item
     * method for DYNAMICS_BUSINESS_CENTRAL_DELETE_PURCHASE_INVOICE_LINE_ITEM
     */
    dynamicsBusinessCentralDeletePurchaseInvoiceLineItem: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_DELETE_PURCHASE_INVOICE_LINE_ITEM',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Accounts
     * method for DYNAMICS_BUSINESS_CENTRAL_GET_ACCOUNTS
     */
    dynamicsBusinessCentralGetAccounts: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_GET_ACCOUNTS',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Account by ID
     * method for DYNAMICS_BUSINESS_CENTRAL_GET_ACCOUNT_BY_ID
     */
    dynamicsBusinessCentralGetAccountById: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_GET_ACCOUNT_BY_ID',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Tax Group
     * method for DYNAMICS_BUSINESS_CENTRAL_CREATE_TAX_GROUP
     */
    dynamicsBusinessCentralCreateTaxGroup: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_CREATE_TAX_GROUP',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Tax Group
     * method for DYNAMICS_BUSINESS_CENTRAL_UPDATE_TAX_GROUP
     */
    dynamicsBusinessCentralUpdateTaxGroup: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_UPDATE_TAX_GROUP',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Tax Group by ID
     * method for DYNAMICS_BUSINESS_CENTRAL_GET_TAX_GROUP_BY_ID
     */
    dynamicsBusinessCentralGetTaxGroupById: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_GET_TAX_GROUP_BY_ID',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search for Tax Group
     * method for DYNAMICS_BUSINESS_CENTRAL_SEARCH_TAX_GROUP
     */
    dynamicsBusinessCentralSearchTaxGroup: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_SEARCH_TAX_GROUP',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Tax Group
     * method for DYNAMICS_BUSINESS_CENTRAL_DELETE_TAX_GROUP
     */
    dynamicsBusinessCentralDeleteTaxGroup: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_DELETE_TAX_GROUP',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Payment Term
     * method for DYNAMICS_BUSINESS_CENTRAL_CREATE_PAYMENT_TERM
     */
    dynamicsBusinessCentralCreatePaymentTerm: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_CREATE_PAYMENT_TERM',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Payment Term
     * method for DYNAMICS_BUSINESS_CENTRAL_UPDATE_PAYMENT_TERM
     */
    dynamicsBusinessCentralUpdatePaymentTerm: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_UPDATE_PAYMENT_TERM',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Payment Term by ID
     * method for DYNAMICS_BUSINESS_CENTRAL_GET_PAYMENT_TERM_BY_ID
     */
    dynamicsBusinessCentralGetPaymentTermById: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_GET_PAYMENT_TERM_BY_ID',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search for Payment Term
     * method for DYNAMICS_BUSINESS_CENTRAL_SEARCH_PAYMENT_TERM
     */
    dynamicsBusinessCentralSearchPaymentTerm: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_SEARCH_PAYMENT_TERM',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Payment Term
     * method for DYNAMICS_BUSINESS_CENTRAL_DELETE_PAYMENT_TERM
     */
    dynamicsBusinessCentralDeletePaymentTerm: (inputs, options) => {
      return new ActionStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_DELETE_PAYMENT_TERM',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Record Created
     * method for DYNAMICS_BUSINESS_CENTRAL_TRIGGER_RECORD_CREATED
     */
    dynamicsBusinessCentralTriggerRecordCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_TRIGGER_RECORD_CREATED',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
      });
    },
    /**
     * Record Updated
     * method for DYNAMICS_BUSINESS_CENTRAL_TRIGGER_RECORD_UPDATED
     */
    dynamicsBusinessCentralTriggerRecordUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_TRIGGER_RECORD_UPDATED',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
      });
    },
    /**
     * Record Deleted
     * method for DYNAMICS_BUSINESS_CENTRAL_TRIGGER_RECORD_DELETED
     */
    dynamicsBusinessCentralTriggerRecordDeleted: (inputs) => {
      return new ActionTriggerStep({
        intent: 'DYNAMICS_BUSINESS_CENTRAL_TRIGGER_RECORD_DELETED',
        actionType: 'dynamicsbusinesscentral',
        parameters: inputs,
      });
    },
  },
};
