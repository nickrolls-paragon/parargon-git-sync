const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for gmail
 */
exports.inputs = [];

/**
 * triggers for gmail
 */
exports.triggers = [
  {
    title: 'Thread Created',
    name: 'GMAIL_TRIGGER_THREAD_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Thread Updated',
    name: 'GMAIL_TRIGGER_THREAD_UPDATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Thread Modified',
    name: 'GMAIL_TRIGGER_THREAD_MODIFIED',
    output: [],
    inputs: [],
  },
];

/**
 * intents for gmail
 */
exports.intents = [
  {
    title: 'Send Email',
    name: 'GMAIL_SEND_EMAIL',
    output: [],
    inputs: [
      {
        id: 'toRecipients',
        title: 'To',
        type: 'CODE',
        subtitle:
          'Specify the recipients as either a single string or a JSON array.',
        placeholder:
          '[\n  "recipient1@domain.com",\n  "recipient2@domain.com"\n]',
        required: true,
      },
      {
        id: 'from',
        title: 'From',
        type: 'TEXTAREA',
        subtitle:
          'The email address or verified alias to send your message from. If not provided, the message will be sent from the default address of your Gmail account.',
      },
      {
        id: 'subject',
        title: 'Subject',
        type: 'TEXTAREA',
        subtitle: 'Specify the subject of the message.',
        required: true,
      },
      {
        id: 'messageContent',
        title: 'Message Content',
        type: 'TEXTAREA',
        subtitle:
          'Specify the content of the email message as plain text or HTML.',
        required: true,
      },
      {
        id: 'attachments',
        title: 'Attachments',
        type: 'TEXTAREA',
        subtitle:
          'Accepts either a single file object or a JSON array of file objects',
        placeholder: '[{file object}, {file object}]',
      },
      {
        id: 'additionalHeaders',
        title: 'Additional Headers',
        type: 'CODE',
        subtitle: 'Specify any additional header fields here.',
        placeholder: '{\n  "reply-to": "Sender Name <sender@domain.com>",\n}',
      },
    ],
  },
  {
    title: 'Get Email by ID',
    name: 'GMAIL_GET_EMAIL_BY_ID',
    output: [],
    inputs: [
      {
        id: 'messageId',
        title: 'Message ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the message to retrieve.',
        required: true,
      },
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify the user’s email address. If not provided, the current user will be used.',
        placeholder: 'user@domain.com',
      },
    ],
  },
  {
    title: 'Search for Email',
    name: 'GMAIL_SEARCH_FOR_EMAIL',
    output: [],
    inputs: [
      {
        id: 'emailFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        supportedKeys: [
          'from',
          'to',
          'date',
          'label',
          'subject',
          'cc',
          'bcc',
          'category',
          'deliveredto:',
          'size',
          'filename',
          'older_than',
          'newer_than',
          'list',
          'is:important',
          'is:unread',
          'is:snoozed',
          'is:starred',
          'is:read',
          'has:drive',
          'has:document',
          'has:spreadsheet',
          'has:presentation',
          'has:attachment',
          'has:youtube',
          'has:userlabels',
        ],
        supportedOperators: [
          '$stringContains',
          '$stringIsIn',
          '$stringDoesNotContain',
          '$stringExactlyMatches',
          '$dateTimeAfter',
          '$dateTimeBefore',
          '$booleanFalse',
          '$booleanTrue',
        ],
      },
    ],
  },
  {
    title: 'Delete Email',
    name: 'GMAIL_DELETE_EMAIL',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the user’s email address.',
        placeholder: 'user@domain.com',
        required: true,
      },
      {
        id: 'messageId',
        title: 'Message ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the message to trash.',
        required: true,
      },
    ],
  },
  {
    title: 'Create a draft in Gmail',
    name: 'GMAIL_CREATE_DRAFT',
    output: [],
    inputs: [
      {
        id: 'toRecipients',
        title: 'To',
        type: 'CODE',
        subtitle:
          'Specify the recipients as either a single string or a JSON array.',
        placeholder:
          '[\n  "recipient1@domain.com",\n  "recipient2@domain.com"\n]',
      },
      {
        id: 'from',
        title: 'From',
        type: 'TEXTAREA',
        subtitle: 'Specify the email of the sender.',
      },
      {
        id: 'subject',
        title: 'Subject',
        type: 'TEXTAREA',
        subtitle: 'Specify the subject of the message.',
      },
      {
        id: 'messageContent',
        title: 'Message Content',
        type: 'TEXTAREA',
        subtitle:
          'Specify the content of the email message as plain text or HTML.',
      },
      {
        id: 'attachments',
        title: 'Attachments',
        type: 'TEXTAREA',
        subtitle:
          'Accepts either a single file object or a JSON array of file objects',
        placeholder: '[{file object}, {file object}]',
      },
      {
        id: 'additionalHeaders',
        title: 'Additional Headers',
        type: 'CODE',
        subtitle: 'Specify any additional header fields here.',
        placeholder: '{\n  "reply-to": "Sender Name <sender@domain.com>",\n}',
      },
    ],
  },
  {
    title: 'Create a Contact',
    name: 'GMAIL_CREATE_A_CONTACT',
    output: [],
    inputs: [
      {
        id: 'givenName',
        title: 'Given Name',
        type: 'TEXTAREA',
        subtitle: 'Specify the Given Name of the Contact to create.',
        placeholder: 'John',
        required: true,
      },
      {
        id: 'familyName',
        title: 'Family Name',
        type: 'TEXTAREA',
        subtitle: 'Specify the Family Name of the Contact to create.',
        placeholder: 'Doe',
        required: true,
      },
      {
        id: 'email',
        title: 'Email',
        type: 'TEXTAREA',
        subtitle: 'Specify the Email Address of the Contact to create.',
        required: true,
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n  "addresses": [\n    {\n      "streetAddress": "1000 North St.",\n      "city": "Los Angeles"\n    }\n  ]\n}',
      },
    ],
  },
  {
    title: 'Get Contact by Resource Name',
    name: 'GMAIL_GET_CONTACT_BY_RESOURCE_NAME',
    output: [],
    inputs: [
      {
        id: 'resourceName',
        title: 'Resource Name',
        type: 'TEXTAREA',
        subtitle: 'Specify the resource name of the contact to fetch.',
        required: true,
      },
    ],
  },
  {
    title: 'Search for Contact',
    name: 'GMAIL_SEARCH_FOR_CONTACT',
    output: [],
    inputs: [
      {
        id: 'searchTerm',
        title: 'Term',
        type: 'TEXTAREA',
        subtitle:
          'Specify a search term to search for near or exact matches on the names, nickNames, emailAddresses, phoneNumbers, or organizations Contact properties.',
        required: true,
      },
    ],
  },
  {
    title: 'Delete Contact',
    name: 'GMAIL_DELETE_CONTACT',
    output: [],
    inputs: [
      {
        id: 'resourceName',
        title: 'Resource Name',
        type: 'TEXTAREA',
        subtitle: 'Specify the resource name of the contact to delete.',
        required: true,
      },
    ],
  },
];

/**
 * integration class for gmail
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'gmail',

  /**
   * action step methods
   */
  actions: {
    /**
     * Send Email
     * method for GMAIL_SEND_EMAIL
     */
    sendEmail: (inputs, options) => {
      return new ActionStep({
        intent: 'GMAIL_SEND_EMAIL',
        actionType: 'gmail',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Email by ID
     * method for GMAIL_GET_EMAIL_BY_ID
     */
    getEmailById: (inputs, options) => {
      return new ActionStep({
        intent: 'GMAIL_GET_EMAIL_BY_ID',
        actionType: 'gmail',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search for Email
     * method for GMAIL_SEARCH_FOR_EMAIL
     */
    searchForEmail: (inputs, options) => {
      return new ActionStep({
        intent: 'GMAIL_SEARCH_FOR_EMAIL',
        actionType: 'gmail',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Email
     * method for GMAIL_DELETE_EMAIL
     */
    deleteEmail: (inputs, options) => {
      return new ActionStep({
        intent: 'GMAIL_DELETE_EMAIL',
        actionType: 'gmail',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create a draft in Gmail
     * method for GMAIL_CREATE_DRAFT
     */
    createDraft: (inputs, options) => {
      return new ActionStep({
        intent: 'GMAIL_CREATE_DRAFT',
        actionType: 'gmail',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create a Contact
     * method for GMAIL_CREATE_A_CONTACT
     */
    createAContact: (inputs, options) => {
      return new ActionStep({
        intent: 'GMAIL_CREATE_A_CONTACT',
        actionType: 'gmail',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Contact by Resource Name
     * method for GMAIL_GET_CONTACT_BY_RESOURCE_NAME
     */
    getContactByResourceName: (inputs, options) => {
      return new ActionStep({
        intent: 'GMAIL_GET_CONTACT_BY_RESOURCE_NAME',
        actionType: 'gmail',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search for Contact
     * method for GMAIL_SEARCH_FOR_CONTACT
     */
    searchForContact: (inputs, options) => {
      return new ActionStep({
        intent: 'GMAIL_SEARCH_FOR_CONTACT',
        actionType: 'gmail',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Contact
     * method for GMAIL_DELETE_CONTACT
     */
    deleteContact: (inputs, options) => {
      return new ActionStep({
        intent: 'GMAIL_DELETE_CONTACT',
        actionType: 'gmail',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Thread Created
     * method for GMAIL_TRIGGER_THREAD_CREATED
     */
    threadCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GMAIL_TRIGGER_THREAD_CREATED',
        actionType: 'gmail',
        parameters: inputs,
      });
    },
    /**
     * Thread Updated
     * method for GMAIL_TRIGGER_THREAD_UPDATED
     */
    threadUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GMAIL_TRIGGER_THREAD_UPDATED',
        actionType: 'gmail',
        parameters: inputs,
      });
    },
    /**
     * Thread Modified
     * method for GMAIL_TRIGGER_THREAD_MODIFIED
     */
    threadModified: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GMAIL_TRIGGER_THREAD_MODIFIED',
        actionType: 'gmail',
        parameters: inputs,
      });
    },
  },
};
