import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type IGmailIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type: 'text' | 'number' | 'email' | 'url' | 'boolean' | 'password';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IGmailIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for gmail
 */
export type IGmailIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Send Email
     * method for GMAIL_SEND_EMAIL
     */
    sendEmail: (
      inputs: IntentToInputOutput['GMAIL_SEND_EMAIL'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GMAIL_SEND_EMAIL'][0],
      IntentToInputOutput['GMAIL_SEND_EMAIL'][1]
    >;

    /**
     * Get Email by ID
     * method for GMAIL_GET_EMAIL_BY_ID
     */
    getEmailById: (
      inputs: IntentToInputOutput['GMAIL_GET_EMAIL_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GMAIL_GET_EMAIL_BY_ID'][0],
      IntentToInputOutput['GMAIL_GET_EMAIL_BY_ID'][1]
    >;

    /**
     * Search for Email
     * method for GMAIL_SEARCH_FOR_EMAIL
     */
    searchForEmail: (
      inputs: IntentToInputOutput['GMAIL_SEARCH_FOR_EMAIL'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GMAIL_SEARCH_FOR_EMAIL'][0],
      IntentToInputOutput['GMAIL_SEARCH_FOR_EMAIL'][1]
    >;

    /**
     * Delete Email
     * method for GMAIL_DELETE_EMAIL
     */
    deleteEmail: (
      inputs: IntentToInputOutput['GMAIL_DELETE_EMAIL'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GMAIL_DELETE_EMAIL'][0],
      IntentToInputOutput['GMAIL_DELETE_EMAIL'][1]
    >;

    /**
     * Create a draft in Gmail
     * method for GMAIL_CREATE_DRAFT
     */
    createDraft: (
      inputs: IntentToInputOutput['GMAIL_CREATE_DRAFT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GMAIL_CREATE_DRAFT'][0],
      IntentToInputOutput['GMAIL_CREATE_DRAFT'][1]
    >;

    /**
     * Create a Contact
     * method for GMAIL_CREATE_A_CONTACT
     */
    createAContact: (
      inputs: IntentToInputOutput['GMAIL_CREATE_A_CONTACT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GMAIL_CREATE_A_CONTACT'][0],
      IntentToInputOutput['GMAIL_CREATE_A_CONTACT'][1]
    >;

    /**
     * Get Contact by Resource Name
     * method for GMAIL_GET_CONTACT_BY_RESOURCE_NAME
     */
    getContactByResourceName: (
      inputs: IntentToInputOutput['GMAIL_GET_CONTACT_BY_RESOURCE_NAME'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GMAIL_GET_CONTACT_BY_RESOURCE_NAME'][0],
      IntentToInputOutput['GMAIL_GET_CONTACT_BY_RESOURCE_NAME'][1]
    >;

    /**
     * Search for Contact
     * method for GMAIL_SEARCH_FOR_CONTACT
     */
    searchForContact: (
      inputs: IntentToInputOutput['GMAIL_SEARCH_FOR_CONTACT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GMAIL_SEARCH_FOR_CONTACT'][0],
      IntentToInputOutput['GMAIL_SEARCH_FOR_CONTACT'][1]
    >;

    /**
     * Delete Contact
     * method for GMAIL_DELETE_CONTACT
     */
    deleteContact: (
      inputs: IntentToInputOutput['GMAIL_DELETE_CONTACT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['GMAIL_DELETE_CONTACT'][0],
      IntentToInputOutput['GMAIL_DELETE_CONTACT'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Thread Created
     * method for GMAIL_TRIGGER_THREAD_CREATED
     */
    threadCreated: (
      inputs: TriggerIntentToInputOutput['GMAIL_TRIGGER_THREAD_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GMAIL_TRIGGER_THREAD_CREATED'][0],
      TriggerIntentToInputOutput['GMAIL_TRIGGER_THREAD_CREATED'][1]
    >;

    /**
     * Thread Updated
     * method for GMAIL_TRIGGER_THREAD_UPDATED
     */
    threadUpdated: (
      inputs: TriggerIntentToInputOutput['GMAIL_TRIGGER_THREAD_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GMAIL_TRIGGER_THREAD_UPDATED'][0],
      TriggerIntentToInputOutput['GMAIL_TRIGGER_THREAD_UPDATED'][1]
    >;

    /**
     * Thread Modified
     * method for GMAIL_TRIGGER_THREAD_MODIFIED
     */
    threadModified: (
      inputs: TriggerIntentToInputOutput['GMAIL_TRIGGER_THREAD_MODIFIED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['GMAIL_TRIGGER_THREAD_MODIFIED'][0],
      TriggerIntentToInputOutput['GMAIL_TRIGGER_THREAD_MODIFIED'][1]
    >;
  };
};
