import { ConditionalInput } from '@useparagon/core/steps/library/conditional';

/**
 * Send Email intent type
 */
type GmailSendEmail = {
  /**
   * To
   * Specify the recipients as either a single string or a JSON array.
   *
   * **Example**:
   * ```
   * [
   *  "recipient1@domain.com",
   *  "recipient2@domain.com"
   *]
   * ```
   */
  toRecipients: string;

  /**
   * From
   * The email address or verified alias to send your message from. If not provided, the message will be sent from the default address of your Gmail account.
   *
   */
  from?: string;

  /**
   * Subject
   * Specify the subject of the message.
   *
   */
  subject: string;

  /**
   * Message Content
   * Specify the content of the email message as plain text or HTML.
   *
   */
  messageContent: string;

  /**
   * Attachments
   * Accepts either a single file object or a JSON array of file objects
   *
   * **Example**:
   * ```
   * [{file object}, {file object}]
   * ```
   */
  attachments?: string;

  /**
   * Additional Headers
   * Specify any additional header fields here.
   *
   * **Example**:
   * ```
   * {
   *  "reply-to": "Sender Name <sender@domain.com>",
   *}
   * ```
   */
  additionalHeaders?: string;
};

/**
 * Get Email by ID intent type
 */
type GmailGetEmailById = {
  /**
   * Message ID
   * Specify the ID of the message to retrieve.
   *
   */
  messageId: string;

  /**
   * User ID
   * Specify the user’s email address. If not provided, the current user will be used.
   *
   * **Example**:
   * ```
   * user@domain.com
   * ```
   */
  userId?: string;
};

/**
 * Search for Email intent type
 */
type GmailSearchForEmail = {
  /**
   * Filter search
   *
   */
  emailFilterFormula?: ConditionalInput;
};

/**
 * Delete Email intent type
 */
type GmailDeleteEmail = {
  /**
   * User ID
   * Specify the user’s email address.
   *
   * **Example**:
   * ```
   * user@domain.com
   * ```
   */
  userId: string;

  /**
   * Message ID
   * Specify the ID of the message to trash.
   *
   */
  messageId: string;
};

/**
 * Create a draft in Gmail intent type
 */
type GmailCreateDraft = {
  /**
   * To
   * Specify the recipients as either a single string or a JSON array.
   *
   * **Example**:
   * ```
   * [
   *  "recipient1@domain.com",
   *  "recipient2@domain.com"
   *]
   * ```
   */
  toRecipients?: string;

  /**
   * From
   * Specify the email of the sender.
   *
   */
  from?: string;

  /**
   * Subject
   * Specify the subject of the message.
   *
   */
  subject?: string;

  /**
   * Message Content
   * Specify the content of the email message as plain text or HTML.
   *
   */
  messageContent?: string;

  /**
   * Attachments
   * Accepts either a single file object or a JSON array of file objects
   *
   * **Example**:
   * ```
   * [{file object}, {file object}]
   * ```
   */
  attachments?: string;

  /**
   * Additional Headers
   * Specify any additional header fields here.
   *
   * **Example**:
   * ```
   * {
   *  "reply-to": "Sender Name <sender@domain.com>",
   *}
   * ```
   */
  additionalHeaders?: string;
};

/**
 * Create a Contact intent type
 */
type GmailCreateAContact = {
  /**
   * Given Name
   * Specify the Given Name of the Contact to create.
   *
   * **Example**:
   * ```
   * John
   * ```
   */
  givenName: string;

  /**
   * Family Name
   * Specify the Family Name of the Contact to create.
   *
   * **Example**:
   * ```
   * Doe
   * ```
   */
  familyName: string;

  /**
   * Email
   * Specify the Email Address of the Contact to create.
   *
   */
  email: string;

  /**
   * Additional Fields
   *
   * **Example**:
   * ```
   * {
   *  "addresses": [
   *    {
   *      "streetAddress": "1000 North St.",
   *      "city": "Los Angeles"
   *    }
   *  ]
   *}
   * ```
   */
  additionalFields?: string;
};

/**
 * Get Contact by Resource Name intent type
 */
type GmailGetContactByResourceName = {
  /**
   * Resource Name
   * Specify the resource name of the contact to fetch.
   *
   */
  resourceName: string;
};

/**
 * Search for Contact intent type
 */
type GmailSearchForContact = {
  /**
   * Term
   * Specify a search term to search for near or exact matches on the names, nickNames, emailAddresses, phoneNumbers, or organizations Contact properties.
   *
   */
  searchTerm: string;
};

/**
 * Delete Contact intent type
 */
type GmailDeleteContact = {
  /**
   * Resource Name
   * Specify the resource name of the contact to delete.
   *
   */
  resourceName: string;
};

export type IntentToInputOutput = {
  /**
   * GMAIL_SEND_EMAIL
   */
  GMAIL_SEND_EMAIL: [GmailSendEmail, any];

  /**
   * GMAIL_GET_EMAIL_BY_ID
   */
  GMAIL_GET_EMAIL_BY_ID: [GmailGetEmailById, any];

  /**
   * GMAIL_SEARCH_FOR_EMAIL
   */
  GMAIL_SEARCH_FOR_EMAIL: [GmailSearchForEmail, any];

  /**
   * GMAIL_DELETE_EMAIL
   */
  GMAIL_DELETE_EMAIL: [GmailDeleteEmail, any];

  /**
   * GMAIL_CREATE_DRAFT
   */
  GMAIL_CREATE_DRAFT: [GmailCreateDraft, any];

  /**
   * GMAIL_CREATE_A_CONTACT
   */
  GMAIL_CREATE_A_CONTACT: [GmailCreateAContact, any];

  /**
   * GMAIL_GET_CONTACT_BY_RESOURCE_NAME
   */
  GMAIL_GET_CONTACT_BY_RESOURCE_NAME: [GmailGetContactByResourceName, any];

  /**
   * GMAIL_SEARCH_FOR_CONTACT
   */
  GMAIL_SEARCH_FOR_CONTACT: [GmailSearchForContact, any];

  /**
   * GMAIL_DELETE_CONTACT
   */
  GMAIL_DELETE_CONTACT: [GmailDeleteContact, any];
};
