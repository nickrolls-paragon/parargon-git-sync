import { ConditionalInput } from '@useparagon/core/steps/library/conditional';

/**
 * Get Accounts intent type
 */
type XeroGetAccounts = {
  /**
   * Filter search
   * Get Accounts that match the specified filters.
   *
   * **Example**:
   * ```
   * field
   * ```
   */
  accountsFilterFormula?: ConditionalInput;
};

/**
 * Get Contacts intent type
 */
type XeroGetContacts = {
  /**
   * Filter search
   * Get Customers that match the specified filters.
   *
   * **Example**:
   * ```
   * field
   * ```
   */
  contactsFilterFormula?: ConditionalInput;
};

/**
 * Create Customer intent type
 */
type XeroCreateCustomer = {
  /**
   * Name
   * Full name of contact/organization
   *
   */
  name: string;

  /**
   * First name
   *
   */
  firstName: string;

  /**
   * Last name
   *
   */
  lastName: string;

  /**
   * Email address
   *
   */
  email?: string;

  /**
   * Phone number
   *
   */
  phone?: string;

  /**
   * Account number
   *
   */
  accountNumber?: string;

  /**
   * Billing street address
   *
   */
  addressLine1?: string;

  /**
   * Billing street address line 2
   *
   */
  addressLine2?: string;

  /**
   * Billing city
   *
   */
  billingCity?: string;

  /**
   * Billing State or country subdivision code
   *
   */
  state?: string;

  /**
   * Billing country
   *
   */
  country?: string;

  /**
   * Billing postal code
   *
   */
  postalCode?: string;
};

/**
 * Update Customer intent type
 */
type XeroUpdateCustomer = {
  /**
   * Name
   * Full name of contact/organization
   *
   */
  name: string;

  /**
   * Customer ID
   * The ID of the customer to update.
   *
   * **Example**:
   * ```
   * Customer ID
   * ```
   */
  customerId: string;

  /**
   * First name
   *
   */
  firstName?: string;

  /**
   * Last name
   *
   */
  lastName?: string;

  /**
   * Email address
   *
   */
  email?: string;

  /**
   * Phone number
   *
   */
  phone?: string;

  /**
   * Account number
   *
   */
  accountNumber?: string;

  /**
   * Billing street address
   *
   */
  addressLine1?: string;

  /**
   * Billing street address line 2
   *
   */
  addressLine2?: string;

  /**
   * Billing city
   *
   */
  billingCity?: string;

  /**
   * Billing State or country subdivision code
   *
   */
  state?: string;

  /**
   * Billing country
   *
   */
  country?: string;

  /**
   * Billing postal code
   *
   */
  postalCode?: string;
};

/**
 * Get invoices intent type
 */
type XeroGetInvoices = {
  /**
   * Filter search
   * Get invoices that match the specified filters.
   *
   * **Example**:
   * ```
   * field
   * ```
   */
  invoicesFilterFormula?: ConditionalInput;
};

/**
 * Create invoice intent type
 */
type XeroCreateInvoice = {
  /**
   * Invoice Type
   *
   */
  invoiceType: 'ACCPAY' | 'ACCREC';

  /**
   * Contact
   * The customer this invoice is associated with.
   *
   * **Example**:
   * ```
   * Contact ID
   * ```
   */
  contactId: string;

  /**
   * Line items
   * Enter an array of Line items including the description, quantity, and amount for each Line item.
   *
   * **Example**:
   * ```
   * [
   *  {
   *    "Description": "White T-Shirt",
   *    "Quantity": "2",
   *    "UnitAmount": "20.00",
   *    "AccountCode": "200"
   *  }
   *]
   *
   * ```
   */
  lineItems: string;

  /**
   * Status
   *
   */
  invoiceStatus?: 'DRAFT' | 'SUBMITTED' | 'AUTHORISED';

  /**
   * Date
   * Date the invoice was issued.
   *
   * **Example**:
   * ```
   * YYYY-MM-DD
   * ```
   */
  date?: string;

  /**
   * Due Date
   * Date the invoice is due.
   *
   * **Example**:
   * ```
   * YYYY-MM-DD
   * ```
   */
  dueDate?: string;

  /**
   * Currency
   *
   * **Example**:
   * ```
   * USD
   * ```
   */
  currency?: string;

  /**
   * Invoice Number
   * Alpha numeric code identifying the invoice
   *
   * **Example**:
   * ```
   * OIT00546
   * ```
   */
  invoiceNumber?: string;

  /**
   * Reference
   *
   */
  reference?: string;
};

/**
 * Update invoice intent type
 */
type XeroUpdateInvoice = {
  /**
   * Invoice ID
   *
   */
  invoiceId: string;

  /**
   * Status
   *
   */
  invoiceStatus?: 'DRAFT' | 'SUBMITTED' | 'AUTHORISED';

  /**
   * Reference
   *
   */
  reference?: string;
};

/**
 * Send invoice intent type
 */
type XeroSendInvoice = {
  /**
   * Invoice ID
   *
   */
  invoiceId: string;

  /**
   * Send to email address
   * Updates the invoice’s billing email address to the email provided. If left blank, sends to the invoice’s existing billing email address.
   *
   * **Example**:
   * ```
   * name@example.com
   * ```
   */
  sendToEmail?: string;
};

/**
 * Get payments intent type
 */
type XeroGetPayments = {
  /**
   * Filter search
   * Get payments that match the specified filters.
   *
   * **Example**:
   * ```
   * field
   * ```
   */
  paymentsFilterFormula?: ConditionalInput;
};

/**
 * Create payments intent type
 */
type XeroCreatePayment = {
  /**
   * Total amount
   *
   * **Example**:
   * ```
   * 25.0
   * ```
   */
  totalAmount: string;

  /**
   * Linked invoice
   * Applies this payment to an existing invoice in Xero.
   *
   */
  linkedInvoice?: string;

  /**
   * Account ID
   * ID of the Account used to make the payment.
   *
   * **Example**:
   * ```
   * {{settings.accountID}}
   * ```
   */
  accountId: string;

  /**
   * Currency
   *
   * **Example**:
   * ```
   * USD
   * ```
   */
  currency?: string;
};

export type IntentToInputOutput = {
  /**
   * XERO_GET_ACCOUNTS
   */
  XERO_GET_ACCOUNTS: [XeroGetAccounts, any];

  /**
   * XERO_GET_CONTACTS
   */
  XERO_GET_CONTACTS: [XeroGetContacts, any];

  /**
   * XERO_CREATE_CUSTOMER
   */
  XERO_CREATE_CUSTOMER: [XeroCreateCustomer, any];

  /**
   * XERO_UPDATE_CUSTOMER
   */
  XERO_UPDATE_CUSTOMER: [XeroUpdateCustomer, any];

  /**
   * XERO_GET_INVOICES
   */
  XERO_GET_INVOICES: [XeroGetInvoices, any];

  /**
   * XERO_CREATE_INVOICE
   */
  XERO_CREATE_INVOICE: [XeroCreateInvoice, any];

  /**
   * XERO_UPDATE_INVOICE
   */
  XERO_UPDATE_INVOICE: [XeroUpdateInvoice, any];

  /**
   * XERO_SEND_INVOICE
   */
  XERO_SEND_INVOICE: [XeroSendInvoice, any];

  /**
   * XERO_GET_PAYMENTS
   */
  XERO_GET_PAYMENTS: [XeroGetPayments, any];

  /**
   * XERO_CREATE_PAYMENT
   */
  XERO_CREATE_PAYMENT: [XeroCreatePayment, any];
};
