/**
 * Create a Page intent type
 */
type NotionCreatePage = {
  /**
   * Parent
   * The parent page or database where the new page is inserted, represented as a JSON object with a page_id or database_id key, and the corresponding ID.
   *
   * **Example**:
   * ```
   * {
   *  "database_id":"{{DATABASE_ID}}"
   *}
   * ```
   */
  parent: string;

  /**
   * Properties
   * The values of the pageâ€™s properties. If the parent is a database, then the schema must match the parent databaseâ€™s properties. If the parent is a page, then the only valid object key is title.
   *
   * **Example**:
   * ```
   * {
   *  "title":[
   *    {
   *      "text":{
   *        "content":"My Page"
   *      }
   *    }
   *  ]
   *}
   * ```
   */
  properties: string;

  /**
   * Children
   *
   * **Example**:
   * ```
   * [
   *  {
   *    "object":"block",
   *    "type":"heading_2",
   *    "heading_2":{
   *      "rich_text":[
   *        {
   *          "type":"text",
   *          "text":{
   *            "content":"Lacinato kale"
   *          }
   *        }
   *      ]
   *    }
   *  }
   *]
   * ```
   */
  children?: string;

  /**
   * Cover
   *
   * **Example**:
   * ```
   * {
   *  "external":{
   *    "url":"https://upload.wikimedia.org/wikipedia/commons/6/62/Tuscankale.jpg"
   *  }
   *}
   * ```
   */
  cover?: string;

  /**
   * Icon
   *
   * **Example**:
   * ```
   * {
   *  "emoji":"ðŸ¥¬"
   *}
   * ```
   */
  icon: string;
};

/**
 * Update Page intent type
 */
type NotionUpdatePage = {
  /**
   * Page ID
   * Specify the ID of the Page to Update.
   *
   * **Example**:
   * ```
   * 59833787-2cf9-4fdf-8782-e53db20768a5
   * ```
   */
  pageId: string;

  /**
   * Archived
   * Whether the page is archived (deleted). Set to true to archive a page. Set to false to un-archive (restore) a page.
   *
   */
  archived?: boolean;

  /**
   * Properties
   * The property values to update for the page. The keys are the names or IDs of the property and the values are property values. If a page property ID is not included, then it is not changed.
   *
   * **Example**:
   * ```
   * {
   *  "title":[
   *    {
   *      "text":{
   *        "content":"My Page"
   *      }
   *    }
   *  ]
   *}
   * ```
   */
  properties?: string;

  /**
   * Cover
   *
   * **Example**:
   * ```
   * {
   *  "external":{
   *    "url":"https://upload.wikimedia.org/wikipedia/commons/6/62/Tuscankale.jpg"
   *  }
   *}
   * ```
   */
  cover?: string;

  /**
   * Icon
   *
   * **Example**:
   * ```
   * {
   *  "emoji":"ðŸ¥¬"
   *}
   * ```
   */
  icon: string;
};

/**
 * Get Pageâ€™s Details intent type
 */
type NotionGetPageById = {
  /**
   * Page ID
   * Specify the ID of the Page to Get.
   *
   * **Example**:
   * ```
   * 59833787-2cf9-4fdf-8782-e53db20768a5
   * ```
   */
  pageId: string;
};

/**
 * Archive a Page intent type
 */
type NotionArchivePage = {
  /**
   * Page ID
   * Specify the ID of the Page to Archive.
   *
   * **Example**:
   * ```
   * 59833787-2cf9-4fdf-8782-e53db20768a5
   * ```
   */
  pageId: string;
};

/**
 * Search Pages intent type
 */
type NotionSearchPages = {
  /**
   * Query
   * The text that the API compares page and database titles against.
   *
   */
  query?: string;

  /**
   * Object Type
   * The type of object to search for.
   *
   */
  objectType?: 'page' | 'database';

  /**
   * Direction
   * The direction to sort the results by.
   *
   */
  direction?: 'ascending' | 'descending';

  /**
   * Limit
   * The number of records to return, returns all records if not specified.
   *
   */
  pageSize?: string;
};

/**
 * Get a Pageâ€™s Contents intent type
 */
type NotionGetPageContent = {
  /**
   * Page ID
   * Specify a Block or Page ID to receive all of its blockâ€™s children in order.
   *
   * **Example**:
   * ```
   * 59833787-2cf9-4fdf-8782-e53db20768a5
   * ```
   */
  blockId: string;
};

/**
 * Get a Page as Markdown intent type
 */
type NotionGetPageAsMarkdown = {
  /**
   * Page ID
   * Specify the ID of the Page to get as Markdown.
   *
   * **Example**:
   * ```
   * 59833787-2cf9-4fdf-8782-e53db20768a5
   * ```
   */
  pageId: string;
};

/**
 * Create a Page with Markdown intent type
 */
type NotionCreatePageWithMarkdown = {
  /**
   * Parent
   * The parent page or database where the new page is inserted, represented as a JSON object with a page_id or database_id key, and the corresponding ID.
   *
   * **Example**:
   * ```
   * {
   *  "database_id":"{{DATABASE_ID}}"
   *}
   * ```
   */
  parent: string;

  /**
   * Title
   * The title of the page. Required if no properties are provided. Ignored if properties are provided with title.
   *
   */
  title: string;

  /**
   * Properties
   * The values of the pageâ€™s properties. If the parent is a database, then the schema must match the parent databaseâ€™s properties. If the parent is a page, then the only valid object key is title.
   *
   * **Example**:
   * ```
   * {
   *  "title":[
   *    {
   *      "text":{
   *        "content":"My Page"
   *      }
   *    }
   *  ]
   *}
   * ```
   */
  properties?: string;

  /**
   * Markdown Content
   * The content to create the page with, in Markdown format.
   *
   * **Example**:
   * ```
   * # My Page
   *
   *This is the content of my page in **Markdown** format.
   *
   *- List item 1
   *- List item 2
   * ```
   */
  markdownContent?: string;

  /**
   * Cover
   *
   * **Example**:
   * ```
   * {
   *  "external":{
   *    "url":"https://upload.wikimedia.org/wikipedia/commons/6/62/Tuscankale.jpg"
   *  }
   *}
   * ```
   */
  cover?: string;

  /**
   * Icon
   *
   * **Example**:
   * ```
   * {
   *  "emoji":"ðŸ¥¬"
   *}
   * ```
   */
  icon?: string;
};

/**
 * Update a Page with Markdown intent type
 */
type NotionUpdatePageWithMarkdown = {
  /**
   * Page ID
   * Specify the ID of the Page to Update.
   *
   * **Example**:
   * ```
   * 59833787-2cf9-4fdf-8782-e53db20768a5
   * ```
   */
  pageId: string;

  /**
   * Title
   * The title of the page. Required if no properties are provided. Ignored if properties are provided with title.
   *
   */
  title?: string;

  /**
   * Properties
   * The property values to update for the page. The keys are the names or IDs of the property and the values are property values. If a page property ID is not included, then it is not changed.
   *
   * **Example**:
   * ```
   * {
   *  "title":[
   *    {
   *      "text":{
   *        "content":"My Page"
   *      }
   *    }
   *  ]
   *}
   * ```
   */
  properties?: string;

  /**
   * Markdown Content
   * The content to update the page with, in Markdown format. If Replace Existing Content is True, this will replace the existing content. If Replace Existing Content is False, this will append to the existing content.
   *
   * **Example**:
   * ```
   * # My Page
   *
   *This is the content of my page in **Markdown** format.
   *
   *- List item 1
   *- List item 2
   * ```
   */
  markdownContent?: string;

  /**
   * Replace Existing Content
   * If Yes, existing page content will be replaced. If No, new content will be appended.
   *
   */
  replaceExisting?: boolean;

  /**
   * Cover
   *
   * **Example**:
   * ```
   * {
   *  "external":{
   *    "url":"https://upload.wikimedia.org/wikipedia/commons/6/62/Tuscankale.jpg"
   *  }
   *}
   * ```
   */
  cover?: string;

  /**
   * Icon
   *
   * **Example**:
   * ```
   * {
   *  "emoji":"ðŸ¥¬"
   *}
   * ```
   */
  icon?: string;

  /**
   * Archived
   * Whether the page is archived (deleted). Set to true to archive a page. Set to false to un-archive (restore) a page.
   *
   */
  archived?: boolean;
};

/**
 * Update a Block intent type
 */
type NotionUpdateBlock = {
  /**
   * Block ID
   * Specify the ID of the Block to Update.
   *
   * **Example**:
   * ```
   * 9bc30ad4-9373-46a5-84ab-0a7845ee52e6
   * ```
   */
  blockId: string;

  /**
   * Archived
   * Set to true to archive (delete) a block. Set to false to un-archive (restore) a block.
   *
   */
  archived?: boolean;

  /**
   * Paragraph
   *
   * **Example**:
   * ```
   * {
   *  "rich_text":[
   *    {
   *      "type":"text",
   *      "text":{
   *        "content":"Lacinato kale",
   *        "link":null
   *      }
   *    }
   *  ],
   *  "color":"default"
   *}
   * ```
   */
  paragraph?: string;

  /**
   * Image
   *
   * **Example**:
   * ```
   * {
   *  "type":"external",
   *  "external":{
   *    "url":"https://website.domain/images/image.png"
   *  }
   *}
   * ```
   */
  image?: string;

  /**
   * Bookmark
   *
   * **Example**:
   * ```
   * {
   *  "caption":[],
   *  "url":"https://companywebsite.com"
   *}
   * ```
   */
  bookmark?: string;

  /**
   * Code
   *
   * **Example**:
   * ```
   * {
   *  "rich_text":[
   *    {
   *      "type":"text",
   *      "text":{
   *        "content":"const a = 3"
   *      }
   *    }
   *  ],
   *  "language":"javascript"
   *}
   * ```
   */
  code?: string;

  /**
   * PDF
   *
   * **Example**:
   * ```
   * {
   *  "type": "external",
   *  "external": {
   *      "url": "https://website.domain/files/doc.pdf"
   *  }
   *}
   * ```
   */
  pdf?: string;

  /**
   * Table
   *
   * **Example**:
   * ```
   * {
   *  "table_width":2,
   *  "has_column_header":false,
   *  "has_row_header":false
   *}
   * ```
   */
  table?: string;

  /**
   * Table of Contents
   *
   * **Example**:
   * ```
   * {
   *  "color":"default"
   *}
   * ```
   */
  tableOfContent?: string;

  /**
   * Additional Fields
   *
   * **Example**:
   * ```
   * {
   *  "child_page":{
   *    "title":"Lacinato kale"
   *  },
   *  "child_database":{
   *    "title":"My database"
   *  }
   *}
   * ```
   */
  additionalFields?: string;
};

/**
 * Retrieve a Block intent type
 */
type NotionGetBlockById = {
  /**
   * Block ID
   * Specify the ID of the Block to Get.
   *
   * **Example**:
   * ```
   * 9bc30ad4-9373-46a5-84ab-0a7845ee52e6
   * ```
   */
  blockId: string;
};

/**
 * Delete a Block intent type
 */
type NotionDeleteBlock = {
  /**
   * Block ID
   * Specify the ID of the Block to Delete.
   *
   * **Example**:
   * ```
   * 9bc30ad4-9373-46a5-84ab-0a7845ee52e6
   * ```
   */
  blockId: string;
};

export type IntentToInputOutput = {
  /**
   * NOTION_CREATE_PAGE
   */
  NOTION_CREATE_PAGE: [NotionCreatePage, any];

  /**
   * NOTION_UPDATE_PAGE
   */
  NOTION_UPDATE_PAGE: [NotionUpdatePage, any];

  /**
   * NOTION_GET_PAGE_BY_ID
   */
  NOTION_GET_PAGE_BY_ID: [NotionGetPageById, any];

  /**
   * NOTION_ARCHIVE_PAGE
   */
  NOTION_ARCHIVE_PAGE: [NotionArchivePage, any];

  /**
   * NOTION_SEARCH_PAGES
   */
  NOTION_SEARCH_PAGES: [NotionSearchPages, any];

  /**
   * NOTION_GET_PAGE_CONTENT
   */
  NOTION_GET_PAGE_CONTENT: [NotionGetPageContent, any];

  /**
   * NOTION_GET_PAGE_AS_MARKDOWN
   */
  NOTION_GET_PAGE_AS_MARKDOWN: [NotionGetPageAsMarkdown, any];

  /**
   * NOTION_CREATE_PAGE_WITH_MARKDOWN
   */
  NOTION_CREATE_PAGE_WITH_MARKDOWN: [NotionCreatePageWithMarkdown, any];

  /**
   * NOTION_UPDATE_PAGE_WITH_MARKDOWN
   */
  NOTION_UPDATE_PAGE_WITH_MARKDOWN: [NotionUpdatePageWithMarkdown, any];

  /**
   * NOTION_UPDATE_BLOCK
   */
  NOTION_UPDATE_BLOCK: [NotionUpdateBlock, any];

  /**
   * NOTION_GET_BLOCK_BY_ID
   */
  NOTION_GET_BLOCK_BY_ID: [NotionGetBlockById, any];

  /**
   * NOTION_DELETE_BLOCK
   */
  NOTION_DELETE_BLOCK: [NotionDeleteBlock, any];
};
