import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type INotionIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type: 'text' | 'number' | 'email' | 'url' | 'boolean' | 'password';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, INotionIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for notion
 */
export type INotionIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Create a Page
     * method for NOTION_CREATE_PAGE
     */
    createPage: (
      inputs: IntentToInputOutput['NOTION_CREATE_PAGE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['NOTION_CREATE_PAGE'][0],
      IntentToInputOutput['NOTION_CREATE_PAGE'][1]
    >;

    /**
     * Update Page
     * method for NOTION_UPDATE_PAGE
     */
    updatePage: (
      inputs: IntentToInputOutput['NOTION_UPDATE_PAGE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['NOTION_UPDATE_PAGE'][0],
      IntentToInputOutput['NOTION_UPDATE_PAGE'][1]
    >;

    /**
     * Get Page’s Details
     * method for NOTION_GET_PAGE_BY_ID
     */
    getPageById: (
      inputs: IntentToInputOutput['NOTION_GET_PAGE_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['NOTION_GET_PAGE_BY_ID'][0],
      IntentToInputOutput['NOTION_GET_PAGE_BY_ID'][1]
    >;

    /**
     * Archive a Page
     * method for NOTION_ARCHIVE_PAGE
     */
    archivePage: (
      inputs: IntentToInputOutput['NOTION_ARCHIVE_PAGE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['NOTION_ARCHIVE_PAGE'][0],
      IntentToInputOutput['NOTION_ARCHIVE_PAGE'][1]
    >;

    /**
     * Search Pages
     * method for NOTION_SEARCH_PAGES
     */
    searchPages: (
      inputs: IntentToInputOutput['NOTION_SEARCH_PAGES'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['NOTION_SEARCH_PAGES'][0],
      IntentToInputOutput['NOTION_SEARCH_PAGES'][1]
    >;

    /**
     * Get a Page’s Contents
     * method for NOTION_GET_PAGE_CONTENT
     */
    getPageContent: (
      inputs: IntentToInputOutput['NOTION_GET_PAGE_CONTENT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['NOTION_GET_PAGE_CONTENT'][0],
      IntentToInputOutput['NOTION_GET_PAGE_CONTENT'][1]
    >;

    /**
     * Get a Page as Markdown
     * method for NOTION_GET_PAGE_AS_MARKDOWN
     */
    getPageAsMarkdown: (
      inputs: IntentToInputOutput['NOTION_GET_PAGE_AS_MARKDOWN'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['NOTION_GET_PAGE_AS_MARKDOWN'][0],
      IntentToInputOutput['NOTION_GET_PAGE_AS_MARKDOWN'][1]
    >;

    /**
     * Create a Page with Markdown
     * method for NOTION_CREATE_PAGE_WITH_MARKDOWN
     */
    createPageWithMarkdown: (
      inputs: IntentToInputOutput['NOTION_CREATE_PAGE_WITH_MARKDOWN'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['NOTION_CREATE_PAGE_WITH_MARKDOWN'][0],
      IntentToInputOutput['NOTION_CREATE_PAGE_WITH_MARKDOWN'][1]
    >;

    /**
     * Update a Page with Markdown
     * method for NOTION_UPDATE_PAGE_WITH_MARKDOWN
     */
    updatePageWithMarkdown: (
      inputs: IntentToInputOutput['NOTION_UPDATE_PAGE_WITH_MARKDOWN'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['NOTION_UPDATE_PAGE_WITH_MARKDOWN'][0],
      IntentToInputOutput['NOTION_UPDATE_PAGE_WITH_MARKDOWN'][1]
    >;

    /**
     * Update a Block
     * method for NOTION_UPDATE_BLOCK
     */
    updateBlock: (
      inputs: IntentToInputOutput['NOTION_UPDATE_BLOCK'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['NOTION_UPDATE_BLOCK'][0],
      IntentToInputOutput['NOTION_UPDATE_BLOCK'][1]
    >;

    /**
     * Retrieve a Block
     * method for NOTION_GET_BLOCK_BY_ID
     */
    getBlockById: (
      inputs: IntentToInputOutput['NOTION_GET_BLOCK_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['NOTION_GET_BLOCK_BY_ID'][0],
      IntentToInputOutput['NOTION_GET_BLOCK_BY_ID'][1]
    >;

    /**
     * Delete a Block
     * method for NOTION_DELETE_BLOCK
     */
    deleteBlock: (
      inputs: IntentToInputOutput['NOTION_DELETE_BLOCK'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['NOTION_DELETE_BLOCK'][0],
      IntentToInputOutput['NOTION_DELETE_BLOCK'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Page Created
     * method for NOTION_TRIGGER_PAGE_CREATED
     */
    pageCreated: (
      inputs: TriggerIntentToInputOutput['NOTION_TRIGGER_PAGE_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['NOTION_TRIGGER_PAGE_CREATED'][0],
      TriggerIntentToInputOutput['NOTION_TRIGGER_PAGE_CREATED'][1]
    >;

    /**
     * Page Updated
     * method for NOTION_TRIGGER_PAGE_UPDATED
     */
    pageUpdated: (
      inputs: TriggerIntentToInputOutput['NOTION_TRIGGER_PAGE_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['NOTION_TRIGGER_PAGE_UPDATED'][0],
      TriggerIntentToInputOutput['NOTION_TRIGGER_PAGE_UPDATED'][1]
    >;
  };
};
