const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for notion
 */
exports.inputs = [];

/**
 * triggers for notion
 */
exports.triggers = [
  {
    title: 'Page Created',
    name: 'NOTION_TRIGGER_PAGE_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Page Updated',
    name: 'NOTION_TRIGGER_PAGE_UPDATED',
    output: [],
    inputs: [],
  },
];

/**
 * intents for notion
 */
exports.intents = [
  {
    title: 'Create a Page',
    name: 'NOTION_CREATE_PAGE',
    output: [],
    inputs: [
      {
        id: 'parent',
        title: 'Parent',
        type: 'CODE',
        subtitle:
          'The parent page or database where the new page is inserted, represented as a JSON object with a page_id or database_id key, and the corresponding ID.',
        placeholder: '{\n  "database_id":"{{DATABASE_ID}}"\n}',
        required: true,
      },
      {
        id: 'properties',
        title: 'Properties',
        type: 'CODE',
        subtitle:
          'The values of the pageâ€™s properties. If the parent is a database, then the schema must match the parent databaseâ€™s properties. If the parent is a page, then the only valid object key is title.',
        placeholder:
          '{\n  "title":[\n    {\n      "text":{\n        "content":"My Page"\n      }\n    }\n  ]\n}',
        required: true,
      },
      {
        id: 'children',
        title: 'Children',
        type: 'CODE',
        placeholder:
          '[\n  {\n    "object":"block",\n    "type":"heading_2",\n    "heading_2":{\n      "rich_text":[\n        {\n          "type":"text",\n          "text":{\n            "content":"Lacinato kale"\n          }\n        }\n      ]\n    }\n  }\n]',
      },
      {
        id: 'cover',
        title: 'Cover',
        type: 'CODE',
        placeholder:
          '{\n  "external":{\n    "url":"https://upload.wikimedia.org/wikipedia/commons/6/62/Tuscankale.jpg"\n  }\n}',
      },
      {
        id: 'icon',
        title: 'Icon',
        type: 'CODE',
        placeholder: '{\n  "emoji":"ðŸ¥¬"\n}',
        required: true,
      },
    ],
  },
  {
    title: 'Update Page',
    name: 'NOTION_UPDATE_PAGE',
    output: [],
    inputs: [
      {
        id: 'pageId',
        title: 'Page ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the Page to Update.',
        placeholder: '59833787-2cf9-4fdf-8782-e53db20768a5',
        required: true,
      },
      {
        id: 'archived',
        title: 'Archived',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Whether the page is archived (deleted). Set to true to archive a page. Set to false to un-archive (restore) a page.',
        defaultValue: false,
      },
      {
        id: 'properties',
        title: 'Properties',
        type: 'CODE',
        subtitle:
          'The property values to update for the page. The keys are the names or IDs of the property and the values are property values. If a page property ID is not included, then it is not changed.',
        placeholder:
          '{\n  "title":[\n    {\n      "text":{\n        "content":"My Page"\n      }\n    }\n  ]\n}',
      },
      {
        id: 'cover',
        title: 'Cover',
        type: 'CODE',
        placeholder:
          '{\n  "external":{\n    "url":"https://upload.wikimedia.org/wikipedia/commons/6/62/Tuscankale.jpg"\n  }\n}',
      },
      {
        id: 'icon',
        title: 'Icon',
        type: 'CODE',
        placeholder: '{\n  "emoji":"ðŸ¥¬"\n}',
        required: true,
      },
    ],
  },
  {
    title: 'Get Pageâ€™s Details',
    name: 'NOTION_GET_PAGE_BY_ID',
    output: [],
    inputs: [
      {
        id: 'pageId',
        title: 'Page ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the Page to Get.',
        placeholder: '59833787-2cf9-4fdf-8782-e53db20768a5',
        required: true,
      },
    ],
  },
  {
    title: 'Archive a Page',
    name: 'NOTION_ARCHIVE_PAGE',
    output: [],
    inputs: [
      {
        id: 'pageId',
        title: 'Page ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the Page to Archive.',
        placeholder: '59833787-2cf9-4fdf-8782-e53db20768a5',
        required: true,
      },
    ],
  },
  {
    title: 'Search Pages',
    name: 'NOTION_SEARCH_PAGES',
    output: [],
    inputs: [
      {
        id: 'query',
        title: 'Query',
        type: 'TEXT',
        subtitle:
          'The text that the API compares page and database titles against.',
      },
      {
        id: 'objectType',
        title: 'Object Type',
        type: 'ENUM',
        subtitle: 'The type of object to search for.',
        values: ['page', 'database'],
      },
      {
        id: 'direction',
        title: 'Direction',
        type: 'ENUM',
        subtitle: 'The direction to sort the results by.',
        values: ['ascending', 'descending'],
      },
      {
        id: 'pageSize',
        title: 'Limit',
        type: 'TEXT',
        subtitle:
          'The number of records to return, returns all records if not specified.',
      },
    ],
  },
  {
    title: 'Get a Pageâ€™s Contents',
    name: 'NOTION_GET_PAGE_CONTENT',
    output: [],
    inputs: [
      {
        id: 'blockId',
        title: 'Page ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a Block or Page ID to receive all of its blockâ€™s children in order.',
        placeholder: '59833787-2cf9-4fdf-8782-e53db20768a5',
        required: true,
      },
    ],
  },
  {
    title: 'Get a Page as Markdown',
    name: 'NOTION_GET_PAGE_AS_MARKDOWN',
    output: [],
    inputs: [
      {
        id: 'pageId',
        title: 'Page ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the Page to get as Markdown.',
        placeholder: '59833787-2cf9-4fdf-8782-e53db20768a5',
        required: true,
      },
    ],
  },
  {
    title: 'Create a Page with Markdown',
    name: 'NOTION_CREATE_PAGE_WITH_MARKDOWN',
    output: [],
    inputs: [
      {
        id: 'parent',
        title: 'Parent',
        type: 'CODE',
        subtitle:
          'The parent page or database where the new page is inserted, represented as a JSON object with a page_id or database_id key, and the corresponding ID.',
        placeholder: '{\n  "database_id":"{{DATABASE_ID}}"\n}',
        required: true,
      },
      {
        id: 'title',
        title: 'Title',
        type: 'TEXTAREA',
        subtitle:
          'The title of the page. Required if no properties are provided. Ignored if properties are provided with title.',
        required: true,
      },
      {
        id: 'properties',
        title: 'Properties',
        type: 'CODE',
        subtitle:
          'The values of the pageâ€™s properties. If the parent is a database, then the schema must match the parent databaseâ€™s properties. If the parent is a page, then the only valid object key is title.',
        placeholder:
          '{\n  "title":[\n    {\n      "text":{\n        "content":"My Page"\n      }\n    }\n  ]\n}',
      },
      {
        id: 'markdownContent',
        title: 'Markdown Content',
        type: 'TEXTAREA',
        subtitle: 'The content to create the page with, in Markdown format.',
        placeholder:
          '# My Page\n\nThis is the content of my page in **Markdown** format.\n\n- List item 1\n- List item 2',
      },
      {
        id: 'cover',
        title: 'Cover',
        type: 'CODE',
        placeholder:
          '{\n  "external":{\n    "url":"https://upload.wikimedia.org/wikipedia/commons/6/62/Tuscankale.jpg"\n  }\n}',
      },
      {
        id: 'icon',
        title: 'Icon',
        type: 'CODE',
        placeholder: '{\n  "emoji":"ðŸ¥¬"\n}',
      },
    ],
  },
  {
    title: 'Update a Page with Markdown',
    name: 'NOTION_UPDATE_PAGE_WITH_MARKDOWN',
    output: [],
    inputs: [
      {
        id: 'pageId',
        title: 'Page ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the Page to Update.',
        placeholder: '59833787-2cf9-4fdf-8782-e53db20768a5',
        required: true,
      },
      {
        id: 'title',
        title: 'Title',
        type: 'TEXTAREA',
        subtitle:
          'The title of the page. Required if no properties are provided. Ignored if properties are provided with title.',
      },
      {
        id: 'properties',
        title: 'Properties',
        type: 'CODE',
        subtitle:
          'The property values to update for the page. The keys are the names or IDs of the property and the values are property values. If a page property ID is not included, then it is not changed.',
        placeholder:
          '{\n  "title":[\n    {\n      "text":{\n        "content":"My Page"\n      }\n    }\n  ]\n}',
      },
      {
        id: 'markdownContent',
        title: 'Markdown Content',
        type: 'TEXTAREA',
        subtitle:
          'The content to update the page with, in Markdown format. If Replace Existing Content is True, this will replace the existing content. If Replace Existing Content is False, this will append to the existing content.',
        placeholder:
          '# My Page\n\nThis is the content of my page in **Markdown** format.\n\n- List item 1\n- List item 2',
      },
      {
        id: 'replaceExisting',
        title: 'Replace Existing Content',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If Yes, existing page content will be replaced. If No, new content will be appended.',
        defaultValue: true,
      },
      {
        id: 'cover',
        title: 'Cover',
        type: 'CODE',
        placeholder:
          '{\n  "external":{\n    "url":"https://upload.wikimedia.org/wikipedia/commons/6/62/Tuscankale.jpg"\n  }\n}',
      },
      {
        id: 'icon',
        title: 'Icon',
        type: 'CODE',
        placeholder: '{\n  "emoji":"ðŸ¥¬"\n}',
      },
      {
        id: 'archived',
        title: 'Archived',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Whether the page is archived (deleted). Set to true to archive a page. Set to false to un-archive (restore) a page.',
        defaultValue: false,
      },
    ],
  },
  {
    title: 'Update a Block',
    name: 'NOTION_UPDATE_BLOCK',
    output: [],
    inputs: [
      {
        id: 'blockId',
        title: 'Block ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the Block to Update.',
        placeholder: '9bc30ad4-9373-46a5-84ab-0a7845ee52e6',
        required: true,
      },
      {
        id: 'archived',
        title: 'Archived',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Set to true to archive (delete) a block. Set to false to un-archive (restore) a block.',
        defaultValue: false,
      },
      {
        id: 'paragraph',
        title: 'Paragraph',
        type: 'CODE',
        placeholder:
          '{\n  "rich_text":[\n    {\n      "type":"text",\n      "text":{\n        "content":"Lacinato kale",\n        "link":null\n      }\n    }\n  ],\n  "color":"default"\n}',
      },
      {
        id: 'image',
        title: 'Image',
        type: 'CODE',
        placeholder:
          '{\n  "type":"external",\n  "external":{\n    "url":"https://website.domain/images/image.png"\n  }\n}',
      },
      {
        id: 'bookmark',
        title: 'Bookmark',
        type: 'CODE',
        placeholder:
          '{\n  "caption":[],\n  "url":"https://companywebsite.com"\n}',
      },
      {
        id: 'code',
        title: 'Code',
        type: 'CODE',
        placeholder:
          '{\n  "rich_text":[\n    {\n      "type":"text",\n      "text":{\n        "content":"const a = 3"\n      }\n    }\n  ],\n  "language":"javascript"\n}',
      },
      {
        id: 'pdf',
        title: 'PDF',
        type: 'CODE',
        placeholder:
          '{\n  "type": "external",\n  "external": {\n      "url": "https://website.domain/files/doc.pdf"\n  }\n}',
      },
      {
        id: 'table',
        title: 'Table',
        type: 'CODE',
        placeholder:
          '{\n  "table_width":2,\n  "has_column_header":false,\n  "has_row_header":false\n}',
      },
      {
        id: 'tableOfContent',
        title: 'Table of Contents',
        type: 'CODE',
        placeholder: '{\n  "color":"default"\n}',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n  "child_page":{\n    "title":"Lacinato kale"\n  },\n  "child_database":{\n    "title":"My database"\n  }\n}',
      },
    ],
  },
  {
    title: 'Retrieve a Block',
    name: 'NOTION_GET_BLOCK_BY_ID',
    output: [],
    inputs: [
      {
        id: 'blockId',
        title: 'Block ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the Block to Get.',
        placeholder: '9bc30ad4-9373-46a5-84ab-0a7845ee52e6',
        required: true,
      },
    ],
  },
  {
    title: 'Delete a Block',
    name: 'NOTION_DELETE_BLOCK',
    output: [],
    inputs: [
      {
        id: 'blockId',
        title: 'Block ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the Block to Delete.',
        placeholder: '9bc30ad4-9373-46a5-84ab-0a7845ee52e6',
        required: true,
      },
    ],
  },
];

/**
 * integration class for notion
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'notion',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create a Page
     * method for NOTION_CREATE_PAGE
     */
    createPage: (inputs, options) => {
      return new ActionStep({
        intent: 'NOTION_CREATE_PAGE',
        actionType: 'notion',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Page
     * method for NOTION_UPDATE_PAGE
     */
    updatePage: (inputs, options) => {
      return new ActionStep({
        intent: 'NOTION_UPDATE_PAGE',
        actionType: 'notion',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Pageâ€™s Details
     * method for NOTION_GET_PAGE_BY_ID
     */
    getPageById: (inputs, options) => {
      return new ActionStep({
        intent: 'NOTION_GET_PAGE_BY_ID',
        actionType: 'notion',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Archive a Page
     * method for NOTION_ARCHIVE_PAGE
     */
    archivePage: (inputs, options) => {
      return new ActionStep({
        intent: 'NOTION_ARCHIVE_PAGE',
        actionType: 'notion',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Pages
     * method for NOTION_SEARCH_PAGES
     */
    searchPages: (inputs, options) => {
      return new ActionStep({
        intent: 'NOTION_SEARCH_PAGES',
        actionType: 'notion',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get a Pageâ€™s Contents
     * method for NOTION_GET_PAGE_CONTENT
     */
    getPageContent: (inputs, options) => {
      return new ActionStep({
        intent: 'NOTION_GET_PAGE_CONTENT',
        actionType: 'notion',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get a Page as Markdown
     * method for NOTION_GET_PAGE_AS_MARKDOWN
     */
    getPageAsMarkdown: (inputs, options) => {
      return new ActionStep({
        intent: 'NOTION_GET_PAGE_AS_MARKDOWN',
        actionType: 'notion',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create a Page with Markdown
     * method for NOTION_CREATE_PAGE_WITH_MARKDOWN
     */
    createPageWithMarkdown: (inputs, options) => {
      return new ActionStep({
        intent: 'NOTION_CREATE_PAGE_WITH_MARKDOWN',
        actionType: 'notion',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update a Page with Markdown
     * method for NOTION_UPDATE_PAGE_WITH_MARKDOWN
     */
    updatePageWithMarkdown: (inputs, options) => {
      return new ActionStep({
        intent: 'NOTION_UPDATE_PAGE_WITH_MARKDOWN',
        actionType: 'notion',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update a Block
     * method for NOTION_UPDATE_BLOCK
     */
    updateBlock: (inputs, options) => {
      return new ActionStep({
        intent: 'NOTION_UPDATE_BLOCK',
        actionType: 'notion',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Retrieve a Block
     * method for NOTION_GET_BLOCK_BY_ID
     */
    getBlockById: (inputs, options) => {
      return new ActionStep({
        intent: 'NOTION_GET_BLOCK_BY_ID',
        actionType: 'notion',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete a Block
     * method for NOTION_DELETE_BLOCK
     */
    deleteBlock: (inputs, options) => {
      return new ActionStep({
        intent: 'NOTION_DELETE_BLOCK',
        actionType: 'notion',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Page Created
     * method for NOTION_TRIGGER_PAGE_CREATED
     */
    pageCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'NOTION_TRIGGER_PAGE_CREATED',
        actionType: 'notion',
        parameters: inputs,
      });
    },
    /**
     * Page Updated
     * method for NOTION_TRIGGER_PAGE_UPDATED
     */
    pageUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'NOTION_TRIGGER_PAGE_UPDATED',
        actionType: 'notion',
        parameters: inputs,
      });
    },
  },
};
