const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for zoom
 */
exports.inputs = [];

/**
 * triggers for zoom
 */
exports.triggers = [
  {
    title: 'New Meeting',
    name: 'ZOOM_TRIGGER_MEETING_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Meeting Updated',
    name: 'ZOOM_TRIGGER_MEETING_UPDATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Meeting Ended',
    name: 'ZOOM_TRIGGER_MEETING_ENDED',
    output: [],
    inputs: [],
  },
  {
    title: 'New Meeting Registrant',
    name: 'ZOOM_TRIGGER_MEETING_REGISTRANT_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Meeting Participant Joined',
    name: 'ZOOM_TRIGGER_PARTICIPANT_JOINED',
    output: [],
    inputs: [],
  },
  {
    title: 'Meeting Participant Left',
    name: 'ZOOM_TRIGGER_PARTICIPANT_LEFT',
    output: [],
    inputs: [],
  },
  {
    title: 'New Recording',
    name: 'ZOOM_TRIGGER_RECORDING_STARTED',
    output: [],
    inputs: [],
  },
  {
    title: 'Complete Recording',
    name: 'ZOOM_TRIGGER_RECORDING_COMPLETED',
    output: [],
    inputs: [
      {
        id: 'recordsFilterFormula',
        title: 'Filter Records',
        type: 'CONDITIONAL',
        subtitle:
          'Only trigger for meeting recordings that match these filters',
        supportedKeys: ['Account ID', 'Start Date', 'End Date'],
        supportedOperators: [
          '$none',
          '$stringContains',
          '$stringDoesNotContain',
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$stringIsIn',
          '$stringIsNotIn',
          '$stringStartsWith',
          '$stringDoesNotStartWith',
          '$stringEndsWith',
          '$stringDoesNotEndWith',
          '$numberGreaterThan',
          '$numberLessThan',
          '$numberEquals',
          '$numberDoesNotEqual',
          '$dateTimeAfter',
          '$dateTimeBefore',
          '$dateTimeEquals',
          '$booleanTrue',
          '$booleanFalse',
          '$exists',
          '$doesNotExist',
          '$isNotUndefinedOrNull',
          '$isUndefinedOrNull',
          '$arrayIsEmpty',
          '$arrayIsNotEmpty',
        ],
      },
    ],
  },
  {
    title: 'Recording Transcript Completed',
    name: 'ZOOM_TRIGGER_RECORDING_TRANSCRIPT_COMPLETED',
    output: [],
    inputs: [],
  },
];

/**
 * intents for zoom
 */
exports.intents = [
  {
    title: 'Create Meeting',
    name: 'ZOOM_CREATE_MEETING',
    output: [],
    inputs: [
      {
        id: 'topic',
        title: 'Topic',
        type: 'TEXTAREA',
        placeholder: 'Meeting name',
        required: true,
      },
      {
        id: 'startTime',
        title: 'Start Time',
        type: 'TEXTAREA',
        subtitle: 'Meeting start time (ISO 8601 timestamp).',
        placeholder: '2020-03-31T12:02:00Z',
        required: true,
      },
      {
        id: 'duration',
        title: 'Duration',
        type: 'TEXTAREA',
        subtitle: 'Meeting duration in minutes.',
        placeholder: '60',
        required: true,
      },
      {
        id: 'timezone',
        title: 'Timezone',
        type: 'TEXTAREA',
        placeholder: 'America/Los_Angeles',
        required: true,
      },
      {
        id: 'agenda',
        title: 'Agenda',
        type: 'TEXTAREA',
        subtitle: 'Meeting description.',
      },
      {
        id: 'password',
        title: 'Password',
        type: 'TEXTAREA',
        subtitle:
          'Passcode to join the meeting. By default, passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ *] and have a maximum of 10 characters.',
      },
      {
        id: 'enableWaitingRoom',
        title: 'Enable Waiting Room',
        type: 'BOOLEAN_INPUT',
      },
      {
        id: 'sendRegistrantConfirmation',
        title: 'Send Registrants Confirmation Email',
        type: 'BOOLEAN_INPUT',
      },
    ],
  },
  {
    title: 'Update Meeting',
    name: 'ZOOM_UPDATE_MEETING',
    output: [],
    inputs: [
      {
        id: 'meetingId',
        title: 'Meeting ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Meeting to update.',
        required: true,
      },
      {
        id: 'topic',
        title: 'Topic',
        type: 'TEXTAREA',
        placeholder: 'Meeting name',
      },
      {
        id: 'startTime',
        title: 'Start Time',
        type: 'TEXTAREA',
        subtitle: 'Meeting start time (ISO 8601 timestamp).',
        placeholder: '2020-03-31T12:02:00Z',
      },
      {
        id: 'duration',
        title: 'Duration',
        type: 'TEXTAREA',
        subtitle: 'Meeting duration in minutes.',
        placeholder: '60',
      },
      {
        id: 'timezone',
        title: 'Timezone',
        type: 'TEXTAREA',
        placeholder: 'America/Los_Angeles',
      },
      {
        id: 'agenda',
        title: 'Agenda',
        type: 'TEXTAREA',
        subtitle: 'Meeting description.',
      },
    ],
  },
  {
    title: 'Get Meetings',
    name: 'ZOOM_GET_MEETING',
    output: [],
    inputs: [],
  },
  {
    title: 'Get Meeting by ID',
    name: 'ZOOM_GET_MEETING_BY_ID',
    output: [],
    inputs: [
      {
        id: 'meetingId',
        title: 'Meeting ID',
        type: 'TEXTAREA',
        required: true,
      },
    ],
  },
  {
    title: 'Delete Meeting',
    name: 'ZOOM_DELETE_MEETING',
    output: [],
    inputs: [
      {
        id: 'meetingId',
        title: 'Meeting ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Meeting to delete.',
        required: true,
      },
    ],
  },
  {
    title: 'Add Meeting Registrant',
    name: 'ZOOM_ADD_MEETING_REGISTRANT',
    output: [],
    inputs: [
      {
        id: 'meetingId',
        title: 'Meeting ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Meeting to add registrants to.',
        required: true,
      },
      {
        id: 'email',
        title: 'Email',
        type: 'TEXTAREA',
        placeholder: 'name@example.com',
        required: true,
      },
      {
        id: 'firstName',
        title: 'First name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'lastName',
        title: 'Last Name',
        type: 'TEXTAREA',
      },
      {
        id: 'address',
        title: 'Address',
        type: 'TEXTAREA',
      },
      {
        id: 'city',
        title: 'City',
        type: 'TEXTAREA',
      },
      {
        id: 'country',
        title: 'Country',
        type: 'TEXTAREA',
      },
      {
        id: 'zip',
        title: 'Zip',
        type: 'TEXTAREA',
      },
      {
        id: 'state',
        title: 'State',
        type: 'TEXTAREA',
      },
      {
        id: 'phone',
        title: 'Phone',
        type: 'TEXTAREA',
      },
      {
        id: 'organization',
        title: 'Organization',
        type: 'TEXTAREA',
      },
      {
        id: 'jobTitle',
        title: 'Job Title',
        type: 'TEXTAREA',
      },
    ],
  },
  {
    title: 'Get Meeting Registrants',
    name: 'ZOOM_GET_MEETING_REGISTRANT',
    output: [],
    inputs: [
      {
        id: 'meetingId',
        title: 'Meeting ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Meeting whose Registrants to get.',
        required: true,
      },
      {
        id: 'registrantStatus',
        title: 'Registrant Status',
        type: 'ENUM',
        placeholder: 'choose a user to DM or type {{ to insert a Slack user ID',
        required: true,
        values: ['approved', 'pending', 'denied'],
      },
    ],
  },
  {
    title: 'Delete Meeting Registrant',
    name: 'ZOOM_DELETE_MEETING_REGISTRANT',
    output: [],
    inputs: [
      {
        id: 'meetingId',
        title: 'Meeting ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Meeting to delete a Registrant from.',
        required: true,
      },
      {
        id: 'registrantId',
        title: 'Registrant ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Registrant to delete.',
      },
    ],
  },
  {
    title: 'Get Recording by Meeting ID',
    name: 'ZOOM_GET_RECORDING_BY_MEETING_ID',
    output: [],
    inputs: [
      {
        id: 'meetingId',
        title: 'Meeting ID',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'includeToken',
        title: 'Include Token in Download URL',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If set to true, all download_url properties will include the userâ€™s access token.',
        defaultValue: false,
      },
    ],
  },
  {
    title: 'Search Recording',
    name: 'ZOOM_SEARCH_RECORDING',
    output: [],
    inputs: [
      {
        id: 'searchFrom',
        title: 'From Date',
        type: 'TEXTAREA',
        subtitle: "Start date in 'yyyy-mm-dd' UTC format",
        placeholder: '2022-10-22',
      },
      {
        id: 'searchUpto',
        title: 'To Date',
        type: 'TEXTAREA',
        subtitle: "End date in 'yyyy-mm-dd' UTC format",
        placeholder: '2022-11-21',
      },
      {
        id: 'meetingId',
        title: 'Meeting ID',
        type: 'TEXTAREA',
        placeholder: '6840331990',
      },
      {
        id: 'trash',
        title: 'Trash',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Use in combination with Trash Type to indicate type of Cloud Recording you need to retrieve',
      },
      {
        id: 'trashType',
        title: 'Trash Type',
        type: 'ENUM',
        subtitle:
          'The type of Cloud recording that you would like to retrieve from the trash',
        values: ['meeting_recordings', 'recording_file'],
      },
      {
        id: 'includeToken',
        title: 'Include Token in Download URL',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'If set to true, all download_url properties will include the userâ€™s access token.',
        defaultValue: false,
      },
    ],
  },
];

/**
 * integration class for zoom
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'zoom',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Meeting
     * method for ZOOM_CREATE_MEETING
     */
    createMeeting: (inputs, options) => {
      return new ActionStep({
        intent: 'ZOOM_CREATE_MEETING',
        actionType: 'zoom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Meeting
     * method for ZOOM_UPDATE_MEETING
     */
    updateMeeting: (inputs, options) => {
      return new ActionStep({
        intent: 'ZOOM_UPDATE_MEETING',
        actionType: 'zoom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Meetings
     * method for ZOOM_GET_MEETING
     */
    getMeeting: (inputs, options) => {
      return new ActionStep({
        intent: 'ZOOM_GET_MEETING',
        actionType: 'zoom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Meeting by ID
     * method for ZOOM_GET_MEETING_BY_ID
     */
    getMeetingById: (inputs, options) => {
      return new ActionStep({
        intent: 'ZOOM_GET_MEETING_BY_ID',
        actionType: 'zoom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Meeting
     * method for ZOOM_DELETE_MEETING
     */
    deleteMeeting: (inputs, options) => {
      return new ActionStep({
        intent: 'ZOOM_DELETE_MEETING',
        actionType: 'zoom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Add Meeting Registrant
     * method for ZOOM_ADD_MEETING_REGISTRANT
     */
    addMeetingRegistrant: (inputs, options) => {
      return new ActionStep({
        intent: 'ZOOM_ADD_MEETING_REGISTRANT',
        actionType: 'zoom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Meeting Registrants
     * method for ZOOM_GET_MEETING_REGISTRANT
     */
    getMeetingRegistrant: (inputs, options) => {
      return new ActionStep({
        intent: 'ZOOM_GET_MEETING_REGISTRANT',
        actionType: 'zoom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Meeting Registrant
     * method for ZOOM_DELETE_MEETING_REGISTRANT
     */
    deleteMeetingRegistrant: (inputs, options) => {
      return new ActionStep({
        intent: 'ZOOM_DELETE_MEETING_REGISTRANT',
        actionType: 'zoom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Recording by Meeting ID
     * method for ZOOM_GET_RECORDING_BY_MEETING_ID
     */
    getRecordingByMeetingId: (inputs, options) => {
      return new ActionStep({
        intent: 'ZOOM_GET_RECORDING_BY_MEETING_ID',
        actionType: 'zoom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Recording
     * method for ZOOM_SEARCH_RECORDING
     */
    searchRecording: (inputs, options) => {
      return new ActionStep({
        intent: 'ZOOM_SEARCH_RECORDING',
        actionType: 'zoom',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Meeting
     * method for ZOOM_TRIGGER_MEETING_CREATED
     */
    meetingCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'ZOOM_TRIGGER_MEETING_CREATED',
        actionType: 'zoom',
        parameters: inputs,
      });
    },
    /**
     * Meeting Updated
     * method for ZOOM_TRIGGER_MEETING_UPDATED
     */
    meetingUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'ZOOM_TRIGGER_MEETING_UPDATED',
        actionType: 'zoom',
        parameters: inputs,
      });
    },
    /**
     * Meeting Ended
     * method for ZOOM_TRIGGER_MEETING_ENDED
     */
    meetingEnded: (inputs) => {
      return new ActionTriggerStep({
        intent: 'ZOOM_TRIGGER_MEETING_ENDED',
        actionType: 'zoom',
        parameters: inputs,
      });
    },
    /**
     * New Meeting Registrant
     * method for ZOOM_TRIGGER_MEETING_REGISTRANT_CREATED
     */
    meetingRegistrantCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'ZOOM_TRIGGER_MEETING_REGISTRANT_CREATED',
        actionType: 'zoom',
        parameters: inputs,
      });
    },
    /**
     * Meeting Participant Joined
     * method for ZOOM_TRIGGER_PARTICIPANT_JOINED
     */
    participantJoined: (inputs) => {
      return new ActionTriggerStep({
        intent: 'ZOOM_TRIGGER_PARTICIPANT_JOINED',
        actionType: 'zoom',
        parameters: inputs,
      });
    },
    /**
     * Meeting Participant Left
     * method for ZOOM_TRIGGER_PARTICIPANT_LEFT
     */
    participantLeft: (inputs) => {
      return new ActionTriggerStep({
        intent: 'ZOOM_TRIGGER_PARTICIPANT_LEFT',
        actionType: 'zoom',
        parameters: inputs,
      });
    },
    /**
     * New Recording
     * method for ZOOM_TRIGGER_RECORDING_STARTED
     */
    recordingStarted: (inputs) => {
      return new ActionTriggerStep({
        intent: 'ZOOM_TRIGGER_RECORDING_STARTED',
        actionType: 'zoom',
        parameters: inputs,
      });
    },
    /**
     * Complete Recording
     * method for ZOOM_TRIGGER_RECORDING_COMPLETED
     */
    recordingCompleted: (inputs) => {
      return new ActionTriggerStep({
        intent: 'ZOOM_TRIGGER_RECORDING_COMPLETED',
        actionType: 'zoom',
        parameters: inputs,
      });
    },
    /**
     * Recording Transcript Completed
     * method for ZOOM_TRIGGER_RECORDING_TRANSCRIPT_COMPLETED
     */
    recordingTranscriptCompleted: (inputs) => {
      return new ActionTriggerStep({
        intent: 'ZOOM_TRIGGER_RECORDING_TRANSCRIPT_COMPLETED',
        actionType: 'zoom',
        parameters: inputs,
      });
    },
  },
};
