/**
 * Create Meeting intent type
 */
type ZoomCreateMeeting = {
  /**
   * Topic
   *
   * **Example**:
   * ```
   * Meeting name
   * ```
   */
  topic: string;

  /**
   * Start Time
   * Meeting start time (ISO 8601 timestamp).
   *
   * **Example**:
   * ```
   * 2020-03-31T12:02:00Z
   * ```
   */
  startTime: string;

  /**
   * Duration
   * Meeting duration in minutes.
   *
   * **Example**:
   * ```
   * 60
   * ```
   */
  duration: string;

  /**
   * Timezone
   *
   * **Example**:
   * ```
   * America/Los_Angeles
   * ```
   */
  timezone: string;

  /**
   * Agenda
   * Meeting description.
   *
   */
  agenda?: string;

  /**
   * Password
   * Passcode to join the meeting. By default, passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ *] and have a maximum of 10 characters.
   *
   */
  password?: string;

  /**
   * Enable Waiting Room
   *
   */
  enableWaitingRoom?: boolean;

  /**
   * Send Registrants Confirmation Email
   *
   */
  sendRegistrantConfirmation?: boolean;
};

/**
 * Update Meeting intent type
 */
type ZoomUpdateMeeting = {
  /**
   * Meeting ID
   * The ID of the Meeting to update.
   *
   */
  meetingId: string;

  /**
   * Topic
   *
   * **Example**:
   * ```
   * Meeting name
   * ```
   */
  topic?: string;

  /**
   * Start Time
   * Meeting start time (ISO 8601 timestamp).
   *
   * **Example**:
   * ```
   * 2020-03-31T12:02:00Z
   * ```
   */
  startTime?: string;

  /**
   * Duration
   * Meeting duration in minutes.
   *
   * **Example**:
   * ```
   * 60
   * ```
   */
  duration?: string;

  /**
   * Timezone
   *
   * **Example**:
   * ```
   * America/Los_Angeles
   * ```
   */
  timezone?: string;

  /**
   * Agenda
   * Meeting description.
   *
   */
  agenda?: string;
};

/**
 * Get Meetings intent type
 */
type ZoomGetMeeting = {};

/**
 * Get Meeting by ID intent type
 */
type ZoomGetMeetingById = {
  /**
   * Meeting ID
   *
   */
  meetingId: string;
};

/**
 * Delete Meeting intent type
 */
type ZoomDeleteMeeting = {
  /**
   * Meeting ID
   * The ID of the Meeting to delete.
   *
   */
  meetingId: string;
};

/**
 * Add Meeting Registrant intent type
 */
type ZoomAddMeetingRegistrant = {
  /**
   * Meeting ID
   * The ID of the Meeting to add registrants to.
   *
   */
  meetingId: string;

  /**
   * Email
   *
   * **Example**:
   * ```
   * name@example.com
   * ```
   */
  email: string;

  /**
   * First name
   *
   */
  firstName: string;

  /**
   * Last Name
   *
   */
  lastName?: string;

  /**
   * Address
   *
   */
  address?: string;

  /**
   * City
   *
   */
  city?: string;

  /**
   * Country
   *
   */
  country?: string;

  /**
   * Zip
   *
   */
  zip?: string;

  /**
   * State
   *
   */
  state?: string;

  /**
   * Phone
   *
   */
  phone?: string;

  /**
   * Organization
   *
   */
  organization?: string;

  /**
   * Job Title
   *
   */
  jobTitle?: string;
};

/**
 * Get Meeting Registrants intent type
 */
type ZoomGetMeetingRegistrant = {
  /**
   * Meeting ID
   * The ID of the Meeting whose Registrants to get.
   *
   */
  meetingId: string;

  /**
   * Registrant Status
   *
   * **Example**:
   * ```
   * choose a user to DM or type {{ to insert a Slack user ID
   * ```
   */
  registrantStatus: 'approved' | 'pending' | 'denied';
};

/**
 * Delete Meeting Registrant intent type
 */
type ZoomDeleteMeetingRegistrant = {
  /**
   * Meeting ID
   * The ID of the Meeting to delete a Registrant from.
   *
   */
  meetingId: string;

  /**
   * Registrant ID
   * The ID of the Registrant to delete.
   *
   */
  registrantId?: string;
};

/**
 * Get Recording by Meeting ID intent type
 */
type ZoomGetRecordingByMeetingId = {
  /**
   * Meeting ID
   *
   */
  meetingId: string;

  /**
   * Include Token in Download URL
   * If set to true, all download_url properties will include the user’s access token.
   *
   */
  includeToken?: boolean;
};

/**
 * Search Recording intent type
 */
type ZoomSearchRecording = {
  /**
   * From Date
   * Start date in 'yyyy-mm-dd' UTC format
   *
   * **Example**:
   * ```
   * 2022-10-22
   * ```
   */
  searchFrom?: string;

  /**
   * To Date
   * End date in 'yyyy-mm-dd' UTC format
   *
   * **Example**:
   * ```
   * 2022-11-21
   * ```
   */
  searchUpto?: string;

  /**
   * Meeting ID
   *
   * **Example**:
   * ```
   * 6840331990
   * ```
   */
  meetingId?: string;

  /**
   * Trash
   * Use in combination with Trash Type to indicate type of Cloud Recording you need to retrieve
   *
   */
  trash?: boolean;

  /**
   * Trash Type
   * The type of Cloud recording that you would like to retrieve from the trash
   *
   */
  trashType?: 'meeting_recordings' | 'recording_file';

  /**
   * Include Token in Download URL
   * If set to true, all download_url properties will include the user’s access token.
   *
   */
  includeToken?: boolean;
};

export type IntentToInputOutput = {
  /**
   * ZOOM_CREATE_MEETING
   */
  ZOOM_CREATE_MEETING: [ZoomCreateMeeting, any];

  /**
   * ZOOM_UPDATE_MEETING
   */
  ZOOM_UPDATE_MEETING: [ZoomUpdateMeeting, any];

  /**
   * ZOOM_GET_MEETING
   */
  ZOOM_GET_MEETING: [ZoomGetMeeting, any];

  /**
   * ZOOM_GET_MEETING_BY_ID
   */
  ZOOM_GET_MEETING_BY_ID: [ZoomGetMeetingById, any];

  /**
   * ZOOM_DELETE_MEETING
   */
  ZOOM_DELETE_MEETING: [ZoomDeleteMeeting, any];

  /**
   * ZOOM_ADD_MEETING_REGISTRANT
   */
  ZOOM_ADD_MEETING_REGISTRANT: [ZoomAddMeetingRegistrant, any];

  /**
   * ZOOM_GET_MEETING_REGISTRANT
   */
  ZOOM_GET_MEETING_REGISTRANT: [ZoomGetMeetingRegistrant, any];

  /**
   * ZOOM_DELETE_MEETING_REGISTRANT
   */
  ZOOM_DELETE_MEETING_REGISTRANT: [ZoomDeleteMeetingRegistrant, any];

  /**
   * ZOOM_GET_RECORDING_BY_MEETING_ID
   */
  ZOOM_GET_RECORDING_BY_MEETING_ID: [ZoomGetRecordingByMeetingId, any];

  /**
   * ZOOM_SEARCH_RECORDING
   */
  ZOOM_SEARCH_RECORDING: [ZoomSearchRecording, any];
};
