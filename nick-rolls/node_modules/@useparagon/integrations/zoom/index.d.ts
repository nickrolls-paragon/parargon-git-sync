import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type IZoomIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type: 'text' | 'number' | 'email' | 'url' | 'boolean' | 'password';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IZoomIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for zoom
 */
export type IZoomIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Meeting
     * method for ZOOM_CREATE_MEETING
     */
    createMeeting: (
      inputs: IntentToInputOutput['ZOOM_CREATE_MEETING'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZOOM_CREATE_MEETING'][0],
      IntentToInputOutput['ZOOM_CREATE_MEETING'][1]
    >;

    /**
     * Update Meeting
     * method for ZOOM_UPDATE_MEETING
     */
    updateMeeting: (
      inputs: IntentToInputOutput['ZOOM_UPDATE_MEETING'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZOOM_UPDATE_MEETING'][0],
      IntentToInputOutput['ZOOM_UPDATE_MEETING'][1]
    >;

    /**
     * Get Meetings
     * method for ZOOM_GET_MEETING
     */
    getMeeting: (
      inputs: IntentToInputOutput['ZOOM_GET_MEETING'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZOOM_GET_MEETING'][0],
      IntentToInputOutput['ZOOM_GET_MEETING'][1]
    >;

    /**
     * Get Meeting by ID
     * method for ZOOM_GET_MEETING_BY_ID
     */
    getMeetingById: (
      inputs: IntentToInputOutput['ZOOM_GET_MEETING_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZOOM_GET_MEETING_BY_ID'][0],
      IntentToInputOutput['ZOOM_GET_MEETING_BY_ID'][1]
    >;

    /**
     * Delete Meeting
     * method for ZOOM_DELETE_MEETING
     */
    deleteMeeting: (
      inputs: IntentToInputOutput['ZOOM_DELETE_MEETING'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZOOM_DELETE_MEETING'][0],
      IntentToInputOutput['ZOOM_DELETE_MEETING'][1]
    >;

    /**
     * Add Meeting Registrant
     * method for ZOOM_ADD_MEETING_REGISTRANT
     */
    addMeetingRegistrant: (
      inputs: IntentToInputOutput['ZOOM_ADD_MEETING_REGISTRANT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZOOM_ADD_MEETING_REGISTRANT'][0],
      IntentToInputOutput['ZOOM_ADD_MEETING_REGISTRANT'][1]
    >;

    /**
     * Get Meeting Registrants
     * method for ZOOM_GET_MEETING_REGISTRANT
     */
    getMeetingRegistrant: (
      inputs: IntentToInputOutput['ZOOM_GET_MEETING_REGISTRANT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZOOM_GET_MEETING_REGISTRANT'][0],
      IntentToInputOutput['ZOOM_GET_MEETING_REGISTRANT'][1]
    >;

    /**
     * Delete Meeting Registrant
     * method for ZOOM_DELETE_MEETING_REGISTRANT
     */
    deleteMeetingRegistrant: (
      inputs: IntentToInputOutput['ZOOM_DELETE_MEETING_REGISTRANT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZOOM_DELETE_MEETING_REGISTRANT'][0],
      IntentToInputOutput['ZOOM_DELETE_MEETING_REGISTRANT'][1]
    >;

    /**
     * Get Recording by Meeting ID
     * method for ZOOM_GET_RECORDING_BY_MEETING_ID
     */
    getRecordingByMeetingId: (
      inputs: IntentToInputOutput['ZOOM_GET_RECORDING_BY_MEETING_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZOOM_GET_RECORDING_BY_MEETING_ID'][0],
      IntentToInputOutput['ZOOM_GET_RECORDING_BY_MEETING_ID'][1]
    >;

    /**
     * Search Recording
     * method for ZOOM_SEARCH_RECORDING
     */
    searchRecording: (
      inputs: IntentToInputOutput['ZOOM_SEARCH_RECORDING'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZOOM_SEARCH_RECORDING'][0],
      IntentToInputOutput['ZOOM_SEARCH_RECORDING'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Meeting
     * method for ZOOM_TRIGGER_MEETING_CREATED
     */
    meetingCreated: (
      inputs: TriggerIntentToInputOutput['ZOOM_TRIGGER_MEETING_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['ZOOM_TRIGGER_MEETING_CREATED'][0],
      TriggerIntentToInputOutput['ZOOM_TRIGGER_MEETING_CREATED'][1]
    >;

    /**
     * Meeting Updated
     * method for ZOOM_TRIGGER_MEETING_UPDATED
     */
    meetingUpdated: (
      inputs: TriggerIntentToInputOutput['ZOOM_TRIGGER_MEETING_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['ZOOM_TRIGGER_MEETING_UPDATED'][0],
      TriggerIntentToInputOutput['ZOOM_TRIGGER_MEETING_UPDATED'][1]
    >;

    /**
     * Meeting Ended
     * method for ZOOM_TRIGGER_MEETING_ENDED
     */
    meetingEnded: (
      inputs: TriggerIntentToInputOutput['ZOOM_TRIGGER_MEETING_ENDED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['ZOOM_TRIGGER_MEETING_ENDED'][0],
      TriggerIntentToInputOutput['ZOOM_TRIGGER_MEETING_ENDED'][1]
    >;

    /**
     * New Meeting Registrant
     * method for ZOOM_TRIGGER_MEETING_REGISTRANT_CREATED
     */
    meetingRegistrantCreated: (
      inputs: TriggerIntentToInputOutput['ZOOM_TRIGGER_MEETING_REGISTRANT_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['ZOOM_TRIGGER_MEETING_REGISTRANT_CREATED'][0],
      TriggerIntentToInputOutput['ZOOM_TRIGGER_MEETING_REGISTRANT_CREATED'][1]
    >;

    /**
     * Meeting Participant Joined
     * method for ZOOM_TRIGGER_PARTICIPANT_JOINED
     */
    participantJoined: (
      inputs: TriggerIntentToInputOutput['ZOOM_TRIGGER_PARTICIPANT_JOINED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['ZOOM_TRIGGER_PARTICIPANT_JOINED'][0],
      TriggerIntentToInputOutput['ZOOM_TRIGGER_PARTICIPANT_JOINED'][1]
    >;

    /**
     * Meeting Participant Left
     * method for ZOOM_TRIGGER_PARTICIPANT_LEFT
     */
    participantLeft: (
      inputs: TriggerIntentToInputOutput['ZOOM_TRIGGER_PARTICIPANT_LEFT'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['ZOOM_TRIGGER_PARTICIPANT_LEFT'][0],
      TriggerIntentToInputOutput['ZOOM_TRIGGER_PARTICIPANT_LEFT'][1]
    >;

    /**
     * New Recording
     * method for ZOOM_TRIGGER_RECORDING_STARTED
     */
    recordingStarted: (
      inputs: TriggerIntentToInputOutput['ZOOM_TRIGGER_RECORDING_STARTED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['ZOOM_TRIGGER_RECORDING_STARTED'][0],
      TriggerIntentToInputOutput['ZOOM_TRIGGER_RECORDING_STARTED'][1]
    >;

    /**
     * Complete Recording
     * method for ZOOM_TRIGGER_RECORDING_COMPLETED
     */
    recordingCompleted: (
      inputs: TriggerIntentToInputOutput['ZOOM_TRIGGER_RECORDING_COMPLETED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['ZOOM_TRIGGER_RECORDING_COMPLETED'][0],
      TriggerIntentToInputOutput['ZOOM_TRIGGER_RECORDING_COMPLETED'][1]
    >;

    /**
     * Recording Transcript Completed
     * method for ZOOM_TRIGGER_RECORDING_TRANSCRIPT_COMPLETED
     */
    recordingTranscriptCompleted: (
      inputs: TriggerIntentToInputOutput['ZOOM_TRIGGER_RECORDING_TRANSCRIPT_COMPLETED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['ZOOM_TRIGGER_RECORDING_TRANSCRIPT_COMPLETED'][0],
      TriggerIntentToInputOutput['ZOOM_TRIGGER_RECORDING_TRANSCRIPT_COMPLETED'][1]
    >;
  };
};
