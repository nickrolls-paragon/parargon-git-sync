import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  UserDefinedComboInputOptions,
  UserDefinedFieldMappingOptions,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type IJiraIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type:
        | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'boolean'
        | 'password'
        | 'project'
        | 'issue_field'
        | 'issue_field_values';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | ({
      type: 'field_mapping';
    } & UserDefinedFieldMappingOptions)
  | ({
      type: 'assignee' | 'epic' | 'issue_type' | 'issue_status';
    } & UserDefinedComboInputOptions)
  | ({
      type: 'issue_field_values';
    } & UserDefinedComboInputOptions)
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;

  project: string;
  assignee: {
    project: string;
    assignee: string;
  };
  epic: {
    project: string;
    epic: string;
  };
  issue_type: {
    project: string;
    issue_type: string;
  };
  issue_status: {
    project: string;
    issue_status: string;
  };
  issue_field: string;
  issue_field_values: {
    project: string;
    issue_type: string;
    issue_fields: string;
  };
  field_mapping: {
    project: string;
    fields: Record<string, any>;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IJiraIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for jira
 */
export type IJiraIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Issue
     * method for JIRA_CREATE_ISSUE
     */
    createIssue: (
      inputs: IntentToInputOutput['JIRA_CREATE_ISSUE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['JIRA_CREATE_ISSUE'][0],
      IntentToInputOutput['JIRA_CREATE_ISSUE'][1]
    >;

    /**
     * Update Issue
     * method for JIRA_UPDATE_ISSUE
     */
    updateIssue: (
      inputs: IntentToInputOutput['JIRA_UPDATE_ISSUE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['JIRA_UPDATE_ISSUE'][0],
      IntentToInputOutput['JIRA_UPDATE_ISSUE'][1]
    >;

    /**
     * Get Issue
     * method for JIRA_GET_ISSUE_BY_KEY
     */
    getIssueByKey: (
      inputs: IntentToInputOutput['JIRA_GET_ISSUE_BY_KEY'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['JIRA_GET_ISSUE_BY_KEY'][0],
      IntentToInputOutput['JIRA_GET_ISSUE_BY_KEY'][1]
    >;

    /**
     * Search Issues
     * method for JIRA_FILTER_ISSUES
     */
    filterIssues: (
      inputs: IntentToInputOutput['JIRA_FILTER_ISSUES'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['JIRA_FILTER_ISSUES'][0],
      IntentToInputOutput['JIRA_FILTER_ISSUES'][1]
    >;

    /**
     * Search Issues by JQL Query
     * method for JIRA_SEARCH_BY_JQL
     */
    searchByJql: (
      inputs: IntentToInputOutput['JIRA_SEARCH_BY_JQL'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['JIRA_SEARCH_BY_JQL'][0],
      IntentToInputOutput['JIRA_SEARCH_BY_JQL'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Issue
     * method for JIRA_TRIGGER_ISSUE_CREATED
     */
    issueCreated: (
      inputs: TriggerIntentToInputOutput['JIRA_TRIGGER_ISSUE_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['JIRA_TRIGGER_ISSUE_CREATED'][0],
      TriggerIntentToInputOutput['JIRA_TRIGGER_ISSUE_CREATED'][1]
    >;

    /**
     * Issue Updated
     * method for JIRA_TRIGGER_ISSUE_UPDATED
     */
    issueUpdated: (
      inputs: TriggerIntentToInputOutput['JIRA_TRIGGER_ISSUE_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['JIRA_TRIGGER_ISSUE_UPDATED'][0],
      TriggerIntentToInputOutput['JIRA_TRIGGER_ISSUE_UPDATED'][1]
    >;

    /**
     * New Comment
     * method for JIRA_TRIGGER_COMMENT_CREATED
     */
    commentCreated: (
      inputs: TriggerIntentToInputOutput['JIRA_TRIGGER_COMMENT_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['JIRA_TRIGGER_COMMENT_CREATED'][0],
      TriggerIntentToInputOutput['JIRA_TRIGGER_COMMENT_CREATED'][1]
    >;

    /**
     * Project Created
     * method for JIRA_TRIGGER_PROJECT_CREATED
     */
    projectCreated: (
      inputs: TriggerIntentToInputOutput['JIRA_TRIGGER_PROJECT_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['JIRA_TRIGGER_PROJECT_CREATED'][0],
      TriggerIntentToInputOutput['JIRA_TRIGGER_PROJECT_CREATED'][1]
    >;

    /**
     * Project Updated
     * method for JIRA_TRIGGER_PROJECT_UPDATED
     */
    projectUpdated: (
      inputs: TriggerIntentToInputOutput['JIRA_TRIGGER_PROJECT_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['JIRA_TRIGGER_PROJECT_UPDATED'][0],
      TriggerIntentToInputOutput['JIRA_TRIGGER_PROJECT_UPDATED'][1]
    >;
  };
};
