import { ConditionalInput } from '@useparagon/core/steps/library/conditional';

/**
 * Create Issue intent type
 */
type JiraCreateIssue = {
  /**
   * Summary
   * A brief one-line summary of the issue.
   *
   * **Example**:
   * ```
   * The printer stopped working
   * ```
   */
  summary: string;

  /**
   * Project
   * The project which the issue belongs to. Defaults to the user’s first project if not provided. Use Connect Portal Workflow Settings to allow users to select a Project.
   *
   * **Example**:
   * ```
   * {{settings.project}}
   * ```
   */
  project?: string;

  /**
   * Issue type
   * Defaults to Task if not provided.
   *
   * **Example**:
   * ```
   * {{settings.issueType}}
   * ```
   */
  issueType?: string;

  /**
   * Status
   * Defaults to the project’s first status if not provided.
   *
   * **Example**:
   * ```
   * {{settings.status}}
   * ```
   */
  jiraIssueStatus?: string;

  /**
   * Assignee
   * Defaults to the authenticated user if not provided.
   *
   * **Example**:
   * ```
   * {{settings.assignee}}
   * ```
   */
  assignee?: string;

  /**
   * Additional Fields
   * Specify any other fields that should be included in JSON below. Use Connect Portal Workflow Settings to allow users to select which Issue Fields to update.
   *
   * **Example**:
   * ```
   * {
   *    "{{settings.ExternalID}}": "..."
   *}
   *
   * ```
   */
  additionalFields?: string;
} & (
  | {
      /**
       * Description Type
       * Select the Description Type.
       *
       */
      descriptionType?: undefined;
    }
  | {
      /**
       * Description Type
       * Select the Description Type.
       *
       */
      descriptionType: 'description';

      /**
       * Description
       * A detailed description of the issue.
       *
       */
      description?: string;
    }
  | {
      /**
       * Description Type
       * Select the Description Type.
       *
       */
      descriptionType: 'descriptionJSON';

      /**
       * Description JSON
       *
       * **Example**:
       * ```
       * {
       *  "version": 1,
       *  "type": "doc",
       *  "content": [
       *    {
       *      "type": "paragraph",
       *      "content": [
       *        {
       *          "type": "text",
       *          "text": "Hello",
       *          "marks": [
       *            {
       *              "type": "strong"
       *            }
       *          ]
       *        }
       *      ]
       *    }
       *  ]
       *}
       * ```
       */
      descriptionJSON?: string;
    }
);

/**
 * Update Issue intent type
 */
type JiraUpdateIssue = {
  /**
   * Issue Key
   *
   * **Example**:
   * ```
   * TEST-1234
   * ```
   */
  issueKey: string;

  /**
   * Summary
   * A brief one-line summary of the issue.
   *
   * **Example**:
   * ```
   * The printer stopped working
   * ```
   */
  summary?: string;

  /**
   * Issue type
   * Use Connect Portal Workflow Settings to allow users to select an Issue Type.
   *
   * **Example**:
   * ```
   * {{settings.issueType}}
   * ```
   */
  issueType?: string;

  /**
   * Status
   * Use Connect Portal Workflow Settings to allow users to select a Status.
   *
   * **Example**:
   * ```
   * {{settings.status}}
   * ```
   */
  jiraIssueStatus?: string;

  /**
   * Assignee
   * Use Connect Portal Workflow Settings to allow users to select an Assignee.
   *
   * **Example**:
   * ```
   * {{settings.assignee}}
   * ```
   */
  assignee?: string;

  /**
   * Additional Fields
   * Specify any other fields that should be included in JSON below. Use Connect Portal Workflow Settings to allow users to select which Issue Fields to update.
   *
   * **Example**:
   * ```
   * {
   *    "{{settings.ExternalID}}": "..."
   *}
   *
   * ```
   */
  additionalFields?: string;
} & (
  | {
      /**
       * Description Type
       * Select the Description Type.
       *
       */
      descriptionType?: undefined;
    }
  | {
      /**
       * Description Type
       * Select the Description Type.
       *
       */
      descriptionType: 'description';

      /**
       * Description
       * A detailed description of the issue.
       *
       */
      description?: string;
    }
  | {
      /**
       * Description Type
       * Select the Description Type.
       *
       */
      descriptionType: 'descriptionJSON';

      /**
       * Description JSON
       *
       * **Example**:
       * ```
       * {
       *  "version": 1,
       *  "type": "doc",
       *  "content": [
       *    {
       *      "type": "paragraph",
       *      "content": [
       *        {
       *          "type": "text",
       *          "text": "Hello",
       *          "marks": [
       *            {
       *              "type": "strong"
       *            }
       *          ]
       *        }
       *      ]
       *    }
       *  ]
       *}
       * ```
       */
      descriptionJSON?: string;
    }
);

/**
 * Get Issue intent type
 */
type JiraGetIssueByKey = {
  /**
   * Issue Key
   *
   * **Example**:
   * ```
   * TEST-1234
   * ```
   */
  issueKey: string;
};

/**
 * Search Issues intent type
 */
type JiraFilterIssues = {
  /**
   * Filter Search
   * Search for issue that match specified filters.
   *
   * **Example**:
   * ```
   * field
   * ```
   */
  jqlQuery?: ConditionalInput;

  /**
   * Limit results
   * Limit the maximum number of issues to return. Defaults to 10 if left blank.
   *
   */
  limit?: string;
};

/**
 * Search Issues by JQL Query intent type
 */
type JiraSearchByJql = {
  /**
   * JQL Query
   *
   * **Example**:
   * ```
   * project = {{settings.project}}
   *AND status = {{settings.status}}
   * ```
   */
  jqlQuery: string;
};

export type IntentToInputOutput = {
  /**
   * JIRA_CREATE_ISSUE
   */
  JIRA_CREATE_ISSUE: [JiraCreateIssue, any];

  /**
   * JIRA_UPDATE_ISSUE
   */
  JIRA_UPDATE_ISSUE: [JiraUpdateIssue, any];

  /**
   * JIRA_GET_ISSUE_BY_KEY
   */
  JIRA_GET_ISSUE_BY_KEY: [JiraGetIssueByKey, any];

  /**
   * JIRA_FILTER_ISSUES
   */
  JIRA_FILTER_ISSUES: [JiraFilterIssues, any];

  /**
   * JIRA_SEARCH_BY_JQL
   */
  JIRA_SEARCH_BY_JQL: [JiraSearchByJql, any];
};
