const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for jira
 */
exports.inputs = [
  {
    id: 'projects',
    title: 'Project',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'projectToAssignees',
    title: 'Assignee',
    type: 'COMBO_INPUT_DATA_SOURCE',
    mainInputSource: {
      id: 'projects',
      title: 'Project',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    dependentInputSource: {
      id: 'assigneeByProject',
      title: 'Assignee',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
  {
    id: 'projectToEpicIssueTypeCombo',
    title: 'Epic',
    type: 'COMBO_INPUT_DATA_SOURCE',
    mainInputSource: {
      id: 'jiraProjectForEpicIssue',
      title: 'Project',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    dependentInputSource: {
      id: 'jiraEpicIssue',
      title: 'Epic',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
  {
    id: 'projectIssueTypeCombo',
    title: 'Issue type',
    type: 'COMBO_INPUT_DATA_SOURCE',
    mainInputSource: {
      id: 'projects',
      title: 'Project',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    dependentInputSource: {
      id: 'issueTypesByProject',
      title: 'Issue type',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
  {
    id: 'projectIssueStatusTypeCombo',
    title: 'Issue Status',
    type: 'COMBO_INPUT_DATA_SOURCE',
    mainInputSource: {
      id: 'projects',
      title: 'Project',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    dependentInputSource: {
      id: 'issueIssueStatusByProject',
      title: 'Issue Status',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
  {
    id: 'cachedAllIssueFields',
    title: 'Issue Field',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'issueFieldValues',
    title: 'Issue Field Values',
    type: 'DYNAMIC_COMBO_INPUT_DATA_SOURCE',
    mainInputSource: {
      id: 'projects',
      title: 'Project',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    dependentInputSource: {
      id: 'issueTypesByProject',
      title: 'Issue type',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    variableInputSource: {
      id: 'getIssueFieldsByProjectAndIssueTypeId',
      title: 'Issue Fields',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
  {
    id: 'mapJiraFields',
    title: 'Field Mapping',
    type: 'FIELD_MAPPER_DATA_SOURCE',
    dependentInputSource: {
      id: 'issueTypesByProject',
      title: 'Issue type',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    fieldSource: {
      id: 'getFields',
      title: 'Fields',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    recordSource: {
      id: 'projects',
      title: 'Project',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
];

/**
 * triggers for jira
 */
exports.triggers = [
  {
    title: 'New Issue',
    name: 'JIRA_TRIGGER_ISSUE_CREATED',
    output: [],
    inputs: [
      {
        id: 'jqlQuery',
        title: 'Filter by JQL Query',
        type: 'CODE',
        placeholder:
          'project = {{settings.project}} \nAND status = {{settings.status}}',
      },
    ],
  },
  {
    title: 'Issue Updated',
    name: 'JIRA_TRIGGER_ISSUE_UPDATED',
    output: [],
    inputs: [
      {
        id: 'jqlQuery',
        title: 'Filter by JQL Query',
        type: 'CODE',
        placeholder:
          'project = {{settings.project}} \nAND status = {{settings.status}}',
      },
    ],
  },
  {
    title: 'New Comment',
    name: 'JIRA_TRIGGER_COMMENT_CREATED',
    output: [],
    inputs: [
      {
        id: 'jqlQuery',
        title: 'Filter by JQL Query',
        type: 'CODE',
        placeholder:
          'project = {{settings.project}} \nAND status = {{settings.status}}',
      },
    ],
  },
  {
    title: 'Project Created',
    name: 'JIRA_TRIGGER_PROJECT_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Project Updated',
    name: 'JIRA_TRIGGER_PROJECT_UPDATED',
    output: [],
    inputs: [],
  },
];

/**
 * intents for jira
 */
exports.intents = [
  {
    title: 'Create Issue',
    name: 'JIRA_CREATE_ISSUE',
    output: [],
    inputs: [
      {
        id: 'summary',
        title: 'Summary',
        type: 'TEXTAREA',
        subtitle: 'A brief one-line summary of the issue.',
        placeholder: 'The printer stopped working',
        required: true,
      },
      {
        id: 'project',
        title: 'Project',
        type: 'TEXTAREA',
        subtitle:
          'The project which the issue belongs to. Defaults to the user’s first project if not provided. Use Connect Portal Workflow Settings to allow users to select a Project.',
        placeholder: '{{settings.project}}',
      },
      {
        id: 'issueType',
        title: 'Issue type',
        type: 'TEXTAREA',
        subtitle: 'Defaults to Task if not provided.',
        placeholder: '{{settings.issueType}}',
      },
      {
        id: 'jiraIssueStatus',
        title: 'Status',
        type: 'TEXTAREA',
        subtitle: 'Defaults to the project’s first status if not provided.',
        placeholder: '{{settings.status}}',
      },
      {
        id: 'assignee',
        title: 'Assignee',
        type: 'TEXTAREA',
        subtitle: 'Defaults to the authenticated user if not provided.',
        placeholder: '{{settings.assignee}}',
      },
      {
        id: 'descriptionType',
        title: 'Description Type',
        type: 'ENUM',
        subtitle: 'Select the Description Type.',
        defaultValue: 'description',
        values: [
          {
            value: 'description',
            dependentInputs: [
              {
                id: 'description',
                title: 'Description',
                type: 'TEXTAREA',
                subtitle: 'A detailed description of the issue.',
              },
            ],
          },
          {
            value: 'descriptionJSON',
            dependentInputs: [
              {
                id: 'descriptionJSON',
                title: 'Description JSON',
                type: 'TEXTAREA',
                placeholder:
                  '{\n  "version": 1,\n  "type": "doc",\n  "content": [\n    {\n      "type": "paragraph",\n      "content": [\n        {\n          "type": "text",\n          "text": "Hello",\n          "marks": [\n            {\n              "type": "strong"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',
              },
            ],
          },
        ],
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'TEXTAREA',
        subtitle:
          'Specify any other fields that should be included in JSON below. Use Connect Portal Workflow Settings to allow users to select which Issue Fields to update.',
        placeholder:
          '{\n    "{{settings.ExternalID}}": "..."\n}\n                ',
      },
    ],
  },
  {
    title: 'Update Issue',
    name: 'JIRA_UPDATE_ISSUE',
    output: [],
    inputs: [
      {
        id: 'issueKey',
        title: 'Issue Key',
        type: 'TEXTAREA',
        placeholder: 'TEST-1234',
        required: true,
      },
      {
        id: 'summary',
        title: 'Summary',
        type: 'TEXTAREA',
        subtitle: 'A brief one-line summary of the issue.',
        placeholder: 'The printer stopped working',
      },
      {
        id: 'issueType',
        title: 'Issue type',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select an Issue Type.',
        placeholder: '{{settings.issueType}}',
      },
      {
        id: 'jiraIssueStatus',
        title: 'Status',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a Status.',
        placeholder: '{{settings.status}}',
      },
      {
        id: 'assignee',
        title: 'Assignee',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select an Assignee.',
        placeholder: '{{settings.assignee}}',
      },
      {
        id: 'descriptionType',
        title: 'Description Type',
        type: 'ENUM',
        subtitle: 'Select the Description Type.',
        defaultValue: 'description',
        values: [
          {
            value: 'description',
            dependentInputs: [
              {
                id: 'description',
                title: 'Description',
                type: 'TEXTAREA',
                subtitle: 'A detailed description of the issue.',
              },
            ],
          },
          {
            value: 'descriptionJSON',
            dependentInputs: [
              {
                id: 'descriptionJSON',
                title: 'Description JSON',
                type: 'TEXTAREA',
                placeholder:
                  '{\n  "version": 1,\n  "type": "doc",\n  "content": [\n    {\n      "type": "paragraph",\n      "content": [\n        {\n          "type": "text",\n          "text": "Hello",\n          "marks": [\n            {\n              "type": "strong"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',
              },
            ],
          },
        ],
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'TEXTAREA',
        subtitle:
          'Specify any other fields that should be included in JSON below. Use Connect Portal Workflow Settings to allow users to select which Issue Fields to update.',
        placeholder:
          '{\n    "{{settings.ExternalID}}": "..."\n}\n                ',
      },
    ],
  },
  {
    title: 'Get Issue',
    name: 'JIRA_GET_ISSUE_BY_KEY',
    output: [],
    inputs: [
      {
        id: 'issueKey',
        title: 'Issue Key',
        type: 'TEXTAREA',
        placeholder: 'TEST-1234',
        required: true,
      },
    ],
  },
  {
    title: 'Search Issues',
    name: 'JIRA_FILTER_ISSUES',
    output: [],
    inputs: [
      {
        id: 'jqlQuery',
        title: 'Filter Search',
        type: 'CONDITIONAL',
        subtitle: 'Search for issue that match specified filters.',
        placeholder: 'field',
        supportedOperators: [
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$stringIsIn',
          '$stringIsNotIn',
          '$stringContains',
          '$stringDoesNotContain',
          '$stringGreaterThan',
          '$stringLessThan',
        ],
      },
      {
        id: 'limit',
        title: 'Limit results',
        type: 'TEXTAREA',
        subtitle:
          'Limit the maximum number of issues to return. Defaults to 10 if left blank.',
      },
    ],
  },
  {
    title: 'Search Issues by JQL Query',
    name: 'JIRA_SEARCH_BY_JQL',
    output: [],
    inputs: [
      {
        id: 'jqlQuery',
        title: 'JQL Query',
        type: 'CODE',
        placeholder:
          'project = {{settings.project}} \nAND status = {{settings.status}}',
        required: true,
      },
    ],
  },
];

/**
 * integration class for jira
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'jira',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Issue
     * method for JIRA_CREATE_ISSUE
     */
    createIssue: (inputs, options) => {
      return new ActionStep({
        intent: 'JIRA_CREATE_ISSUE',
        actionType: 'jira',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Issue
     * method for JIRA_UPDATE_ISSUE
     */
    updateIssue: (inputs, options) => {
      return new ActionStep({
        intent: 'JIRA_UPDATE_ISSUE',
        actionType: 'jira',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Issue
     * method for JIRA_GET_ISSUE_BY_KEY
     */
    getIssueByKey: (inputs, options) => {
      return new ActionStep({
        intent: 'JIRA_GET_ISSUE_BY_KEY',
        actionType: 'jira',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Issues
     * method for JIRA_FILTER_ISSUES
     */
    filterIssues: (inputs, options) => {
      return new ActionStep({
        intent: 'JIRA_FILTER_ISSUES',
        actionType: 'jira',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Issues by JQL Query
     * method for JIRA_SEARCH_BY_JQL
     */
    searchByJql: (inputs, options) => {
      return new ActionStep({
        intent: 'JIRA_SEARCH_BY_JQL',
        actionType: 'jira',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Issue
     * method for JIRA_TRIGGER_ISSUE_CREATED
     */
    issueCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'JIRA_TRIGGER_ISSUE_CREATED',
        actionType: 'jira',
        parameters: inputs,
      });
    },
    /**
     * Issue Updated
     * method for JIRA_TRIGGER_ISSUE_UPDATED
     */
    issueUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'JIRA_TRIGGER_ISSUE_UPDATED',
        actionType: 'jira',
        parameters: inputs,
      });
    },
    /**
     * New Comment
     * method for JIRA_TRIGGER_COMMENT_CREATED
     */
    commentCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'JIRA_TRIGGER_COMMENT_CREATED',
        actionType: 'jira',
        parameters: inputs,
      });
    },
    /**
     * Project Created
     * method for JIRA_TRIGGER_PROJECT_CREATED
     */
    projectCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'JIRA_TRIGGER_PROJECT_CREATED',
        actionType: 'jira',
        parameters: inputs,
      });
    },
    /**
     * Project Updated
     * method for JIRA_TRIGGER_PROJECT_UPDATED
     */
    projectUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'JIRA_TRIGGER_PROJECT_UPDATED',
        actionType: 'jira',
        parameters: inputs,
      });
    },
  },
};
