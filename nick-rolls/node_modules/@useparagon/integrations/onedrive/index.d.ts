import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
  UserDefinedComboInputOptions,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type IOnedriveIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type:
        | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'boolean'
        | 'password'
        | 'folder';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | ({
      type: 'get_folder_children';
    } & UserDefinedComboInputOptions)
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
  folder: string;
  get_folder_children: {
    folder: string;
    children: string;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IOnedriveIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for onedrive
 */
export type IOnedriveIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Upload File
     * method for ONEDRIVE_SAVE_FILE
     */
    saveFile: (
      inputs: IntentToInputOutput['ONEDRIVE_SAVE_FILE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ONEDRIVE_SAVE_FILE'][0],
      IntentToInputOutput['ONEDRIVE_SAVE_FILE'][1]
    >;

    /**
     * Get File Metadata
     * method for ONEDRIVE_GET_FILE_BY_ID
     */
    getFileById: (
      inputs: IntentToInputOutput['ONEDRIVE_GET_FILE_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ONEDRIVE_GET_FILE_BY_ID'][0],
      IntentToInputOutput['ONEDRIVE_GET_FILE_BY_ID'][1]
    >;

    /**
     * List Files
     * method for ONEDRIVE_LIST_CONTENTS
     */
    listContents: (
      inputs: IntentToInputOutput['ONEDRIVE_LIST_CONTENTS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ONEDRIVE_LIST_CONTENTS'][0],
      IntentToInputOutput['ONEDRIVE_LIST_CONTENTS'][1]
    >;

    /**
     * Download File
     * method for ONEDRIVE_DOWNLOAD_FILE
     */
    downloadFile: (
      inputs: IntentToInputOutput['ONEDRIVE_DOWNLOAD_FILE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ONEDRIVE_DOWNLOAD_FILE'][0],
      IntentToInputOutput['ONEDRIVE_DOWNLOAD_FILE'][1]
    >;

    /**
     * Create Folder
     * method for ONEDRIVE_CREATE_FOLDER
     */
    createFolder: (
      inputs: IntentToInputOutput['ONEDRIVE_CREATE_FOLDER'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ONEDRIVE_CREATE_FOLDER'][0],
      IntentToInputOutput['ONEDRIVE_CREATE_FOLDER'][1]
    >;

    /**
     * Get Folder by ID
     * method for ONEDRIVE_GET_FOLDER_BY_ID
     */
    getFolderById: (
      inputs: IntentToInputOutput['ONEDRIVE_GET_FOLDER_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ONEDRIVE_GET_FOLDER_BY_ID'][0],
      IntentToInputOutput['ONEDRIVE_GET_FOLDER_BY_ID'][1]
    >;

    /**
     * Search Folders
     * method for ONEDRIVE_SEARCH_FOLDERS
     */
    searchFolders: (
      inputs: IntentToInputOutput['ONEDRIVE_SEARCH_FOLDERS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ONEDRIVE_SEARCH_FOLDERS'][0],
      IntentToInputOutput['ONEDRIVE_SEARCH_FOLDERS'][1]
    >;

    /**
     * Move Folder
     * method for ONEDRIVE_MOVE_FOLDER
     */
    moveFolder: (
      inputs: IntentToInputOutput['ONEDRIVE_MOVE_FOLDER'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ONEDRIVE_MOVE_FOLDER'][0],
      IntentToInputOutput['ONEDRIVE_MOVE_FOLDER'][1]
    >;

    /**
     * Delete Folder
     * method for ONEDRIVE_DELETE_FOLDER
     */
    deleteFolder: (
      inputs: IntentToInputOutput['ONEDRIVE_DELETE_FOLDER'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ONEDRIVE_DELETE_FOLDER'][0],
      IntentToInputOutput['ONEDRIVE_DELETE_FOLDER'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * File Change
     * method for ONEDRIVE_TRIGGER_FILE_CHANGE
     */
    fileChange: (
      inputs: TriggerIntentToInputOutput['ONEDRIVE_TRIGGER_FILE_CHANGE'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['ONEDRIVE_TRIGGER_FILE_CHANGE'][0],
      TriggerIntentToInputOutput['ONEDRIVE_TRIGGER_FILE_CHANGE'][1]
    >;
  };
};
