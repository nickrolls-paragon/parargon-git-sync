import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type IZendeskIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type:
        | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'boolean'
        | 'password'
        | 'assignee';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
  assignee: string;
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IZendeskIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for zendesk
 */
export type IZendeskIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Ticket
     * method for ZENDESK_CREATE_TICKET
     */
    createTicket: (
      inputs: IntentToInputOutput['ZENDESK_CREATE_TICKET'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZENDESK_CREATE_TICKET'][0],
      IntentToInputOutput['ZENDESK_CREATE_TICKET'][1]
    >;

    /**
     * Update Ticket
     * method for ZENDESK_UPDATE_TICKET
     */
    updateTicket: (
      inputs: IntentToInputOutput['ZENDESK_UPDATE_TICKET'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZENDESK_UPDATE_TICKET'][0],
      IntentToInputOutput['ZENDESK_UPDATE_TICKET'][1]
    >;

    /**
     * Add Comment to Ticket
     * method for ZENDESK_ADD_COMMENT_TO_TICKET
     */
    addCommentToTicket: (
      inputs: IntentToInputOutput['ZENDESK_ADD_COMMENT_TO_TICKET'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZENDESK_ADD_COMMENT_TO_TICKET'][0],
      IntentToInputOutput['ZENDESK_ADD_COMMENT_TO_TICKET'][1]
    >;

    /**
     * Search Tickets
     * method for ZENDESK_SEARCH_TICKETS
     */
    searchTickets: (
      inputs: IntentToInputOutput['ZENDESK_SEARCH_TICKETS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZENDESK_SEARCH_TICKETS'][0],
      IntentToInputOutput['ZENDESK_SEARCH_TICKETS'][1]
    >;

    /**
     * Get Ticket by ID
     * method for ZENDESK_GET_TICKET_BY_ID
     */
    getTicketById: (
      inputs: IntentToInputOutput['ZENDESK_GET_TICKET_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZENDESK_GET_TICKET_BY_ID'][0],
      IntentToInputOutput['ZENDESK_GET_TICKET_BY_ID'][1]
    >;

    /**
     * Get Ticket Audits
     * method for ZENDESK_GET_TICKET_AUDITS
     */
    getTicketAudits: (
      inputs: IntentToInputOutput['ZENDESK_GET_TICKET_AUDITS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZENDESK_GET_TICKET_AUDITS'][0],
      IntentToInputOutput['ZENDESK_GET_TICKET_AUDITS'][1]
    >;

    /**
     * Create User
     * method for ZENDESK_CREATE_USER
     */
    createUser: (
      inputs: IntentToInputOutput['ZENDESK_CREATE_USER'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZENDESK_CREATE_USER'][0],
      IntentToInputOutput['ZENDESK_CREATE_USER'][1]
    >;

    /**
     * Update User
     * method for ZENDESK_UPDATE_USER
     */
    updateUser: (
      inputs: IntentToInputOutput['ZENDESK_UPDATE_USER'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZENDESK_UPDATE_USER'][0],
      IntentToInputOutput['ZENDESK_UPDATE_USER'][1]
    >;

    /**
     * Search Users
     * method for ZENDESK_SEARCH_USERS
     */
    searchUsers: (
      inputs: IntentToInputOutput['ZENDESK_SEARCH_USERS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZENDESK_SEARCH_USERS'][0],
      IntentToInputOutput['ZENDESK_SEARCH_USERS'][1]
    >;

    /**
     * Get User by ID
     * method for ZENDESK_GET_USER_BY_ID
     */
    getUserById: (
      inputs: IntentToInputOutput['ZENDESK_GET_USER_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZENDESK_GET_USER_BY_ID'][0],
      IntentToInputOutput['ZENDESK_GET_USER_BY_ID'][1]
    >;

    /**
     * Search All Records
     * method for ZENDESK_SEARCH_ALL_RECORDS
     */
    searchAllRecords: (
      inputs: IntentToInputOutput['ZENDESK_SEARCH_ALL_RECORDS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['ZENDESK_SEARCH_ALL_RECORDS'][0],
      IntentToInputOutput['ZENDESK_SEARCH_ALL_RECORDS'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Ticket
     * method for ZENDESK_TRIGGER_TICKET_CREATED
     */
    ticketCreated: (
      inputs: TriggerIntentToInputOutput['ZENDESK_TRIGGER_TICKET_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['ZENDESK_TRIGGER_TICKET_CREATED'][0],
      TriggerIntentToInputOutput['ZENDESK_TRIGGER_TICKET_CREATED'][1]
    >;

    /**
     * Ticket Updated
     * method for ZENDESK_TRIGGER_TICKET_UPDATED
     */
    ticketUpdated: (
      inputs: TriggerIntentToInputOutput['ZENDESK_TRIGGER_TICKET_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['ZENDESK_TRIGGER_TICKET_UPDATED'][0],
      TriggerIntentToInputOutput['ZENDESK_TRIGGER_TICKET_UPDATED'][1]
    >;
  };
};
