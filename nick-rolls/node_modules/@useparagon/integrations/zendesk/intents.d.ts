/**
 * Create Ticket intent type
 */
type ZendeskCreateTicket = {
  /**
   * Subject
   *
   * **Example**:
   * ```
   * Help, my printer is on fire!
   * ```
   */
  ticketSubject: string;

  /**
   * Description
   * The first comment that appears on the ticket.
   *
   * **Example**:
   * ```
   * The smoke is very colorful.
   * ```
   */
  ticketDescription: string;

  /**
   * Requester Name
   * The name of the user who requested this ticket. If you add this field, you must also specify a Request Email in the next field.
   *
   * **Example**:
   * ```
   * Jane Customer
   * ```
   */
  requesterName: string;

  /**
   * Requester Email
   * The subtitle of the user who requested this ticket.
   *
   * **Example**:
   * ```
   * jane@example.com
   * ```
   */
  requesterEmail: string;

  /**
   * Assignee ID
   * The Zendesk Agent assigned to this Ticket. Use Connect Portal Workflow Settings to allow users to select an Assignee.
   *
   * **Example**:
   * ```
   * {{settings.assignee}}
   * ```
   */
  assigneeId?: string;

  /**
   * Type
   *
   */
  ticketType?: 'problem' | 'incident' | 'question' | 'task';

  /**
   * Priority
   *
   */
  ticketPriority?: 'urgent' | 'high' | 'normal' | 'low';

  /**
   * Status
   *
   */
  ticketStatus?: 'new' | 'open' | 'pending' | 'hold' | 'solved' | 'closed';

  /**
   * Due At
   * If this is a ticket of type "task" it has a due date (ISO 8601 timestamp).
   *
   * **Example**:
   * ```
   * 2019-09-15T02:06:58.147Z
   * ```
   */
  ticketDueAt?: string;

  /**
   * Tags
   * The array of tags applied to this ticket.
   *
   * **Example**:
   * ```
   * ["enterprise", "other_tag"]
   * ```
   */
  ticketTags?: string;

  /**
   * External ID
   * An ID you can use to link Zendesk Support tickets to local records
   *
   */
  ticketExternalId?: string;

  /**
   * Custom fields
   *
   * **Example**:
   * ```
   * [
   *    { "id":    27642, "value": "745" },
   *    { "id":    27648, "value": "yes" }
   *  ]
   * ```
   */
  ticketCustomFields?: string;
};

/**
 * Update Ticket intent type
 */
type ZendeskUpdateTicket = {
  /**
   * Ticket ID
   * The ID of the ticket to update.
   *
   * **Example**:
   * ```
   * 35436
   * ```
   */
  ticketId: string;

  /**
   * Subject
   *
   * **Example**:
   * ```
   * Help, my printer is on fire!
   * ```
   */
  ticketSubject?: string;

  /**
   * Requester Name
   * The name of the user who requested this ticket. If you add this field, you must also specify a Request Email in the next field.
   *
   * **Example**:
   * ```
   * Jane Customer
   * ```
   */
  requesterName: string;

  /**
   * Requester Email
   * The subtitle of the user who requested this ticket.
   *
   * **Example**:
   * ```
   * jane@example.com
   * ```
   */
  requesterEmail: string;

  /**
   * Assignee ID
   * The Zendesk Agent assigned to this Ticket. Use Connect Portal Workflow Settings to allow users to select an Assignee.
   *
   * **Example**:
   * ```
   * {{settings.assignee}}
   * ```
   */
  assigneeId?: string;

  /**
   * Type
   *
   */
  ticketType?: 'problem' | 'incident' | 'question' | 'task';

  /**
   * Priority
   *
   */
  ticketPriority?: 'urgent' | 'high' | 'normal' | 'low';

  /**
   * Status
   *
   */
  ticketStatus?: 'new' | 'open' | 'pending' | 'hold' | 'solved' | 'closed';

  /**
   * Due At
   * If this is a ticket of type "task" it has a due date (ISO 8601 timestamp).
   *
   * **Example**:
   * ```
   * 2019-09-15T02:06:58.147Z
   * ```
   */
  ticketDueAt?: string;

  /**
   * Tags
   * The array of tags applied to this ticket.
   *
   * **Example**:
   * ```
   * ["enterprise", "other_tag"]
   * ```
   */
  ticketTags?: string;

  /**
   * External ID
   * An ID you can use to link Zendesk Support tickets to local records
   *
   */
  ticketExternalId?: string;

  /**
   * Custom fields
   *
   * **Example**:
   * ```
   * [
   *    { "id":    27642, "value": "745" },
   *    { "id":    27648, "value": "yes" }
   *  ]
   * ```
   */
  ticketCustomFields?: string;
};

/**
 * Add Comment to Ticket intent type
 */
type ZendeskAddCommentToTicket = {
  /**
   * Ticket ID
   * The ID of the ticket the comment will be added to.
   *
   * **Example**:
   * ```
   * 35436
   * ```
   */
  ticketId: string;

  /**
   * Body
   * The comment message. Accepts plain text or HTML.
   *
   * **Example**:
   * ```
   * Thanks for your help!
   * ```
   */
  commentBody: string;

  /**
   * Create as internal note?
   * Set to true if the comment should be an internal note, instead of a public reply. Defaults to false.
   *
   */
  isInternalNote?: boolean;

  /**
   * Public
   * True if a public comment; false if an internal note.
   *
   */
  isPublic?: boolean;
};

/**
 * Search Tickets intent type
 */
type ZendeskSearchTickets = {
  /**
   * Subject
   * Filter results by the text in the ticket’s subject.
   *
   */
  ticketSubject?: string;

  /**
   * Description
   * Filter results by the text in the ticket's description and comments.
   *
   */
  ticketDescription?: string;

  /**
   * Status
   *
   */
  ticketStatus?: 'new' | 'open' | 'pending' | 'hold' | 'solved' | 'closed';

  /**
   * Type
   *
   */
  ticketType?: 'problem' | 'incident' | 'question' | 'task' | 'no_type';

  /**
   * Created Date
   * Filter tickets by their created date.
   *
   * **Example**:
   * ```
   * YYYY-MM-DD
   * ```
   */
  ['createdDate-left']?: 'EQUALS' | 'LESS_THAN_EQUALS' | 'GREATER_THAN_EQUALS';

  /**
   * Created Date Value
   * Filter tickets by their created date.
   *
   * **Example**:
   * ```
   * YYYY-MM-DD
   * ```
   */
  ['createdDate-right']?: string;

  /**
   * Updated Date
   * Filter tickets by their updated date.
   *
   * **Example**:
   * ```
   * YYYY-MM-DD
   * ```
   */
  ['updatedDate-left']?: 'EQUALS' | 'LESS_THAN_EQUALS' | 'GREATER_THAN_EQUALS';

  /**
   * Updated Date Value
   * Filter tickets by their updated date.
   *
   * **Example**:
   * ```
   * YYYY-MM-DD
   * ```
   */
  ['updatedDate-right']?: string;

  /**
   * Due Date
   * Filter tickets by their due date.
   *
   * **Example**:
   * ```
   * YYYY-MM-DD
   * ```
   */
  ['dueDate-left']?: 'EQUALS' | 'LESS_THAN_EQUALS' | 'GREATER_THAN_EQUALS';

  /**
   * Due Date Value
   * Filter tickets by their due date.
   *
   * **Example**:
   * ```
   * YYYY-MM-DD
   * ```
   */
  ['dueDate-right']?: string;

  /**
   * Requester ID
   * Filter by the user who requested this ticket.
   *
   */
  requesterId?: string;

  /**
   * Assignee ID
   * Filter by the agent assigned to the ticket.
   *
   */
  assigneeId?: string;

  /**
   * Recipient
   * Filter by the original recipient e-mail address of the ticket.
   *
   * **Example**:
   * ```
   * name@example.com
   * ```
   */
  recipientEmail?: string;

  /**
   * Priority
   *
   */
  ticketPriority?: 'urgent' | 'high' | 'normal' | 'low' | 'no_priority';

  /**
   * Tags
   * Filter tickets by their tag.
   *
   */
  ticketTags?: string;

  /**
   * External ID
   * Filter by tickets by their external ID.
   *
   */
  ticketExternalId?: string;

  /**
   * Sort By
   *
   */
  sort_by?: 'created_at' | 'updated_at' | 'priority' | 'status' | 'ticket_type';

  /**
   * Sort Order
   *
   */
  sort_order?: 'asc' | 'desc';
};

/**
 * Get Ticket by ID intent type
 */
type ZendeskGetTicketById = {
  /**
   * Ticket ID
   *
   * **Example**:
   * ```
   * 35436
   * ```
   */
  ticketId: string;
};

/**
 * Get Ticket Audits intent type
 */
type ZendeskGetTicketAudits = {
  /**
   * Ticket ID
   * Get ticket audits for a specified ticket. If empty, audit records for all non-archived tickets will be retrieved.
   *
   * **Example**:
   * ```
   * 1234
   * ```
   */
  ticketId?: string;
};

/**
 * Create User intent type
 */
type ZendeskCreateUser = {
  /**
   * Name
   *
   */
  name: string;

  /**
   * Email
   *
   * **Example**:
   * ```
   * jane@example.com
   * ```
   */
  email?: string;

  /**
   * Phone
   *
   */
  phone?: string;

  /**
   * Role
   *
   */
  role?: 'admin' | 'agent' | 'end-user';

  /**
   * External ID
   * A unique identifier from another system.
   *
   */
  externalId?: string;

  /**
   * Details
   *
   */
  details?: string;

  /**
   * Notes
   *
   */
  notes?: string;
};

/**
 * Update User intent type
 */
type ZendeskUpdateUser = {
  /**
   * User ID
   * The ID of the user to update.
   *
   */
  userId: string;

  /**
   * Name
   *
   */
  name?: string;

  /**
   * Email
   * On update, a secondary email is added.
   *
   * **Example**:
   * ```
   * jane@example.com
   * ```
   */
  email?: string;

  /**
   * Phone
   *
   */
  phone?: string;

  /**
   * Role
   *
   */
  role?: 'admin' | 'agent' | 'end-user';

  /**
   * External ID
   * A unique identifier from another system.
   *
   */
  externalId?: string;

  /**
   * Details
   *
   */
  details?: string;

  /**
   * Notes
   *
   */
  notes?: string;
};

/**
 * Search Users intent type
 */
type ZendeskSearchUsers = {
  /**
   * Name
   * Filter results by the user’s name.
   *
   */
  name?: string;

  /**
   * Email
   * Filter results by the user’s email.
   *
   * **Example**:
   * ```
   * jane@example.com
   * ```
   */
  email?: string;

  /**
   * Role
   *
   */
  role?: 'admin' | 'agent' | 'end-user';

  /**
   * External ID
   * Filter by users by their external ID.
   *
   */
  externalId?: string;

  /**
   * Sort By
   *
   */
  sort_by?: 'created_at' | 'updated_at';

  /**
   * Sort Order
   *
   */
  sort_order?: 'asc' | 'desc';
};

/**
 * Get User by ID intent type
 */
type ZendeskGetUserById = {
  /**
   * User ID
   * The ID of the user to get.
   *
   */
  userId: string;
};

/**
 * Search All Records intent type
 */
type ZendeskSearchAllRecords = {
  /**
   * Query
   * Search using this query for matching tickets, users, and organizations
   *
   * **Example**:
   * ```
   * type:user "Jane Doe"
   * ```
   */
  query: string;

  /**
   * Sort By
   *
   */
  sort_by?: 'created_at' | 'updated_at' | 'priority' | 'status' | 'ticket_type';

  /**
   * Sort Order
   *
   */
  sort_order?: 'asc' | 'desc';
};

export type IntentToInputOutput = {
  /**
   * ZENDESK_CREATE_TICKET
   */
  ZENDESK_CREATE_TICKET: [ZendeskCreateTicket, any];

  /**
   * ZENDESK_UPDATE_TICKET
   */
  ZENDESK_UPDATE_TICKET: [ZendeskUpdateTicket, any];

  /**
   * ZENDESK_ADD_COMMENT_TO_TICKET
   */
  ZENDESK_ADD_COMMENT_TO_TICKET: [ZendeskAddCommentToTicket, any];

  /**
   * ZENDESK_SEARCH_TICKETS
   */
  ZENDESK_SEARCH_TICKETS: [ZendeskSearchTickets, any];

  /**
   * ZENDESK_GET_TICKET_BY_ID
   */
  ZENDESK_GET_TICKET_BY_ID: [ZendeskGetTicketById, any];

  /**
   * ZENDESK_GET_TICKET_AUDITS
   */
  ZENDESK_GET_TICKET_AUDITS: [ZendeskGetTicketAudits, any];

  /**
   * ZENDESK_CREATE_USER
   */
  ZENDESK_CREATE_USER: [ZendeskCreateUser, any];

  /**
   * ZENDESK_UPDATE_USER
   */
  ZENDESK_UPDATE_USER: [ZendeskUpdateUser, any];

  /**
   * ZENDESK_SEARCH_USERS
   */
  ZENDESK_SEARCH_USERS: [ZendeskSearchUsers, any];

  /**
   * ZENDESK_GET_USER_BY_ID
   */
  ZENDESK_GET_USER_BY_ID: [ZendeskGetUserById, any];

  /**
   * ZENDESK_SEARCH_ALL_RECORDS
   */
  ZENDESK_SEARCH_ALL_RECORDS: [ZendeskSearchAllRecords, any];
};
