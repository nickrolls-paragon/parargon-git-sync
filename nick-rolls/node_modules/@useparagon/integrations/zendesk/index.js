const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for zendesk
 */
exports.inputs = [
  {
    id: 'zendeskAgentUsers',
    title: 'Assignee',
    type: 'DYNAMIC_DATA_SOURCE',
  },
];

/**
 * triggers for zendesk
 */
exports.triggers = [
  {
    title: 'New Ticket',
    name: 'ZENDESK_TRIGGER_TICKET_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Ticket Updated',
    name: 'ZENDESK_TRIGGER_TICKET_UPDATED',
    output: [],
    inputs: [],
  },
];

/**
 * intents for zendesk
 */
exports.intents = [
  {
    title: 'Create Ticket',
    name: 'ZENDESK_CREATE_TICKET',
    output: [],
    inputs: [
      {
        id: 'ticketSubject',
        title: 'Subject',
        type: 'TEXTAREA',
        placeholder: 'Help, my printer is on fire!',
        required: true,
      },
      {
        id: 'ticketDescription',
        title: 'Description',
        type: 'TEXTAREA',
        subtitle: 'The first comment that appears on the ticket.',
        placeholder: 'The smoke is very colorful.',
        required: true,
      },
      {
        id: 'requesterName',
        title: 'Requester Name',
        type: 'TEXTAREA',
        subtitle:
          'The name of the user who requested this ticket. If you add this field, you must also specify a Request Email in the next field.',
        placeholder: 'Jane Customer',
        required: true,
      },
      {
        id: 'requesterEmail',
        title: 'Requester Email',
        type: 'TEXTAREA',
        subtitle: 'The subtitle of the user who requested this ticket.',
        placeholder: 'jane@example.com',
        required: true,
      },
      {
        id: 'assigneeId',
        title: 'Assignee ID',
        type: 'TEXTAREA',
        subtitle:
          'The Zendesk Agent assigned to this Ticket. Use Connect Portal Workflow Settings to allow users to select an Assignee.',
        placeholder: '{{settings.assignee}}',
      },
      {
        id: 'ticketType',
        title: 'Type',
        type: 'EDITABLE_ENUM',
        values: ['problem', 'incident', 'question', 'task'],
      },
      {
        id: 'ticketPriority',
        title: 'Priority',
        type: 'EDITABLE_ENUM',
        values: ['urgent', 'high', 'normal', 'low'],
      },
      {
        id: 'ticketStatus',
        title: 'Status',
        type: 'EDITABLE_ENUM',
        values: ['new', 'open', 'pending', 'hold', 'solved', 'closed'],
      },
      {
        id: 'ticketDueAt',
        title: 'Due At',
        type: 'TEXTAREA',
        subtitle:
          'If this is a ticket of type "task" it has a due date (ISO 8601 timestamp).',
        placeholder: '2019-09-15T02:06:58.147Z',
      },
      {
        id: 'ticketTags',
        title: 'Tags',
        type: 'TEXTAREA',
        subtitle: 'The array of tags applied to this ticket.',
        placeholder: '["enterprise", "other_tag"]',
      },
      {
        id: 'ticketExternalId',
        title: 'External ID',
        type: 'TEXTAREA',
        subtitle:
          'An ID you can use to link Zendesk Support tickets to local records',
      },
      {
        id: 'ticketCustomFields',
        title: 'Custom fields',
        type: 'CODE',
        placeholder:
          '[\n    { "id":    27642, "value": "745" },\n    { "id":    27648, "value": "yes" }\n  ]',
      },
    ],
  },
  {
    title: 'Update Ticket',
    name: 'ZENDESK_UPDATE_TICKET',
    output: [],
    inputs: [
      {
        id: 'ticketId',
        title: 'Ticket ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the ticket to update.',
        placeholder: '35436',
        required: true,
      },
      {
        id: 'ticketSubject',
        title: 'Subject',
        type: 'TEXTAREA',
        placeholder: 'Help, my printer is on fire!',
      },
      {
        id: 'requesterName',
        title: 'Requester Name',
        type: 'TEXTAREA',
        subtitle:
          'The name of the user who requested this ticket. If you add this field, you must also specify a Request Email in the next field.',
        placeholder: 'Jane Customer',
        required: true,
      },
      {
        id: 'requesterEmail',
        title: 'Requester Email',
        type: 'TEXTAREA',
        subtitle: 'The subtitle of the user who requested this ticket.',
        placeholder: 'jane@example.com',
        required: true,
      },
      {
        id: 'assigneeId',
        title: 'Assignee ID',
        type: 'TEXTAREA',
        subtitle:
          'The Zendesk Agent assigned to this Ticket. Use Connect Portal Workflow Settings to allow users to select an Assignee.',
        placeholder: '{{settings.assignee}}',
      },
      {
        id: 'ticketType',
        title: 'Type',
        type: 'EDITABLE_ENUM',
        values: ['problem', 'incident', 'question', 'task'],
      },
      {
        id: 'ticketPriority',
        title: 'Priority',
        type: 'EDITABLE_ENUM',
        values: ['urgent', 'high', 'normal', 'low'],
      },
      {
        id: 'ticketStatus',
        title: 'Status',
        type: 'EDITABLE_ENUM',
        values: ['new', 'open', 'pending', 'hold', 'solved', 'closed'],
      },
      {
        id: 'ticketDueAt',
        title: 'Due At',
        type: 'TEXTAREA',
        subtitle:
          'If this is a ticket of type "task" it has a due date (ISO 8601 timestamp).',
        placeholder: '2019-09-15T02:06:58.147Z',
      },
      {
        id: 'ticketTags',
        title: 'Tags',
        type: 'TEXTAREA',
        subtitle: 'The array of tags applied to this ticket.',
        placeholder: '["enterprise", "other_tag"]',
      },
      {
        id: 'ticketExternalId',
        title: 'External ID',
        type: 'TEXTAREA',
        subtitle:
          'An ID you can use to link Zendesk Support tickets to local records',
      },
      {
        id: 'ticketCustomFields',
        title: 'Custom fields',
        type: 'CODE',
        placeholder:
          '[\n    { "id":    27642, "value": "745" },\n    { "id":    27648, "value": "yes" }\n  ]',
      },
    ],
  },
  {
    title: 'Add Comment to Ticket',
    name: 'ZENDESK_ADD_COMMENT_TO_TICKET',
    output: [],
    inputs: [
      {
        id: 'ticketId',
        title: 'Ticket ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the ticket the comment will be added to.',
        placeholder: '35436',
        required: true,
      },
      {
        id: 'commentBody',
        title: 'Body',
        type: 'TEXTAREA',
        subtitle: 'The comment message. Accepts plain text or HTML.',
        placeholder: 'Thanks for your help!',
        required: true,
      },
      {
        id: 'isInternalNote',
        title: 'Create as internal note?',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Set to true if the comment should be an internal note, instead of a public reply. Defaults to false.',
      },
      {
        id: 'isPublic',
        title: 'Public',
        type: 'BOOLEAN_INPUT',
        subtitle: 'True if a public comment; false if an internal note.',
      },
    ],
  },
  {
    title: 'Search Tickets',
    name: 'ZENDESK_SEARCH_TICKETS',
    output: [],
    inputs: [
      {
        id: 'ticketSubject',
        title: 'Subject',
        type: 'TEXTAREA',
        subtitle: 'Filter results by the text in the ticketâ€™s subject.',
      },
      {
        id: 'ticketDescription',
        title: 'Description',
        type: 'TEXTAREA',
        subtitle:
          "Filter results by the text in the ticket's description and comments.",
      },
      {
        id: 'ticketStatus',
        title: 'Status',
        type: 'EDITABLE_ENUM',
        values: ['new', 'open', 'pending', 'hold', 'solved', 'closed'],
      },
      {
        id: 'ticketType',
        title: 'Type',
        type: 'EDITABLE_ENUM',
        values: ['problem', 'incident', 'question', 'task', 'no_type'],
      },
      {
        id: 'createdDate-left',
        title: 'Created Date',
        type: 'ENUM',
        subtitle: 'Filter tickets by their created date.',
        placeholder: 'YYYY-MM-DD',
        values: ['EQUALS', 'LESS_THAN_EQUALS', 'GREATER_THAN_EQUALS'],
      },
      {
        id: 'createdDate-right',
        title: 'Created Date Value',
        type: 'TEXTAREA',
        subtitle: 'Filter tickets by their created date.',
        placeholder: 'YYYY-MM-DD',
      },
      {
        id: 'updatedDate-left',
        title: 'Updated Date',
        type: 'ENUM',
        subtitle: 'Filter tickets by their updated date.',
        placeholder: 'YYYY-MM-DD',
        values: ['EQUALS', 'LESS_THAN_EQUALS', 'GREATER_THAN_EQUALS'],
      },
      {
        id: 'updatedDate-right',
        title: 'Updated Date Value',
        type: 'TEXTAREA',
        subtitle: 'Filter tickets by their updated date.',
        placeholder: 'YYYY-MM-DD',
      },
      {
        id: 'dueDate-left',
        title: 'Due Date',
        type: 'ENUM',
        subtitle: 'Filter tickets by their due date.',
        placeholder: 'YYYY-MM-DD',
        values: ['EQUALS', 'LESS_THAN_EQUALS', 'GREATER_THAN_EQUALS'],
      },
      {
        id: 'dueDate-right',
        title: 'Due Date Value',
        type: 'TEXTAREA',
        subtitle: 'Filter tickets by their due date.',
        placeholder: 'YYYY-MM-DD',
      },
      {
        id: 'requesterId',
        title: 'Requester ID',
        type: 'TEXTAREA',
        subtitle: 'Filter by the user who requested this ticket.',
      },
      {
        id: 'assigneeId',
        title: 'Assignee ID',
        type: 'TEXTAREA',
        subtitle: 'Filter by the agent assigned to the ticket.',
      },
      {
        id: 'recipientEmail',
        title: 'Recipient',
        type: 'TEXTAREA',
        subtitle:
          'Filter by the original recipient e-mail address of the ticket.',
        placeholder: 'name@example.com',
      },
      {
        id: 'ticketPriority',
        title: 'Priority',
        type: 'EDITABLE_ENUM',
        values: ['urgent', 'high', 'normal', 'low', 'no_priority'],
      },
      {
        id: 'ticketTags',
        title: 'Tags',
        type: 'TEXTAREA',
        subtitle: 'Filter tickets by their tag.',
      },
      {
        id: 'ticketExternalId',
        title: 'External ID',
        type: 'TEXTAREA',
        subtitle: 'Filter by tickets by their external ID.',
      },
      {
        id: 'sort_by',
        title: 'Sort By',
        type: 'ENUM',
        values: [
          'created_at',
          'updated_at',
          'priority',
          'status',
          'ticket_type',
        ],
      },
      {
        id: 'sort_order',
        title: 'Sort Order',
        type: 'ENUM',
        values: ['asc', 'desc'],
      },
    ],
  },
  {
    title: 'Get Ticket by ID',
    name: 'ZENDESK_GET_TICKET_BY_ID',
    output: [],
    inputs: [
      {
        id: 'ticketId',
        title: 'Ticket ID',
        type: 'TEXTAREA',
        placeholder: '35436',
        required: true,
      },
    ],
  },
  {
    title: 'Get Ticket Audits',
    name: 'ZENDESK_GET_TICKET_AUDITS',
    output: [],
    inputs: [
      {
        id: 'ticketId',
        title: 'Ticket ID',
        type: 'TEXTAREA',
        subtitle:
          'Get ticket audits for a specified ticket. If empty, audit records for all non-archived tickets will be retrieved.',
        placeholder: '1234',
      },
    ],
  },
  {
    title: 'Create User',
    name: 'ZENDESK_CREATE_USER',
    output: [],
    inputs: [
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'email',
        title: 'Email',
        type: 'TEXTAREA',
        placeholder: 'jane@example.com',
      },
      {
        id: 'phone',
        title: 'Phone',
        type: 'TEXTAREA',
      },
      {
        id: 'role',
        title: 'Role',
        type: 'ENUM',
        values: ['admin', 'agent', 'end-user'],
      },
      {
        id: 'externalId',
        title: 'External ID',
        type: 'TEXTAREA',
        subtitle: 'A unique identifier from another system.',
      },
      {
        id: 'details',
        title: 'Details',
        type: 'TEXTAREA',
      },
      {
        id: 'notes',
        title: 'Notes',
        type: 'TEXTAREA',
      },
    ],
  },
  {
    title: 'Update User',
    name: 'ZENDESK_UPDATE_USER',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the user to update.',
        required: true,
      },
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
      },
      {
        id: 'email',
        title: 'Email',
        type: 'TEXTAREA',
        subtitle: 'On update, a secondary email is added.',
        placeholder: 'jane@example.com',
      },
      {
        id: 'phone',
        title: 'Phone',
        type: 'TEXTAREA',
      },
      {
        id: 'role',
        title: 'Role',
        type: 'ENUM',
        values: ['admin', 'agent', 'end-user'],
      },
      {
        id: 'externalId',
        title: 'External ID',
        type: 'TEXTAREA',
        subtitle: 'A unique identifier from another system.',
      },
      {
        id: 'details',
        title: 'Details',
        type: 'TEXTAREA',
      },
      {
        id: 'notes',
        title: 'Notes',
        type: 'TEXTAREA',
      },
    ],
  },
  {
    title: 'Search Users',
    name: 'ZENDESK_SEARCH_USERS',
    output: [],
    inputs: [
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
        subtitle: 'Filter results by the userâ€™s name.',
      },
      {
        id: 'email',
        title: 'Email',
        type: 'TEXTAREA',
        subtitle: 'Filter results by the userâ€™s email.',
        placeholder: 'jane@example.com',
      },
      {
        id: 'role',
        title: 'Role',
        type: 'ENUM',
        values: ['admin', 'agent', 'end-user'],
      },
      {
        id: 'externalId',
        title: 'External ID',
        type: 'TEXTAREA',
        subtitle: 'Filter by users by their external ID.',
      },
      {
        id: 'sort_by',
        title: 'Sort By',
        type: 'ENUM',
        values: ['created_at', 'updated_at'],
      },
      {
        id: 'sort_order',
        title: 'Sort Order',
        type: 'ENUM',
        values: ['asc', 'desc'],
      },
    ],
  },
  {
    title: 'Get User by ID',
    name: 'ZENDESK_GET_USER_BY_ID',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the user to get.',
        required: true,
      },
    ],
  },
  {
    title: 'Search All Records',
    name: 'ZENDESK_SEARCH_ALL_RECORDS',
    output: [],
    inputs: [
      {
        id: 'query',
        title: 'Query',
        type: 'TEXTAREA',
        subtitle:
          'Search using this query for matching tickets, users, and organizations',
        placeholder: 'type:user "Jane Doe"',
        required: true,
      },
      {
        id: 'sort_by',
        title: 'Sort By',
        type: 'ENUM',
        values: [
          'created_at',
          'updated_at',
          'priority',
          'status',
          'ticket_type',
        ],
      },
      {
        id: 'sort_order',
        title: 'Sort Order',
        type: 'ENUM',
        values: ['asc', 'desc'],
      },
    ],
  },
];

/**
 * integration class for zendesk
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'zendesk',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Ticket
     * method for ZENDESK_CREATE_TICKET
     */
    createTicket: (inputs, options) => {
      return new ActionStep({
        intent: 'ZENDESK_CREATE_TICKET',
        actionType: 'zendesk',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Ticket
     * method for ZENDESK_UPDATE_TICKET
     */
    updateTicket: (inputs, options) => {
      return new ActionStep({
        intent: 'ZENDESK_UPDATE_TICKET',
        actionType: 'zendesk',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Add Comment to Ticket
     * method for ZENDESK_ADD_COMMENT_TO_TICKET
     */
    addCommentToTicket: (inputs, options) => {
      return new ActionStep({
        intent: 'ZENDESK_ADD_COMMENT_TO_TICKET',
        actionType: 'zendesk',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Tickets
     * method for ZENDESK_SEARCH_TICKETS
     */
    searchTickets: (inputs, options) => {
      return new ActionStep({
        intent: 'ZENDESK_SEARCH_TICKETS',
        actionType: 'zendesk',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Ticket by ID
     * method for ZENDESK_GET_TICKET_BY_ID
     */
    getTicketById: (inputs, options) => {
      return new ActionStep({
        intent: 'ZENDESK_GET_TICKET_BY_ID',
        actionType: 'zendesk',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Ticket Audits
     * method for ZENDESK_GET_TICKET_AUDITS
     */
    getTicketAudits: (inputs, options) => {
      return new ActionStep({
        intent: 'ZENDESK_GET_TICKET_AUDITS',
        actionType: 'zendesk',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create User
     * method for ZENDESK_CREATE_USER
     */
    createUser: (inputs, options) => {
      return new ActionStep({
        intent: 'ZENDESK_CREATE_USER',
        actionType: 'zendesk',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update User
     * method for ZENDESK_UPDATE_USER
     */
    updateUser: (inputs, options) => {
      return new ActionStep({
        intent: 'ZENDESK_UPDATE_USER',
        actionType: 'zendesk',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Users
     * method for ZENDESK_SEARCH_USERS
     */
    searchUsers: (inputs, options) => {
      return new ActionStep({
        intent: 'ZENDESK_SEARCH_USERS',
        actionType: 'zendesk',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get User by ID
     * method for ZENDESK_GET_USER_BY_ID
     */
    getUserById: (inputs, options) => {
      return new ActionStep({
        intent: 'ZENDESK_GET_USER_BY_ID',
        actionType: 'zendesk',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search All Records
     * method for ZENDESK_SEARCH_ALL_RECORDS
     */
    searchAllRecords: (inputs, options) => {
      return new ActionStep({
        intent: 'ZENDESK_SEARCH_ALL_RECORDS',
        actionType: 'zendesk',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Ticket
     * method for ZENDESK_TRIGGER_TICKET_CREATED
     */
    ticketCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'ZENDESK_TRIGGER_TICKET_CREATED',
        actionType: 'zendesk',
        parameters: inputs,
      });
    },
    /**
     * Ticket Updated
     * method for ZENDESK_TRIGGER_TICKET_UPDATED
     */
    ticketUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'ZENDESK_TRIGGER_TICKET_UPDATED',
        actionType: 'zendesk',
        parameters: inputs,
      });
    },
  },
};
