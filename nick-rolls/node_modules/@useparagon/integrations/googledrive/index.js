const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for googledrive
 */
exports.inputs = [
  {
    id: 'folders',
    title: 'Folder',
    type: 'DYNAMIC_DATA_SOURCE',
  },
];

/**
 * triggers for googledrive
 */
exports.triggers = [
  {
    title: 'File Created',
    name: 'GOOGLE_DRIVE_TRIGGER_FILE_CREATED',
    output: [],
    inputs: [
      {
        id: 'supportsAllDrives',
        title: 'Include Shared Drive Items',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Watch for events from files in Shared Drives. Defaults to false.',
        defaultValue: false,
      },
    ],
  },
  {
    title: 'File Updated',
    name: 'GOOGLE_DRIVE_TRIGGER_FILE_UPDATED',
    output: [],
    inputs: [
      {
        id: 'supportsAllDrives',
        title: 'Include Shared Drive Items',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Watch for events from files in Shared Drives. Defaults to false.',
        defaultValue: false,
      },
      {
        id: 'parentId',
        title: 'Folder',
        type: 'TEXTAREA',
        subtitle:
          'Specify the Folder ID to search for updated files within the folders. Defaults to the user’s root folder if left blank.',
        placeholder: 'folder1,folder2',
      },
    ],
  },
  {
    title: 'File Deleted',
    name: 'GOOGLE_DRIVE_TRIGGER_FILE_DELETED',
    output: [],
    inputs: [
      {
        id: 'triggerOnPermanentDeletionOnly',
        title: 'Trigger only on permanent file deletion',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Triggers only when a file is permanently deleted. If disabled, the workflow will trigger when a file is moved to the trash.',
        defaultValue: true,
      },
    ],
  },
];

/**
 * intents for googledrive
 */
exports.intents = [
  {
    title: 'Get File Metadata',
    name: 'GOOGLE_DRIVE_GET_FILE_BY_ID',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the file.',
        placeholder: '1PVW0QtmQv-829KNvV3DLbYL8WrpS4zhtPx2Ok',
        required: true,
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder: '\n  {\n    "supportsAllDrives": true\n  }',
      },
      {
        id: 'includeFileContents',
        title: 'Include File Contents',
        type: 'SWITCH',
      },
    ],
  },
  {
    title: 'Upload File',
    name: 'GOOGLE_DRIVE_SAVE_FILE',
    output: [],
    inputs: [
      {
        id: 'file',
        title: 'File',
        type: 'TEXT',
        required: true,
      },
      {
        id: 'parentId',
        title: 'Folder',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which Folder to save files to. Defaults to the user’s root folder if left blank.',
        placeholder: '{{settings.folder}}',
      },
      {
        id: 'sharedDrive',
        title: 'Shared Drive',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Specify whether the upload target is a shared drive. Defaults to false.',
      },
      {
        id: 'filename',
        title: 'File Name',
        type: 'TEXT',
        subtitle: 'Defaults to origin file name if left blank.',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        subtitle:
          'Specify any other fields that should be updated in JSON below. Use Connect Portal Workflow Settings to allow users to select which fields to update.',
        placeholder: '\n  {\n    "supportsAllDrives": true\n  }',
      },
    ],
  },
  {
    title: 'Download Google Doc',
    name: 'GOOGLE_DRIVE_EXPORT_DOC',
    output: [],
    inputs: [
      {
        id: 'fileId',
        title: 'File ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the ID of the File to export',
        placeholder: '2HlC2Zf57zAst33ht0MEi3WA0_ig4xVKx3-RvzkbvIfE',
        required: true,
      },
      {
        id: 'mimeType',
        title: 'MIME Type',
        type: 'TEXTAREA',
        placeholder: 'application/pdf',
        required: true,
      },
    ],
  },
  {
    title: 'Create Folder',
    name: 'GOOGLE_DRIVE_CREATE_FOLDER',
    output: [],
    inputs: [
      {
        id: 'folderName',
        title: 'Folder Name',
        type: 'TEXTAREA',
        subtitle: 'Specify a name for the folder.',
        placeholder: 'Folder 1',
        required: true,
      },
      {
        id: 'parentId',
        title: 'Parent ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the parent ID to create folder within the parent',
      },
    ],
  },
  {
    title: 'Delete Folder',
    name: 'GOOGLE_DRIVE_DELETE_FOLDER',
    output: [],
    inputs: [
      {
        id: 'folderId',
        title: 'Folder ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the folder.',
        placeholder: '1PVW0QtmQv-829KNvV3DLbYL8WrpS4zhtPx2Ok',
        required: true,
      },
    ],
  },
  {
    title: 'Get Folder by ID',
    name: 'GOOGLE_DRIVE_GET_FOLDER_BY_ID',
    output: [],
    inputs: [
      {
        id: 'folderId',
        title: 'Folder ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the folder.',
        placeholder: '1PVW0QtmQv-829KNvV3DLbYL8WrpS4zhtPx2Ok',
        required: true,
      },
    ],
  },
  {
    title: 'Move Folder',
    name: 'GOOGLE_DRIVE_MOVE_FOLDER',
    output: [],
    inputs: [
      {
        id: 'folderId',
        title: 'Folder ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the folder.',
        placeholder: '1PVW0QtmQv-829KNvV3DLbYL8WrpS4zhtPx2Ok',
        required: true,
      },
      {
        id: 'parentId',
        title: 'Parent ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the parent ID to move folder within the parent',
        placeholder: '1PVW0QtmQv-829KNvV3DLbYL8WrpS4zhtPx2Ok',
        required: true,
      },
    ],
  },
  {
    title: 'Get Files',
    name: 'GOOGLE_DRIVE_LIST_FILES',
    output: [],
    inputs: [
      {
        id: 'includeFolders',
        title: 'Include Folders',
        type: 'BOOLEAN_INPUT',
        required: true,
        defaultValue: false,
      },
      {
        id: 'parentId',
        title: 'Folder',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which Folder to get files from. Defaults to the user’s root folder if unspecified.',
        placeholder: '{{settings.folder}}',
      },
      {
        id: 'pageSize',
        title: 'Page Size',
        type: 'TEXT_NO_VARS',
        subtitle:
          'Specify the number of files to include on a page. Accepts values from 1 to 1000. Defaults to 100 if unspecified.',
        placeholder: '100',
      },
      {
        id: 'includeSharedItems',
        title: 'Include Shared Drive Items',
        type: 'BOOLEAN_INPUT',
        subtitle:
          'Specify whether search results should include files in shared drives. Defaults to false.',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        subtitle:
          'Specify any other fields that should be updated in JSON below. Use Connect Portal Workflow Settings to allow users to select which fields to update.',
        placeholder: '\n  {\n    "supportsAllDrives": true\n  }',
      },
    ],
  },
  {
    title: 'Search Folders',
    name: 'GOOGLE_DRIVE_SEARCH_FOLDERS',
    output: [],
    inputs: [
      {
        id: 'parentId',
        title: 'Parent ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the parent ID to search within the parent',
      },
      {
        id: 'driveId',
        title: 'Drive ID',
        type: 'TEXTAREA',
        subtitle: 'Search for shared drives inside shared parents',
      },
      {
        id: 'pageSize',
        title: 'Page Size',
        type: 'TEXTAREA',
        subtitle:
          'Specify the number of folders to include on a page. Accepts values from 1 to 1000. Defaults to 100 if unspecified.',
      },
      {
        id: 'filterFormula',
        title: 'Filter Search',
        type: 'CONDITIONAL',
        supportedKeys: ['name', 'createdTime', 'modifiedTime'],
        supportedOperators: [
          '$stringExactlyMatches',
          '$stringContains',
          '$dateTimeEquals',
          '$dateTimeBefore',
          '$dateTimeAfter',
        ],
      },
    ],
  },
];

/**
 * integration class for googledrive
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'googledrive',

  /**
   * action step methods
   */
  actions: {
    /**
     * Get File Metadata
     * method for GOOGLE_DRIVE_GET_FILE_BY_ID
     */
    googleDriveGetFileById: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_DRIVE_GET_FILE_BY_ID',
        actionType: 'googledrive',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Upload File
     * method for GOOGLE_DRIVE_SAVE_FILE
     */
    googleDriveSaveFile: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_DRIVE_SAVE_FILE',
        actionType: 'googledrive',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Download Google Doc
     * method for GOOGLE_DRIVE_EXPORT_DOC
     */
    googleDriveExportDoc: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_DRIVE_EXPORT_DOC',
        actionType: 'googledrive',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Folder
     * method for GOOGLE_DRIVE_CREATE_FOLDER
     */
    googleDriveCreateFolder: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_DRIVE_CREATE_FOLDER',
        actionType: 'googledrive',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Folder
     * method for GOOGLE_DRIVE_DELETE_FOLDER
     */
    googleDriveDeleteFolder: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_DRIVE_DELETE_FOLDER',
        actionType: 'googledrive',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Folder by ID
     * method for GOOGLE_DRIVE_GET_FOLDER_BY_ID
     */
    googleDriveGetFolderById: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_DRIVE_GET_FOLDER_BY_ID',
        actionType: 'googledrive',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Move Folder
     * method for GOOGLE_DRIVE_MOVE_FOLDER
     */
    googleDriveMoveFolder: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_DRIVE_MOVE_FOLDER',
        actionType: 'googledrive',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Files
     * method for GOOGLE_DRIVE_LIST_FILES
     */
    googleDriveListFiles: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_DRIVE_LIST_FILES',
        actionType: 'googledrive',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Folders
     * method for GOOGLE_DRIVE_SEARCH_FOLDERS
     */
    googleDriveSearchFolders: (inputs, options) => {
      return new ActionStep({
        intent: 'GOOGLE_DRIVE_SEARCH_FOLDERS',
        actionType: 'googledrive',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * File Created
     * method for GOOGLE_DRIVE_TRIGGER_FILE_CREATED
     */
    googleDriveTriggerFileCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_DRIVE_TRIGGER_FILE_CREATED',
        actionType: 'googledrive',
        parameters: inputs,
      });
    },
    /**
     * File Updated
     * method for GOOGLE_DRIVE_TRIGGER_FILE_UPDATED
     */
    googleDriveTriggerFileUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_DRIVE_TRIGGER_FILE_UPDATED',
        actionType: 'googledrive',
        parameters: inputs,
      });
    },
    /**
     * File Deleted
     * method for GOOGLE_DRIVE_TRIGGER_FILE_DELETED
     */
    googleDriveTriggerFileDeleted: (inputs) => {
      return new ActionTriggerStep({
        intent: 'GOOGLE_DRIVE_TRIGGER_FILE_DELETED',
        actionType: 'googledrive',
        parameters: inputs,
      });
    },
  },
};
