const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for microsoftTeams
 */
exports.inputs = [
  {
    id: 'chats',
    title: 'Member',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'teamChannelComboInput',
    title: 'Channel',
    type: 'COMBO_INPUT_DATA_SOURCE',
    mainInputSource: {
      id: 'teams',
      title: 'Teams',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    dependentInputSource: {
      id: 'channels',
      title: 'Channel',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
];

/**
 * triggers for microsoftTeams
 */
exports.triggers = [
  {
    title: 'Channel Created',
    name: 'TEAMS_TRIGGER_CHANNEL_CREATED',
    output: [],
    inputs: [
      {
        id: 'teamId',
        title: 'Team ID',
        type: 'TEXTAREA',
        subtitle:
          'The ID of the Team to search for users in. Use Connect Portal User Settings to allow your user to select a Team.',
        placeholder: 'e4da8430-de80-4815-9785-9c2441c24a7b',
        required: true,
      },
    ],
  },
  {
    title: 'Chat Created',
    name: 'TEAMS_TRIGGER_CHAT_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Chat Updated',
    name: 'TEAMS_TRIGGER_CHAT_UPDATED',
    output: [],
    inputs: [],
  },
];

/**
 * intents for microsoftTeams
 */
exports.intents = [
  {
    title: 'Send message in channel',
    name: 'TEAMS_SEND_MESSAGE_IN_CHANNEL',
    output: [],
    inputs: [
      {
        id: 'channel',
        title: 'Channel',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a channel.',
        placeholder: '{{settings.channel}}',
        required: true,
      },
      {
        id: 'message',
        title: 'Message',
        type: 'TEXTAREA',
        subtitle:
          'Plaintext/HTML representation of the content of the chat message.',
        required: true,
      },
      {
        id: 'summary',
        title: 'Summary',
        type: 'TEXTAREA',
        subtitle:
          'Summary text of the chat message that could be used for push notifications and summary views or fall back views. ',
      },
      {
        id: 'attachments',
        title: 'Chat Recipient',
        type: 'CODE',
        placeholder:
          '[\n  {\n    "contentType": "application/vnd.microsoft.card.adaptive",\n    "content": {\n      "type": "AdaptiveCard",\n      "version": "1.0",\n      "body": [\n        {\n          "type": "TextBlock",\n          "text": "Hello World!",\n          "size": "large"\n        },\n        {\n          "type": "TextBlock",\n          "text": "*Sincerely yours,*"\n        },\n        {\n          "type": "TextBlock",\n          "text": "Adaptive Cards",\n          "separation": "none"\n        }\n      ],\n      "actions": [\n        {\n          "type": "Action.OpenUrl",\n          "url": "http://adaptivecards.io",\n          "title": "Learn More"\n        }\n      ]\n    }\n  }\n]',
      },
      {
        id: 'attachmentLayout',
        title: 'Attachment Layout',
        type: 'EDITABLE_ENUM',
        subtitle:
          'If adding multiple attachments, specify a layout to use when rendering the message.',
        values: ['carousel', 'list'],
      },
    ],
  },
  {
    title: 'Send message in chat',
    name: 'TEAMS_SEND_MESSAGE_IN_CHAT',
    output: [],
    inputs: [
      {
        id: 'chatRecipient',
        title: 'Chat Recipient',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select a workspace member.',
        placeholder: '{{settings.member}}',
        required: true,
      },
      {
        id: 'message',
        title: 'Message',
        type: 'TEXTAREA',
        subtitle:
          'Plaintext/HTML representation of the content of the chat message.',
        required: true,
      },
      {
        id: 'subject',
        title: 'Subject',
        type: 'TEXTAREA',
        subtitle: 'The subject of the chat message, in plaintext.',
      },
      {
        id: 'summary',
        title: 'Summary',
        type: 'TEXTAREA',
        subtitle:
          'Summary text of the chat message that could be used for push notifications and summary views or fall back views. ',
      },
      {
        id: 'attachments',
        title: 'Chat Recipient',
        type: 'CODE',
        placeholder:
          '[\n  {\n    "contentType": "application/vnd.microsoft.card.adaptive",\n    "content": {\n      "type": "AdaptiveCard",\n      "version": "1.0",\n      "body": [\n        {\n          "type": "TextBlock",\n          "text": "Hello World!",\n          "size": "large"\n        },\n        {\n          "type": "TextBlock",\n          "text": "*Sincerely yours,*"\n        },\n        {\n          "type": "TextBlock",\n          "text": "Adaptive Cards",\n          "separation": "none"\n        }\n      ],\n      "actions": [\n        {\n          "type": "Action.OpenUrl",\n          "url": "http://adaptivecards.io",\n          "title": "Learn More"\n        }\n      ]\n    }\n  }\n]',
      },
      {
        id: 'attachmentLayout',
        title: 'Attachment Layout',
        type: 'EDITABLE_ENUM',
        subtitle:
          'If adding multiple attachments, specify a layout to use when rendering the message.',
        values: ['carousel', 'list'],
      },
    ],
  },
  {
    title: 'Get User by Email',
    name: 'TEAMS_GET_USER_BY_EMAIL',
    output: [],
    inputs: [
      {
        id: 'teamId',
        title: 'Team ID',
        type: 'TEXTAREA',
        subtitle:
          'The ID of the Team to search for users in. Use Connect Portal User Settings to allow your user to select a Team.',
        placeholder: 'e4da8430-de80-4815-9785-9c2441c24a7b',
        required: true,
      },
      {
        id: 'emailId',
        title: 'Email',
        type: 'TEXTAREA',
        subtitle: 'The email address of the user.',
        placeholder: 'sean@example.com',
        required: true,
      },
    ],
  },
];

/**
 * integration class for microsoftTeams
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'microsoftTeams',

  /**
   * action step methods
   */
  actions: {
    /**
     * Send message in channel
     * method for TEAMS_SEND_MESSAGE_IN_CHANNEL
     */
    teamsSendMessageInChannel: (inputs, options) => {
      return new ActionStep({
        intent: 'TEAMS_SEND_MESSAGE_IN_CHANNEL',
        actionType: 'microsoftTeams',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Send message in chat
     * method for TEAMS_SEND_MESSAGE_IN_CHAT
     */
    teamsSendMessageInChat: (inputs, options) => {
      return new ActionStep({
        intent: 'TEAMS_SEND_MESSAGE_IN_CHAT',
        actionType: 'microsoftTeams',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get User by Email
     * method for TEAMS_GET_USER_BY_EMAIL
     */
    teamsGetUserByEmail: (inputs, options) => {
      return new ActionStep({
        intent: 'TEAMS_GET_USER_BY_EMAIL',
        actionType: 'microsoftTeams',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Channel Created
     * method for TEAMS_TRIGGER_CHANNEL_CREATED
     */
    teamsTriggerChannelCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'TEAMS_TRIGGER_CHANNEL_CREATED',
        actionType: 'microsoftTeams',
        parameters: inputs,
      });
    },
    /**
     * Chat Created
     * method for TEAMS_TRIGGER_CHAT_CREATED
     */
    teamsTriggerChatCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'TEAMS_TRIGGER_CHAT_CREATED',
        actionType: 'microsoftTeams',
        parameters: inputs,
      });
    },
    /**
     * Chat Updated
     * method for TEAMS_TRIGGER_CHAT_UPDATED
     */
    teamsTriggerChatUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'TEAMS_TRIGGER_CHAT_UPDATED',
        actionType: 'microsoftTeams',
        parameters: inputs,
      });
    },
  },
};
