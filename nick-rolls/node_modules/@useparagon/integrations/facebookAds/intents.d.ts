import { ConditionalInput } from '@useparagon/core/steps/library/conditional';

/**
 * Create Campaign intent type
 */
type FacebookAdsCreateCampaign = {
  /**
   * Name
   * The name of the campaign.
   *
   */
  name: string;

  /**
   * Objective
   * Specify the objective for this campaign.
   *
   */
  objective:
    | 'APP_INSTALLS'
    | 'BRAND_AWARENESS'
    | 'CONVERSIONS'
    | 'EVENT_RESPONSES'
    | 'LEAD_GENERATION'
    | 'LINK_CLICKS'
    | 'LOCAL_AWARENESS'
    | 'MESSAGES'
    | 'OFFER_CLAIMS'
    | 'PAGE_LIKES'
    | 'POST_ENGAGEMENT'
    | 'PRODUCT_CATALOG_SALES'
    | 'REACH'
    | 'STORE_VISITS'
    | 'VIDEO_VIEWS';

  /**
   * Status
   * This value will default to Paused to prevent your test account from being billed while testing. Change this to Active for production uses.
   *
   */
  status: 'PAUSED' | 'ACTIVE';
};

/**
 * Update Campaign intent type
 */
type FacebookAdsUpdateCampaign = {
  /**
   * Campaign ID
   * The ID of the campaign to update.
   *
   */
  campaignId: string;

  /**
   * Name
   * The name of the campaign.
   *
   */
  name?: string;

  /**
   * Objective
   * Specify the objective for this campaign.
   *
   */
  objective?:
    | 'APP_INSTALLS'
    | 'BRAND_AWARENESS'
    | 'CONVERSIONS'
    | 'EVENT_RESPONSES'
    | 'LEAD_GENERATION'
    | 'LINK_CLICKS'
    | 'LOCAL_AWARENESS'
    | 'MESSAGES'
    | 'OFFER_CLAIMS'
    | 'PAGE_LIKES'
    | 'POST_ENGAGEMENT'
    | 'PRODUCT_CATALOG_SALES'
    | 'REACH'
    | 'STORE_VISITS'
    | 'VIDEO_VIEWS';

  /**
   * Status
   * This value will default to Paused to prevent your test account from being billed while testing. Change this to Active for production uses.
   *
   */
  status?: 'PAUSED' | 'ACTIVE' | 'ARCHIVED' | 'DELETED';
};

/**
 * Get Campaigns intent type
 */
type FacebookAdsGetCampaigns = {
  /**
   * Effective Status
   *
   * **Example**:
   * ```
   * ["ACTIVE", "PAUSED"]
   * ```
   */
  effectiveStatus?: string;

  /**
   * Filter search
   * Search for campaigns that match specified filters.
   *
   * **Example**:
   * ```
   * field
   * ```
   */
  campaignFilterFormula?: ConditionalInput;
};

/**
 * Get Campaign by ID intent type
 */
type FacebookAdsGetCampaignById = {
  /**
   * Campaign ID
   * The ID of the campaign to get.
   *
   */
  campaignId: string;
};

/**
 * Create Ad Set intent type
 */
type FacebookAdsCreateAdSet = {
  /**
   * Campaign ID
   * The ID of the campaign this ad set should be a part of. Use Connect Portal Workflow Settings to allow users to select a campaign.
   *
   */
  campaignId: string;

  /**
   * Name
   * The name of the ad set.
   *
   */
  name: string;

  /**
   * Status
   * This value will default to Paused to prevent your test account from being billed while testing. Change this to Active for production uses.
   *
   */
  status: 'PAUSED' | 'ACTIVE';

  /**
   * Optimization Goal
   * Specify the optimization goal that this ad set will use.
   *
   */
  optimizationGoal:
    | 'APP_INSTALLS'
    | 'AD_RECALL_LIFT'
    | 'ENGAGED_USERS'
    | 'EVENT_RESPONSES'
    | 'IMPRESSIONS'
    | 'LEAD_GENERATION'
    | 'QUALITY_LEAD'
    | 'LINK_CLICKS'
    | 'OFFSITE_CONVERSIONS'
    | 'PAGE_LIKES'
    | 'POST_ENGAGEMENT'
    | 'QUALITY_CALL'
    | 'REACH'
    | 'LANDING_PAGE_VIEWS'
    | 'VISIT_INSTAGRAM_PROFILE'
    | 'VALUE'
    | 'VALUE_THROUGHPLAY'
    | 'DERIVED_EVENTS'
    | 'APP_INSTALLS_AND_OFFSITE_CONVERSIONS'
    | 'CONVERSIONS';

  /**
   * Billing Event
   * Specify the billing event that this ad set will use.
   *
   */
  billingEvent:
    | 'APP_INSTALLS'
    | 'CLICKS'
    | 'IMPRESSIONS'
    | 'LINK_CLICKS'
    | 'OFFER_CLAIMS'
    | 'PAGE_LIKES'
    | 'POST_ENGAGEMENT'
    | 'VIDEO_VIEWS'
    | 'VALUE_THROUGHPLAY';

  /**
   * Bid Amount
   * Set a maximum bid you want to pay for a result based on this ad set’s optimization goal. Value is in cents, for your account’s local currency.
   *
   */
  bidAmount: string;

  /**
   * Daily Budget
   * Set a daily budget for this ad set to use, in your account’s local currency.
   *
   */
  dailyBudget: string;

  /**
   * Start Time
   * Specify when this ad set should start running.
   *
   * **Example**:
   * ```
   * 2021-01-01 12:00:00 AM
   * ```
   */
  startTime: string;

  /**
   * Targeting
   * Provide a Targeting spec to define the audience for this ad set.
   *
   * **Example**:
   * ```
   * {
   *  "geo_locations": {"countries": ["US"]},
   *  "interests": [{id: 6003139266461, 'name': 'Movies'}]
   *}
   * ```
   */
  targeting: string;

  /**
   * Promoted Object
   *
   * **Example**:
   * ```
   * {
   *  "page_id": "11111111111111111"
   *}
   * ```
   */
  promotedObject?: string;
};

/**
 * Update Ad Set intent type
 */
type FacebookAdsUpdateAdSet = {
  /**
   * Ad Set ID
   * The ID of the ad set to update.
   *
   */
  adSetId: string;

  /**
   * Campaign ID
   * The ID of the campaign this ad set should be a part of. Use Connect Portal Workflow Settings to allow users to select a campaign.
   *
   */
  campaignId?: string;

  /**
   * Name
   * The name of the ad set.
   *
   */
  name?: string;

  /**
   * Status
   * This value will default to Paused to prevent your test account from being billed while testing. Change this to Active for production uses.
   *
   */
  status?: 'PAUSED' | 'ACTIVE';

  /**
   * Optimization Goal
   * Specify the optimization goal that this ad set will use.
   *
   */
  optimizationGoal?:
    | 'APP_INSTALLS'
    | 'AD_RECALL_LIFT'
    | 'ENGAGED_USERS'
    | 'EVENT_RESPONSES'
    | 'IMPRESSIONS'
    | 'LEAD_GENERATION'
    | 'QUALITY_LEAD'
    | 'LINK_CLICKS'
    | 'OFFSITE_CONVERSIONS'
    | 'PAGE_LIKES'
    | 'POST_ENGAGEMENT'
    | 'QUALITY_CALL'
    | 'REACH'
    | 'LANDING_PAGE_VIEWS'
    | 'VISIT_INSTAGRAM_PROFILE'
    | 'VALUE'
    | 'VALUE_THROUGHPLAY'
    | 'DERIVED_EVENTS'
    | 'APP_INSTALLS_AND_OFFSITE_CONVERSIONS'
    | 'CONVERSIONS';

  /**
   * Billing Event
   * Specify the billing event that this ad set will use.
   *
   */
  billingEvent?:
    | 'APP_INSTALLS'
    | 'CLICKS'
    | 'IMPRESSIONS'
    | 'LINK_CLICKS'
    | 'OFFER_CLAIMS'
    | 'PAGE_LIKES'
    | 'POST_ENGAGEMENT'
    | 'VIDEO_VIEWS'
    | 'VALUE_THROUGHPLAY';

  /**
   * Bid Amount
   * Set a maximum bid you want to pay for a result based on this ad set’s optimization goal. Value is in cents, for your account’s local currency.
   *
   */
  bidAmount?: string;

  /**
   * Daily Budget
   * Set a daily budget for this ad set to use, in your account’s local currency.
   *
   */
  dailyBudget?: string;

  /**
   * Start Time
   * Specify when this ad set should start running.
   *
   * **Example**:
   * ```
   * 2021-01-01 12:00:00 AM
   * ```
   */
  startTime?: string;

  /**
   * Targeting
   * Provide a Targeting spec to define the audience for this ad set.
   *
   * **Example**:
   * ```
   * {
   *  "geo_locations": {"countries": ["US"]},
   *  "interests": [{id: 6003139266461, 'name': 'Movies'}]
   *}
   * ```
   */
  targeting?: string;
};

/**
 * Get Ad Sets intent type
 */
type FacebookAdsGetAdSets = {
  /**
   * Effective Status
   *
   * **Example**:
   * ```
   * ["ACTIVE", "PAUSED"]
   * ```
   */
  effectiveStatus?: string;

  /**
   * Filter search
   * Search for ad sets that match specified filters.
   *
   * **Example**:
   * ```
   * field
   * ```
   */
  adSetFilterFormula?: ConditionalInput;
};

/**
 * Get Ad Set by ID intent type
 */
type FacebookAdsGetAdSetById = {
  /**
   * Ad Set ID
   * The ID of the ad set to get.
   *
   */
  adSetId: string;
};

/**
 * Create Ad intent type
 */
type FacebookAdsCreateAd = {
  /**
   * Name
   * Specify a name for this ad.
   *
   */
  name: string;

  /**
   * Status
   * This value will default to Paused to prevent your test account from being billed while testing. Change this to Active for production uses.
   *
   */
  status: 'PAUSED' | 'ACTIVE' | 'ARCHIVED' | 'DELETED';

  /**
   * Ad Set ID
   * The ID of the ad set to create this ad for.
   *
   */
  adSetId: string;

  /**
   * Ad Creative ID
   * The ID of the ad creative to use for this ad.
   *
   */
  adCreativeId: string;
};

/**
 * Update Ad intent type
 */
type FacebookAdsUpdateAd = {
  /**
   * Ad ID
   * The ID of the ad to update.
   *
   */
  adId: string;

  /**
   * Name
   * Specify a name for this ad.
   *
   */
  name?: string;

  /**
   * Status
   * This value will default to Paused to prevent your test account from being billed while testing. Change this to Active for production uses.
   *
   */
  status?: 'PAUSED' | 'ACTIVE' | 'ARCHIVED' | 'DELETED';

  /**
   * Ad Creative ID
   * The ID of the ad creative to use for this ad.
   *
   */
  adCreativeId?: string;
};

/**
 * Get Ad by ID intent type
 */
type FacebookAdsGetAdById = {
  /**
   * Ad ID
   * The ID of the ad to get.
   *
   */
  adId: string;
};

/**
 * Build Ad Creative Object intent type
 */
type FacebookAdsBuildAdCreativeObject = {} & (
  | {
      /**
       * Type
       * Select a type of ad creative to build.
       *
       */
      adCreativeType: 'IMAGE';

      /**
       * Image URL
       * This image will be uploaded to your ad account’s image library.
       *
       * **Example**:
       * ```
       * https://example.com/ad.png
       * ```
       */
      imageURL: string;

      /**
       * Link URL
       * The URL used for the CTA in this ad.
       *
       * **Example**:
       * ```
       * https://example.com/promo
       * ```
       */
      linkURL: string;

      /**
       * Link Title
       * A title to use for the link of your ad.
       *
       */
      linkTitle?: string;

      /**
       * Link Description
       * A description to use for the link of your ad.
       *
       */
      linkDescription?: string;

      /**
       * Message
       * The body of the post included with the image.
       *
       */
      message?: string;

      /**
       * Additional Fields
       *
       * **Example**:
       * ```
       * {
       *  "call_to_action": { ... },
       *  "child_attachments": [{ ... }]
       *}
       * ```
       */
      additionalField: string;
    }
  | {
      /**
       * Type
       * Select a type of ad creative to build.
       *
       */
      adCreativeType: 'TEXT';

      /**
       * Message
       * The body of the post included with the image.
       *
       */
      message: string;

      /**
       * Link URL
       * The URL used for the CTA in this ad.
       *
       * **Example**:
       * ```
       * https://example.com/promo
       * ```
       */
      linkURL: string;

      /**
       * Link Title
       * A title to use for the link of your ad.
       *
       */
      linkTitle?: string;

      /**
       * Link Description
       * A description to use for the link of your ad.
       *
       */
      linkDescription?: string;

      /**
       * Additional Fields
       *
       * **Example**:
       * ```
       * {
       *  "call_to_action": { ... },
       *  "child_attachments": [{ ... }]
       *}
       * ```
       */
      additionalField: string;
    }
  | {
      /**
       * Type
       * Select a type of ad creative to build.
       *
       */
      adCreativeType: 'LINK';

      /**
       * Link URL
       * The URL used for the CTA in this ad.
       *
       * **Example**:
       * ```
       * https://example.com/promo
       * ```
       */
      linkURL: string;

      /**
       * Link Title
       * A title to use for the link of your ad.
       *
       */
      linkTitle?: string;

      /**
       * Link Description
       * A description to use for the link of your ad.
       *
       */
      linkDescription?: string;

      /**
       * Additional Fields
       *
       * **Example**:
       * ```
       * {
       *  "call_to_action": { ... },
       *  "child_attachments": [{ ... }]
       *}
       * ```
       */
      additionalField: string;
    }
  | {
      /**
       * Type
       * Select a type of ad creative to build.
       *
       */
      adCreativeType: 'LEAD_GEN_FORM_ID';

      /**
       * Lead Gen Form ID
       * The ID of the lead gen form to use with this creative.
       *
       */
      leadGenFormId: string;

      /**
       * Call to Action Type
       *
       */
      callToActionType?:
        | 'APPLY_NOW'
        | 'DOWNLOAD'
        | 'GET_QUOTE'
        | 'LEARN_MORE'
        | 'SIGN_UP'
        | 'SUBSCRIBE';

      /**
       * Link URL
       * The URL used for the CTA in this ad.
       *
       * **Example**:
       * ```
       * https://example.com/promo
       * ```
       */
      linkURL: string;

      /**
       * Link Title
       * A title to use for the link of your ad.
       *
       */
      linkTitle?: string;

      /**
       * Link Description
       * A description to use for the link of your ad.
       *
       */
      linkDescription?: string;

      /**
       * Additional Fields
       *
       * **Example**:
       * ```
       * {
       *  "call_to_action": { ... },
       *  "child_attachments": [{ ... }]
       *}
       * ```
       */
      additionalField: string;
    }
);

/**
 * Create Ad Creative intent type
 */
type FacebookAdsCreateAdCreative = {
  /**
   * Name
   * The name of the ad creative, which appears in the ad account’s library. This field is required.
   *
   */
  name: string;

  /**
   * Page
   * The Facebook Page that the creative will be uploaded for. Use Connect Portal Workflow Settings to allow users to select a page.
   *
   * **Example**:
   * ```
   * {{settings.page}}
   * ```
   */
  page: string;

  /**
   * Ad Creative JSON
   * Use the Build Ad Creative Object step to generate an object to use as a creative.
   *
   * **Example**:
   * ```
   * {
   *  "link_data": {...},
   *  "text_data": {...},
   *}
   * ```
   */
  adCreativeJson: string;
};

/**
 * Create Lead Gen Form intent type
 */
type FacebookAdsCreateLeadGenForm = {
  /**
   * Name
   *
   */
  name: string;

  /**
   * Page
   * The Facebook Page that the creative will be uploaded for. Use Connect Portal Workflow Settings to allow users to select a page.
   *
   * **Example**:
   * ```
   * {{settings.page}}
   * ```
   */
  page: string;

  /**
   * Follow Up Action Text
   * The displayed label on the follow up action when the user completes the form.
   *
   */
  followUpActionText: string;

  /**
   * Follow-up Action URL
   * Set a destination for the Follow Up Action Text when clicked.
   *
   */
  followUpActionUrl: string;

  /**
   * Privacy Policy URL
   * Set a destination for the Privacy Policy.
   *
   */
  privacyPolicyUrl: string;

  /**
   * Form Greeting/Context Card JSON
   *
   * **Example**:
   * ```
   * {
   *  "title": "",
   *  "style": "PARAGRAPH_STYLE",
   *  "content": {}
   *}
   * ```
   */
  contextCard?: string;

  /**
   * Questions JSON
   *
   * **Example**:
   * ```
   * [
   *    { "type": "EMAIL" },
   *    { "type": "CUSTOM" }
   *  ]
   * ```
   */
  questionJson: string;
};

/**
 * Send Purchase Event intent type
 */
type FacebookAdsSendPurchaseEvent = {
  /**
   * Action Source
   *
   */
  actionSource:
    | 'website'
    | 'chat'
    | 'app'
    | 'email'
    | 'phone_call'
    | 'system_generated'
    | 'other';

  /**
   * Pixel
   * The Facebook Pixel that will receive the event. Use Connect Portal Workflow Settings to allow users to select a pixel.
   *
   * **Example**:
   * ```
   * {{settings.pixel}}
   * ```
   */
  pixel: string;

  /**
   * Event Time
   * Time when the event occurred (ISO 8601 timestamp). Defaults to the time of the workflow execution if left blank
   *
   * **Example**:
   * ```
   * 2020-03-31T12:02:00Z
   * ```
   */
  eventTime?: string;

  /**
   * Event ID
   * Used to remove duplicates when sending the same event from more than one source.
   *
   */
  eventId?: string;

  /**
   * Event Source URL
   * The URL where the event occurred. Required if the Action Source is Website.
   *
   */
  eventSourceUrl?: string;

  /**
   * Customer Email
   * The email of the customer associated with the event, so they can be matched to a Facebook account and used for ads attribution and delivery optimization.
   *
   */
  customerEmail?: string;

  /**
   * Customer first name
   *
   */
  customerFirstName?: string;

  /**
   * Customer last name
   *
   */
  customerLastName?: string;

  /**
   * Customer city
   *
   */
  customerCity?: string;

  /**
   * Customer state
   *
   */
  customerState?: string;

  /**
   * Customer country code
   *
   */
  customerCountryCode?: string;

  /**
   * Customer External ID
   * A custom ID for the prospect, often referencing an ID in an external system.
   *
   */
  customerExternalId?: string;

  /**
   * Customer client IP address
   * The IP address of the browser corresponding to the event.
   *
   */
  customerClientIpAddress?: string;

  /**
   * Customer client user agent
   * The user agent for the browser corresponding to the event.
   *
   */
  customerClientUserAgent?: string;

  /**
   * Click ID (fbc)
   * The Facebook click ID value stored in the _fbc browser cookie.
   *
   */
  clickId?: string;

  /**
   * Browser ID (fbc)
   * The Facebook browser ID value stored in the _fbp browser cookie.
   *
   */
  browserId?: string;

  /**
   * Value
   * A numeric value associated with this event. This could be a monetary value or a value in some other metric.
   *
   */
  value?: string;

  /**
   * Currency
   * The currency for the value specified, if applicable. Currency must be a valid ISO 4217 three digit currency code. Example: 'USD'
   *
   */
  currency?: string;

  /**
   * Content ID
   * The content IDs associated with the event, such as product SKUs for items in an AddToCart event. Accepts an array of IDs.
   *
   * **Example**:
   * ```
   * ['ABC123', 'XYZ789']
   * ```
   */
  contentId?: string;

  /**
   * Content Name
   * The name of the page or product associated with the event.
   *
   * **Example**:
   * ```
   * Lettuce
   * ```
   */
  contentName?: string;

  /**
   * Content Category
   * The category of the content associated with the event.
   *
   * **Example**:
   * ```
   * Grocery
   * ```
   */
  contentCategory?: string;
};

/**
 * Send Lead Event intent type
 */
type FacebookAdsSendLeadEvent = {
  /**
   * Action Source
   *
   */
  actionSource:
    | 'website'
    | 'chat'
    | 'app'
    | 'email'
    | 'phone_call'
    | 'system_generated'
    | 'other';

  /**
   * Pixel
   * The Facebook Pixel that will receive the event. Use Connect Portal Workflow Settings to allow users to select a pixel.
   *
   * **Example**:
   * ```
   * {{settings.pixel}}
   * ```
   */
  pixel: string;

  /**
   * Event Time
   * Time when the event occurred (ISO 8601 timestamp). Defaults to the time of the workflow execution if left blank
   *
   * **Example**:
   * ```
   * 2020-03-31T12:02:00Z
   * ```
   */
  eventTime?: string;

  /**
   * Event ID
   * Used to remove duplicates when sending the same event from more than one source.
   *
   */
  eventId?: string;

  /**
   * Event Source URL
   * The URL where the event occurred. Required if the Action Source is Website.
   *
   */
  eventSourceUrl?: string;

  /**
   * Customer Email
   * The email of the customer associated with the event, so they can be matched to a Facebook account and used for ads attribution and delivery optimization.
   *
   */
  customerEmail?: string;

  /**
   * Customer first name
   *
   */
  customerFirstName?: string;

  /**
   * Customer last name
   *
   */
  customerLastName?: string;

  /**
   * Customer city
   *
   */
  customerCity?: string;

  /**
   * Customer state
   *
   */
  customerState?: string;

  /**
   * Customer country code
   *
   */
  customerCountryCode?: string;

  /**
   * Customer External ID
   * A custom ID for the prospect, often referencing an ID in an external system.
   *
   */
  customerExternalId?: string;

  /**
   * Customer client IP address
   * The IP address of the browser corresponding to the event.
   *
   */
  customerClientIpAddress?: string;

  /**
   * Customer client user agent
   * The user agent for the browser corresponding to the event.
   *
   */
  customerClientUserAgent?: string;

  /**
   * Click ID (fbc)
   * The Facebook click ID value stored in the _fbc browser cookie.
   *
   */
  clickId?: string;

  /**
   * Browser ID (fbc)
   * The Facebook browser ID value stored in the _fbp browser cookie.
   *
   */
  browserId?: string;

  /**
   * Content ID
   * The content IDs associated with the event, such as product SKUs for items in an AddToCart event. Accepts an array of IDs.
   *
   * **Example**:
   * ```
   * ['ABC123', 'XYZ789']
   * ```
   */
  contentId?: string;

  /**
   * Content Name
   * The name of the page or product associated with the event.
   *
   * **Example**:
   * ```
   * Lettuce
   * ```
   */
  contentName?: string;

  /**
   * Content Category
   * The category of the content associated with the event.
   *
   * **Example**:
   * ```
   * Grocery
   * ```
   */
  contentCategory?: string;
};

/**
 * Send Funnel Event intent type
 */
type FacebookAdsSendFunnelEvent = {
  /**
   * Event Name
   *
   */
  eventName: string;

  /**
   * Action Source
   *
   */
  actionSource:
    | 'website'
    | 'chat'
    | 'app'
    | 'email'
    | 'phone_call'
    | 'system_generated'
    | 'other';

  /**
   * Pixel
   * The Facebook Pixel that will receive the event. Use Connect Portal Workflow Settings to allow users to select a pixel.
   *
   * **Example**:
   * ```
   * {{settings.pixel}}
   * ```
   */
  pixel: string;

  /**
   * Event Time
   * Time when the event occurred (ISO 8601 timestamp). Defaults to the time of the workflow execution if left blank
   *
   * **Example**:
   * ```
   * 2020-03-31T12:02:00Z
   * ```
   */
  eventTime?: string;

  /**
   * Event ID
   * Used to remove duplicates when sending the same event from more than one source.
   *
   */
  eventId?: string;

  /**
   * Event Source URL
   * The URL where the event occurred. Required if the Action Source is Website.
   *
   */
  eventSourceUrl?: string;

  /**
   * Customer Email
   * The email of the customer associated with the event, so they can be matched to a Facebook account and used for ads attribution and delivery optimization.
   *
   */
  customerEmail?: string;

  /**
   * Customer first name
   *
   */
  customerFirstName?: string;

  /**
   * Customer last name
   *
   */
  customerLastName?: string;

  /**
   * Customer city
   *
   */
  customerCity?: string;

  /**
   * Customer state
   *
   */
  customerState?: string;

  /**
   * Customer country code
   *
   */
  customerCountryCode?: string;

  /**
   * Customer External ID
   * A custom ID for the prospect, often referencing an ID in an external system.
   *
   */
  customerExternalId?: string;

  /**
   * Customer client IP address
   * The IP address of the browser corresponding to the event.
   *
   */
  customerClientIpAddress?: string;

  /**
   * Customer client user agent
   * The user agent for the browser corresponding to the event.
   *
   */
  customerClientUserAgent?: string;

  /**
   * Click ID (fbc)
   * The Facebook click ID value stored in the _fbc browser cookie.
   *
   */
  clickId?: string;

  /**
   * Browser ID (fbc)
   * The Facebook browser ID value stored in the _fbp browser cookie.
   *
   */
  browserId?: string;

  /**
   * Content ID
   * The content IDs associated with the event, such as product SKUs for items in an AddToCart event. Accepts an array of IDs.
   *
   * **Example**:
   * ```
   * ['ABC123', 'XYZ789']
   * ```
   */
  contentId?: string;

  /**
   * Content Name
   * The name of the page or product associated with the event.
   *
   * **Example**:
   * ```
   * Lettuce
   * ```
   */
  contentName?: string;

  /**
   * Content Category
   * The category of the content associated with the event.
   *
   * **Example**:
   * ```
   * Grocery
   * ```
   */
  contentCategory?: string;
};

export type IntentToInputOutput = {
  /**
   * FACEBOOK_ADS_CREATE_CAMPAIGN
   */
  FACEBOOK_ADS_CREATE_CAMPAIGN: [FacebookAdsCreateCampaign, any];

  /**
   * FACEBOOK_ADS_UPDATE_CAMPAIGN
   */
  FACEBOOK_ADS_UPDATE_CAMPAIGN: [FacebookAdsUpdateCampaign, any];

  /**
   * FACEBOOK_ADS_GET_CAMPAIGNS
   */
  FACEBOOK_ADS_GET_CAMPAIGNS: [FacebookAdsGetCampaigns, any];

  /**
   * FACEBOOK_ADS_GET_CAMPAIGN_BY_ID
   */
  FACEBOOK_ADS_GET_CAMPAIGN_BY_ID: [FacebookAdsGetCampaignById, any];

  /**
   * FACEBOOK_ADS_CREATE_AD_SET
   */
  FACEBOOK_ADS_CREATE_AD_SET: [FacebookAdsCreateAdSet, any];

  /**
   * FACEBOOK_ADS_UPDATE_AD_SET
   */
  FACEBOOK_ADS_UPDATE_AD_SET: [FacebookAdsUpdateAdSet, any];

  /**
   * FACEBOOK_ADS_GET_AD_SETS
   */
  FACEBOOK_ADS_GET_AD_SETS: [FacebookAdsGetAdSets, any];

  /**
   * FACEBOOK_ADS_GET_AD_SET_BY_ID
   */
  FACEBOOK_ADS_GET_AD_SET_BY_ID: [FacebookAdsGetAdSetById, any];

  /**
   * FACEBOOK_ADS_CREATE_AD
   */
  FACEBOOK_ADS_CREATE_AD: [FacebookAdsCreateAd, any];

  /**
   * FACEBOOK_ADS_UPDATE_AD
   */
  FACEBOOK_ADS_UPDATE_AD: [FacebookAdsUpdateAd, any];

  /**
   * FACEBOOK_ADS_GET_AD_BY_ID
   */
  FACEBOOK_ADS_GET_AD_BY_ID: [FacebookAdsGetAdById, any];

  /**
   * FACEBOOK_ADS_BUILD_AD_CREATIVE_OBJECT
   */
  FACEBOOK_ADS_BUILD_AD_CREATIVE_OBJECT: [
    FacebookAdsBuildAdCreativeObject,
    any,
  ];

  /**
   * FACEBOOK_ADS_CREATE_AD_CREATIVE
   */
  FACEBOOK_ADS_CREATE_AD_CREATIVE: [FacebookAdsCreateAdCreative, any];

  /**
   * FACEBOOK_ADS_CREATE_LEAD_GEN_FORM
   */
  FACEBOOK_ADS_CREATE_LEAD_GEN_FORM: [FacebookAdsCreateLeadGenForm, any];

  /**
   * FACEBOOK_ADS_SEND_PURCHASE_EVENT
   */
  FACEBOOK_ADS_SEND_PURCHASE_EVENT: [FacebookAdsSendPurchaseEvent, any];

  /**
   * FACEBOOK_ADS_SEND_LEAD_EVENT
   */
  FACEBOOK_ADS_SEND_LEAD_EVENT: [FacebookAdsSendLeadEvent, any];

  /**
   * FACEBOOK_ADS_SEND_FUNNEL_EVENT
   */
  FACEBOOK_ADS_SEND_FUNNEL_EVENT: [FacebookAdsSendFunnelEvent, any];
};
