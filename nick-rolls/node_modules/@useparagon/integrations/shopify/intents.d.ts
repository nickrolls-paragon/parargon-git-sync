import { ConditionalInput } from '@useparagon/core/steps/library/conditional';

/**
 * Get Customers intent type
 */
type ShopifyGetCustomers = {
  /**
   * Customer IDs
   * Only return customers matching the IDs provided. You can enter an array or a comma-separated list of IDs.
   *
   * **Example**:
   * ```
   * 207119551, 207119552
   * ```
   */
  customerIds?: string;

  /**
   * Created After
   * Only return customers created after the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  createdAtMin?: string;

  /**
   * Created Before
   * Only return customers created before the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  createdAtMax?: string;

  /**
   * Updated after
   * Only return customers updated after the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  updatedAtMin?: string;

  /**
   * Updated before
   * Only return customers updated before the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  updatedAtMax?: string;

  /**
   * Limit results
   * Limit the maximum number of customers to return. Defaults to 250 if left blank. Pagination only accepts the limit field. Other fields cannot be used for filtering the paginated records.
   *
   */
  limit?: string;
};

/**
 * Search Customers intent type
 */
type ShopifySearchCustomers = {
  /**
   * Filter search
   * Search for customers that match specified filters.
   *
   */
  filterFormula?: ConditionalInput;

  /**
   * Limit results
   * Limit the maximum number of customers to return. Defaults to 250 if left blank. Pagination only accepts the limit field. Other fields cannot be used for filtering the paginated records.
   *
   */
  limit?: string;
};

/**
 * Create Customer intent type
 */
type ShopifyCreateCustomer = {
  /**
   * First name
   *
   */
  firstName: string;

  /**
   * Last name
   *
   */
  lastName: string;

  /**
   * Email address
   *
   */
  email: string;

  /**
   * Company name
   *
   */
  company?: string;

  /**
   * Street address
   *
   */
  streetAddressLine1?: string;

  /**
   * Street address line 2
   *
   */
  streetAddressLine2?: string;

  /**
   * City
   *
   */
  city?: string;

  /**
   * State or province code
   *
   */
  state?: string;

  /**
   * Country
   *
   */
  country?: string;

  /**
   * Zip code
   *
   */
  zipCode?: string;

  /**
   * Phone
   *
   */
  phone?: string;

  /**
   * Tags
   * Accepts an array or comma-separated list of tags.
   *
   */
  tags?: string;

  /**
   * Note
   *
   */
  note?: string;

  /**
   * Send email invite
   *
   */
  sendEmailInvite?: boolean;

  /**
   * Metafields
   *
   * **Example**:
   * ```
   * [
   *    {
   *    "key": "new",
   *    "value": "newvalue",
   *    "value_type": "string",
   *    "namespace": "global"
   *    }
   *  ]
   * ```
   */
  metafields?: string;
};

/**
 * Update Customer intent type
 */
type ShopifyUpdateCustomer = {
  /**
   * Customer ID
   * The ID of the Customer to update.
   *
   * **Example**:
   * ```
   * {{1.customer.id}}
   * ```
   */
  customerId: string;

  /**
   * First name
   *
   */
  firstName?: string;

  /**
   * Last name
   *
   */
  lastName?: string;

  /**
   * Email address
   *
   */
  email?: string;

  /**
   * Company name
   *
   */
  company?: string;

  /**
   * Street address
   *
   */
  streetAddressLine1?: string;

  /**
   * Street address line 2
   *
   */
  streetAddressLine2?: string;

  /**
   * City
   *
   */
  city?: string;

  /**
   * State or province code
   *
   */
  state?: string;

  /**
   * Country
   *
   */
  country?: string;

  /**
   * Zip code
   *
   */
  zipCode?: string;

  /**
   * Phone
   *
   */
  phone?: string;

  /**
   * Tags
   * Accepts an array or comma-separated list of tags.
   *
   */
  tags?: string;

  /**
   * Note
   *
   */
  note?: string;

  /**
   * Send email invite
   *
   */
  sendEmailInvite?: boolean;

  /**
   * Metafields
   *
   * **Example**:
   * ```
   * [
   *    {
   *    "key": "new",
   *    "value": "newvalue",
   *    "value_type": "string",
   *    "namespace": "global"
   *    }
   *  ]
   * ```
   */
  metafields?: string;
};

/**
 * Create Customer (GraphQL) intent type
 */
type ShopifyCreateCustomerGraphql = {
  /**
   * First name
   *
   */
  firstName: string;

  /**
   * Last name
   *
   */
  lastName: string;

  /**
   * Email address
   *
   */
  email: string;

  /**
   * Street address
   *
   */
  streetAddressLine1?: string;

  /**
   * Street address line 2
   *
   */
  streetAddressLine2?: string;

  /**
   * City
   *
   */
  city?: string;

  /**
   * State or province code
   *
   */
  state?: string;

  /**
   * Country
   *
   */
  country?: string;

  /**
   * Zip code
   *
   */
  zipCode?: string;

  /**
   * Phone
   *
   */
  phone?: string;

  /**
   * Tags
   * Accepts an array or comma-separated list of tags.
   *
   */
  tags?: string;

  /**
   * Note
   *
   */
  note?: string;

  /**
   * Locale
   *
   */
  locale?: string;

  /**
   * Tax Exempt
   *
   */
  taxExempt?: boolean;

  /**
   * Tax Exemptions
   * Accepts an array or comma-separated list of tax exemptions.
   *
   */
  taxExemptions?: string;

  /**
   * SMS Marketing Consent
   *
   * **Example**:
   * ```
   * {
   *  "marketingState": "SUBSCRIBED",
   *  "marketingOptInLevel": "SINGLE_OPT_IN"
   *}
   * ```
   */
  smsMarketingConsent?: string;

  /**
   * Metafields
   *
   * **Example**:
   * ```
   * [
   *    {
   *    "key": "new",
   *    "value": "newvalue",
   *    "value_type": "string",
   *    "namespace": "global"
   *    }
   *  ]
   * ```
   */
  metafields?: string;
};

/**
 * Update Customer (GraphQL) intent type
 */
type ShopifyUpdateCustomerGraphql = {
  /**
   * Customer ID
   * The ID of the Customer to update.
   *
   * **Example**:
   * ```
   * {{1.customer.id}}
   * ```
   */
  customerId: string;

  /**
   * First name
   *
   */
  firstName?: string;

  /**
   * Last name
   *
   */
  lastName?: string;

  /**
   * Email address
   *
   */
  email?: string;

  /**
   * Street address
   *
   */
  streetAddressLine1?: string;

  /**
   * Street address line 2
   *
   */
  streetAddressLine2?: string;

  /**
   * City
   *
   */
  city?: string;

  /**
   * State or province code
   *
   */
  state?: string;

  /**
   * Country
   *
   */
  country?: string;

  /**
   * Zip code
   *
   */
  zipCode?: string;

  /**
   * Phone
   *
   */
  phone?: string;

  /**
   * Tags
   * Accepts an array or comma-separated list of tags.
   *
   */
  tags?: string;

  /**
   * Note
   *
   */
  note?: string;

  /**
   * Locale
   *
   */
  locale?: string;

  /**
   * Tax Exempt
   *
   */
  taxExempt?: boolean;

  /**
   * Tax Exemptions
   * Accepts an array or comma-separated list of tax exemptions.
   *
   */
  taxExemptions?: string;

  /**
   * Metafields
   *
   * **Example**:
   * ```
   * [
   *    {
   *    "key": "new",
   *    "value": "newvalue",
   *    "value_type": "string",
   *    "namespace": "global"
   *    }
   *  ]
   * ```
   */
  metafields?: string;
};

/**
 * Get Customers (GraphQL) intent type
 */
type ShopifyGetCustomersGraphql = {
  /**
   * Filter search
   * Search for items that match specified filters.
   *
   */
  customerFilterFormula?: ConditionalInput;
};

/**
 * Get Orders intent type
 */
type ShopifyGetOrders = {
  /**
   * Order IDs
   * Only return orders matching the IDs provided. You can enter an array or a comma-separated list of IDs.
   *
   * **Example**:
   * ```
   * 450789469, 450789470,
   * ```
   */
  orderIds?: string;

  /**
   * Created After
   * Only return orders created after the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  createdAtMin?: string;

  /**
   * Created Before
   * Only return orders created before the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  createdAtMax?: string;

  /**
   * Updated after
   * Only return orders updated after the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  updatedAtMin?: string;

  /**
   * Updated before
   * Only return orders updated before the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  updatedAtMax?: string;

  /**
   * Limit results
   * Limit the maximum number of orders to return. Defaults to 250 if left blank. Pagination only accepts the limit field. Other fields cannot be used for filtering the paginated records.
   *
   */
  limit?: string;
};

/**
 * Create Order intent type
 */
type ShopifyCreateOrder = {
  /**
   * Customer email
   *
   */
  email: string;

  /**
   * Line items
   *
   * **Example**:
   * ```
   * [
   *    {
   *    "title": "Big Brown Bear Boots",
   *    "price": 74.99,
   *    "quantity": 3,
   *    "variant_id": 447654529
   *    }
   *  ]
   * ```
   */
  lineItems: string;

  /**
   * Send receipt
   *
   */
  sendReceipt?: boolean;

  /**
   * Fulfillment status
   *
   */
  fulfillmentStatus?: 'fulfilled' | 'null' | 'partial' | 'restocked';

  /**
   * Financial status
   *
   */
  financialStatus?:
    | 'pending'
    | 'authorized'
    | 'partially_paid'
    | 'paid'
    | 'partially_refunded'
    | 'refunded'
    | 'voided';

  /**
   * Inventory behavior
   *
   */
  inventoryBehaviour?:
    | 'bypass'
    | 'decrement_ignoring_policy'
    | 'decrement_obeying_policy';

  /**
   * Note
   *
   */
  note?: string;
};

/**
 * Update Order intent type
 */
type ShopifyUpdateOrder = {
  /**
   * Order ID
   * The ID of the Order to update.
   *
   * **Example**:
   * ```
   * {{1.order.id}}
   * ```
   */
  orderId: string;

  /**
   * Customer email
   *
   */
  email?: string;

  /**
   * Line items
   *
   * **Example**:
   * ```
   * [
   *    {
   *    "title": "Big Brown Bear Boots",
   *    "price": 74.99,
   *    "quantity": 3,
   *    "variant_id": 447654529
   *    }
   *  ]
   * ```
   */
  lineItems?: string;

  /**
   * Send receipt
   *
   */
  sendReceipt?: boolean;

  /**
   * Fulfillment status
   *
   */
  fulfillmentStatus?: 'fulfilled' | 'null' | 'partial' | 'restocked';

  /**
   * Financial status
   *
   */
  financialStatus?:
    | 'pending'
    | 'authorized'
    | 'partially_paid'
    | 'paid'
    | 'partially_refunded'
    | 'refunded'
    | 'voided';

  /**
   * Inventory behavior
   *
   */
  inventoryBehaviour?:
    | 'bypass'
    | 'decrement_ignoring_policy'
    | 'decrement_obeying_policy';

  /**
   * Note
   *
   */
  note?: string;
};

/**
 * Get Abandoned Carts intent type
 */
type ShopifyGetAbandonedCarts = {
  /**
   * Created Within the Last
   * Restrict results to only checkouts created within the specified time.
   *
   */
  ['createdWithInLast-left']?: 'minutes' | 'hours' | 'days';

  /**
   * Created Within the Last Value
   * Restrict results to only checkouts created within the specified time.
   *
   */
  ['createdWithInLast-right']?: string;

  /**
   * Created After Record ID
   * Restrict results to after the specified ID.
   *
   * **Example**:
   * ```
   * 450789469
   * ```
   */
  createdAfterId?: string;

  /**
   * Status
   * Show only checkouts with a given status. Defaults to showing only open abandoned checkouts.
   *
   */
  status?: 'open' | 'closed';

  /**
   * Created After
   * Only return orders created after the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  createdAtMin?: string;

  /**
   * Created Before
   * Only return orders created before the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  createdAtMax?: string;

  /**
   * Limit results
   * Limit the maximum number of orders to return. Defaults to 250 if left blank. Pagination only accepts the limit field. Other fields cannot be used for filtering the paginated records.
   *
   */
  limit?: string;
};

/**
 * Create Order (GraphQL) intent type
 */
type ShopifyCreateOrderGraphql = {
  /**
   * Customer email
   *
   */
  email: string;

  /**
   * Line items
   *
   * **Example**:
   * ```
   * [
   *    {
   *    "title": "Big Brown Bear Boots",
   *    "price": 74.99,
   *    "quantity": 3,
   *    "variant_id": 447654529
   *    }
   *  ]
   * ```
   */
  lineItems: string;

  /**
   * Send receipt
   *
   */
  sendReceipt?: boolean;

  /**
   * Fulfillment status
   *
   */
  fulfillmentStatus?: 'fulfilled' | 'null' | 'partial' | 'restocked';

  /**
   * Financial status
   *
   */
  financialStatus?:
    | 'pending'
    | 'authorized'
    | 'partially_paid'
    | 'paid'
    | 'partially_refunded'
    | 'refunded'
    | 'voided';

  /**
   * Inventory behavior
   *
   */
  inventoryBehaviour?:
    | 'bypass'
    | 'decrement_ignoring_policy'
    | 'decrement_obeying_policy';

  /**
   * Note
   *
   */
  note?: string;

  /**
   * Additional Fields
   *
   * **Example**:
   * ```
   * {
   *"name": "test-name",
   *"phone": "+122134567890"
   *}
   * ```
   */
  additionalFields?: string;
};

/**
 * Update Order (GraphQL) intent type
 */
type ShopifyUpdateOrderGraphql = {
  /**
   * Order ID
   * The ID of the Order to update.
   *
   * **Example**:
   * ```
   * {{1.order.id}}
   * ```
   */
  orderId: string;

  /**
   * Customer email
   *
   */
  email?: string;

  /**
   * Note
   *
   */
  note?: string;

  /**
   * Purchase Order Number
   * The new purchase order number for the order.
   *
   */
  poNumber?: string;

  /**
   * Tags
   * Accepts an array or comma-separated list of tags.
   *
   */
  tags?: string;

  /**
   * Metafields
   *
   * **Example**:
   * ```
   * [
   *    {
   *    "key": "new",
   *    "value": "newvalue",
   *    "value_type": "string",
   *    "namespace": "global"
   *    }
   *  ]
   * ```
   */
  metafields?: string;

  /**
   * Shipping Address
   * The new shipping address for the order.
   *
   * **Example**:
   * ```
   * {
   *"address1": "123 Main St",
   *"city": "Anytown",
   *"province": "CA",
   *"country": "US",
   *"zip": "12345"
   *}
   * ```
   */
  shippingAddress?: string;

  /**
   * Additional Fields
   *
   * **Example**:
   * ```
   * {
   *"customAttributes": [
   *        {
   *          "key": "key",
   *          "value": "123"
   *        }
   *      ]
   *}
   * ```
   */
  additionalFields?: string;
};

/**
 * Get Orders (GraphQL) intent type
 */
type ShopifyGetOrdersGraphql = {
  /**
   * Filter search
   * Search for items that match specified filters.
   *
   */
  orderFilterFormula?: ConditionalInput;
};

/**
 * Get Abandoned Carts (GraphQL) intent type
 */
type ShopifyGetAbandonedCartsGraphql = {
  /**
   * Filter search
   * Search for items that match specified filters.
   *
   */
  abandonedCartFilterFormula?: ConditionalInput;
};

/**
 * Get Products intent type
 */
type ShopifyGetProducts = {
  /**
   * Product IDs
   * Only return products matching the IDs provided. You can enter an array or a comma-separated list of IDs.
   *
   * **Example**:
   * ```
   * 632910392, 632910393
   * ```
   */
  productIds?: string;

  /**
   * Title
   *
   */
  title?: string;

  /**
   * Product Type
   *
   */
  productType?: string;

  /**
   * Vendor
   *
   */
  vendor?: string;

  /**
   * Status
   *
   */
  status?: 'active' | 'archived' | 'draft';

  /**
   * Created After
   * Only return products created after the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  createdAtMin?: string;

  /**
   * Created Before
   * Only return products created before the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  createdAtMax?: string;

  /**
   * Updated after
   * Only return products updated after the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  updatedAtMin?: string;

  /**
   * Updated before
   * Only return products updated before the provided date (ISO or Unix timestamp).
   *
   * **Example**:
   * ```
   * 2014-04-25T16:15:47-04:00
   * ```
   */
  updatedAtMax?: string;

  /**
   * Limit results
   * Limit the maximum number of products to return. Defaults to 250 if left blank. Pagination only accepts the limit field. Other fields cannot be used for filtering the paginated records.
   *
   */
  limit?: string;
};

/**
 * Create Product intent type
 */
type ShopifyCreateProduct = {
  /**
   * Title
   *
   */
  title: string;

  /**
   * Product Type
   *
   */
  productType: string;

  /**
   * Vendor
   *
   */
  vendor: string;

  /**
   * Product Description
   * Accepts plain text or HTML.
   *
   */
  productDescription?: string;

  /**
   * Tags
   * Accepts an array or comma-separated list of tags.
   *
   */
  tags?: string;

  /**
   * Price
   *
   */
  price?: string;

  /**
   * Inventory policy
   *
   */
  inventoryPolicy?: 'deny' | 'continue';

  /**
   * Image URL
   *
   */
  imageUrl?: string;

  /**
   * Is published
   *
   */
  isPublished?: boolean;

  /**
   * Publish to point of sale
   *
   */
  publishToPointToSale?: boolean;
};

/**
 * Update Product intent type
 */
type ShopifyUpdateProduct = {
  /**
   * Product ID
   * The ID of the Product to update.
   *
   * **Example**:
   * ```
   * gid://shopify/Product/913144112
   * ```
   */
  productId: string;

  /**
   * Title
   *
   */
  title?: string;

  /**
   * Product Type
   *
   */
  productType?: string;

  /**
   * Vendor
   *
   */
  vendor?: string;

  /**
   * Product Description
   * Accepts plain text or HTML.
   *
   */
  productDescription?: string;

  /**
   * Tags
   * Accepts an array or comma-separated list of tags.
   *
   */
  tags?: string;

  /**
   * Price
   *
   */
  price?: string;

  /**
   * Inventory policy
   *
   */
  inventoryPolicy?: 'deny' | 'continue';

  /**
   * Image URL
   *
   */
  imageUrl?: string;

  /**
   * Is published
   *
   */
  isPublished?: boolean;

  /**
   * Publish to point of sale
   *
   */
  publishToPointToSale?: boolean;
};

/**
 * Create Product (GraphQL) intent type
 */
type ShopifyCreateProductGraphql = {
  /**
   * Title
   *
   */
  title: string;

  /**
   * Product Type
   *
   */
  productType: string;

  /**
   * Vendor
   *
   */
  vendor: string;

  /**
   * Product Description
   * Accepts plain text or HTML.
   *
   */
  productDescription?: string;

  /**
   * Tags
   * Accepts an array or comma-separated list of tags.
   *
   */
  tags?: string;

  /**
   * Media
   * Specify list of new media to be added to the product.
   *
   * **Example**:
   * ```
   * [
   *  {
   *    alt: "Gray helmet for bikers",
   *    mediaContentType: "IMAGE",
   *    originalSource: "https://cdn.shopify.com/shopifycloud/brochure/assets/sell/image/image-@artdirection-large-1ba8d5de56c361cec6bc487b747c8774b9ec8203f392a99f53c028df8d0fb3fc.png"
   *  }
   *]
   * ```
   */
  media?: string;

  /**
   * Additional Fields
   *
   * **Example**:
   * ```
   * {
   *  status: "ACTIVE",
   *  requiresSellingPlan: false,
   *  giftCard: false
   *}
   * ```
   */
  additionalFields?: string;
};

/**
 * Update Product (GraphQL) intent type
 */
type ShopifyUpdateProductGraphql = {
  /**
   * Product ID
   * The ID of the Product to update.
   *
   * **Example**:
   * ```
   * gid://shopify/Product/913144112
   * ```
   */
  productId: string;

  /**
   * Title
   *
   */
  title?: string;

  /**
   * Product Type
   *
   */
  productType?: string;

  /**
   * Vendor
   *
   */
  vendor?: string;

  /**
   * Product Description
   * Accepts plain text or HTML.
   *
   */
  productDescription?: string;

  /**
   * Tags
   * Accepts an array or comma-separated list of tags.
   *
   */
  tags?: string;

  /**
   * Media
   * Specify list of new media to be updated to the product.
   *
   * **Example**:
   * ```
   * [
   *  {
   *    alt: "Gray helmet for bikers",
   *    mediaContentType: "IMAGE",
   *    originalSource: "https://cdn.shopify.com/shopifycloud/brochure/assets/sell/image/image-@artdirection-large-1ba8d5de56c361cec6bc487b747c8774b9ec8203f392a99f53c028df8d0fb3fc.png"
   *  }
   *]
   * ```
   */
  media?: string;

  /**
   * Additional Fields
   *
   * **Example**:
   * ```
   * {
   *  status: "ACTIVE",
   *  requiresSellingPlan: false,
   *  giftCard: false
   *}
   * ```
   */
  additionalFields?: string;
};

/**
 * Get Products (GraphQL) intent type
 */
type ShopifyGetProductsGraphql = {
  /**
   * Filter search
   * Search for items that match specified filters.
   *
   */
  productFilterFormula?: ConditionalInput;
};

export type IntentToInputOutput = {
  /**
   * SHOPIFY_GET_CUSTOMERS
   */
  SHOPIFY_GET_CUSTOMERS: [ShopifyGetCustomers, any];

  /**
   * SHOPIFY_SEARCH_CUSTOMERS
   */
  SHOPIFY_SEARCH_CUSTOMERS: [ShopifySearchCustomers, any];

  /**
   * SHOPIFY_CREATE_CUSTOMER
   */
  SHOPIFY_CREATE_CUSTOMER: [ShopifyCreateCustomer, any];

  /**
   * SHOPIFY_UPDATE_CUSTOMER
   */
  SHOPIFY_UPDATE_CUSTOMER: [ShopifyUpdateCustomer, any];

  /**
   * SHOPIFY_CREATE_CUSTOMER_GRAPHQL
   */
  SHOPIFY_CREATE_CUSTOMER_GRAPHQL: [ShopifyCreateCustomerGraphql, any];

  /**
   * SHOPIFY_UPDATE_CUSTOMER_GRAPHQL
   */
  SHOPIFY_UPDATE_CUSTOMER_GRAPHQL: [ShopifyUpdateCustomerGraphql, any];

  /**
   * SHOPIFY_GET_CUSTOMERS_GRAPHQL
   */
  SHOPIFY_GET_CUSTOMERS_GRAPHQL: [ShopifyGetCustomersGraphql, any];

  /**
   * SHOPIFY_GET_ORDERS
   */
  SHOPIFY_GET_ORDERS: [ShopifyGetOrders, any];

  /**
   * SHOPIFY_CREATE_ORDER
   */
  SHOPIFY_CREATE_ORDER: [ShopifyCreateOrder, any];

  /**
   * SHOPIFY_UPDATE_ORDER
   */
  SHOPIFY_UPDATE_ORDER: [ShopifyUpdateOrder, any];

  /**
   * SHOPIFY_GET_ABANDONED_CARTS
   */
  SHOPIFY_GET_ABANDONED_CARTS: [ShopifyGetAbandonedCarts, any];

  /**
   * SHOPIFY_CREATE_ORDER_GRAPHQL
   */
  SHOPIFY_CREATE_ORDER_GRAPHQL: [ShopifyCreateOrderGraphql, any];

  /**
   * SHOPIFY_UPDATE_ORDER_GRAPHQL
   */
  SHOPIFY_UPDATE_ORDER_GRAPHQL: [ShopifyUpdateOrderGraphql, any];

  /**
   * SHOPIFY_GET_ORDERS_GRAPHQL
   */
  SHOPIFY_GET_ORDERS_GRAPHQL: [ShopifyGetOrdersGraphql, any];

  /**
   * SHOPIFY_GET_ABANDONED_CARTS_GRAPHQL
   */
  SHOPIFY_GET_ABANDONED_CARTS_GRAPHQL: [ShopifyGetAbandonedCartsGraphql, any];

  /**
   * SHOPIFY_GET_PRODUCTS
   */
  SHOPIFY_GET_PRODUCTS: [ShopifyGetProducts, any];

  /**
   * SHOPIFY_CREATE_PRODUCT
   */
  SHOPIFY_CREATE_PRODUCT: [ShopifyCreateProduct, any];

  /**
   * SHOPIFY_UPDATE_PRODUCT
   */
  SHOPIFY_UPDATE_PRODUCT: [ShopifyUpdateProduct, any];

  /**
   * SHOPIFY_CREATE_PRODUCT_GRAPHQL
   */
  SHOPIFY_CREATE_PRODUCT_GRAPHQL: [ShopifyCreateProductGraphql, any];

  /**
   * SHOPIFY_UPDATE_PRODUCT_GRAPHQL
   */
  SHOPIFY_UPDATE_PRODUCT_GRAPHQL: [ShopifyUpdateProductGraphql, any];

  /**
   * SHOPIFY_GET_PRODUCTS_GRAPHQL
   */
  SHOPIFY_GET_PRODUCTS_GRAPHQL: [ShopifyGetProductsGraphql, any];
};
