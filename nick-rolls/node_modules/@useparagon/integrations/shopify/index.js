const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for shopify
 */
exports.inputs = [
  {
    id: 'customerProperties',
    title: 'Customer Property',
    type: 'DYNAMIC_DATA_SOURCE',
  },
];

/**
 * triggers for shopify
 */
exports.triggers = [
  {
    title: 'New Order',
    name: 'SHOPIFY_TRIGGER_ORDER_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Order Updated',
    name: 'SHOPIFY_TRIGGER_ORDER_UPDATED',
    output: [],
    inputs: [],
  },
  {
    title: 'New Order (GraphQL)',
    name: 'SHOPIFY_TRIGGER_ORDER_CREATED_GRAPHQL',
    output: [],
    inputs: [],
  },
  {
    title: 'Order Updated (GraphQL)',
    name: 'SHOPIFY_TRIGGER_ORDER_UPDATED_GRAPHQL',
    output: [],
    inputs: [],
  },
  {
    title: 'New Customer',
    name: 'SHOPIFY_TRIGGER_CUSTOMER_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Customer Updated',
    name: 'SHOPIFY_TRIGGER_CUSTOMER_UPDATED',
    output: [],
    inputs: [],
  },
  {
    title: 'New Customer (GraphQL)',
    name: 'SHOPIFY_TRIGGER_CUSTOMER_CREATED_GRAPHQL',
    output: [],
    inputs: [],
  },
  {
    title: 'Customer Updated (GraphQL)',
    name: 'SHOPIFY_TRIGGER_CUSTOMER_UPDATED_GRAPHQL',
    output: [],
    inputs: [],
  },
  {
    title: 'New Product (GraphQL)',
    name: 'SHOPIFY_TRIGGER_PRODUCT_CREATED_GRAPHQL',
    output: [],
    inputs: [
      {
        id: 'status',
        title: 'Status',
        type: 'ENUM',
        values: ['active', 'archived', 'draft'],
      },
    ],
  },
  {
    title: 'New Product',
    name: 'SHOPIFY_TRIGGER_PRODUCT_CREATED',
    output: [],
    inputs: [
      {
        id: 'status',
        title: 'Status',
        type: 'ENUM',
        values: ['active', 'archived', 'draft'],
      },
    ],
  },
  {
    title: 'Product Updated (GraphQL)',
    name: 'SHOPIFY_TRIGGER_PRODUCT_UPDATED_GRAPHQL',
    output: [],
    inputs: [
      {
        id: 'status',
        title: 'Status',
        type: 'ENUM',
        values: ['active', 'archived', 'draft'],
      },
    ],
  },
  {
    title: 'Product Updated',
    name: 'SHOPIFY_TRIGGER_PRODUCT_UPDATED',
    output: [],
    inputs: [
      {
        id: 'status',
        title: 'Status',
        type: 'ENUM',
        values: ['active', 'archived', 'draft'],
      },
    ],
  },
  {
    title: 'Customer Data Request',
    name: 'SHOPIFY_TRIGGER_CUSTOMER_DATA_REQUEST',
    output: [],
    inputs: [],
  },
  {
    title: 'Customer Data Erasure Request',
    name: 'SHOPIFY_TRIGGER_CUSTOMER_DATA_ERASURE_REQUEST',
    output: [],
    inputs: [],
  },
  {
    title: 'Shop Data Erasure Request',
    name: 'SHOPIFY_TRIGGER_SHOP_DATA_ERASURE_REQUEST',
    output: [],
    inputs: [],
  },
];

/**
 * intents for shopify
 */
exports.intents = [
  {
    title: 'Get Customers',
    name: 'SHOPIFY_GET_CUSTOMERS',
    output: [],
    inputs: [
      {
        id: 'customerIds',
        title: 'Customer IDs',
        type: 'TEXTAREA',
        subtitle:
          'Only return customers matching the IDs provided. You can enter an array or a comma-separated list of IDs.',
        placeholder: '207119551, 207119552',
      },
      {
        id: 'createdAtMin',
        title: 'Created After',
        type: 'TEXTAREA',
        subtitle:
          'Only return customers created after the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'createdAtMax',
        title: 'Created Before',
        type: 'TEXTAREA',
        subtitle:
          'Only return customers created before the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'updatedAtMin',
        title: 'Updated after',
        type: 'TEXTAREA',
        subtitle:
          'Only return customers updated after the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'updatedAtMax',
        title: 'Updated before',
        type: 'TEXTAREA',
        subtitle:
          'Only return customers updated before the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'limit',
        title: 'Limit results',
        type: 'TEXTAREA',
        subtitle:
          'Limit the maximum number of customers to return. Defaults to 250 if left blank. Pagination only accepts the limit field. Other fields cannot be used for filtering the paginated records.',
      },
    ],
  },
  {
    title: 'Search Customers',
    name: 'SHOPIFY_SEARCH_CUSTOMERS',
    output: [],
    inputs: [
      {
        id: 'filterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for customers that match specified filters.',
        supportedOperators: [
          '$stringContains',
          '$stringDoesNotContain',
          '$stringStartsWith',
          '$stringDoesNotStartWith',
          '$numberLessThan',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberDoesNotEqual',
          '$numberGreaterThanOrEqualTo',
          '$numberLessThanOrEqualTo',
          '$booleanTrue',
          '$booleanFalse',
          '$exists',
          '$doesNotExist',
        ],
      },
      {
        id: 'limit',
        title: 'Limit results',
        type: 'TEXTAREA',
        subtitle:
          'Limit the maximum number of customers to return. Defaults to 250 if left blank. Pagination only accepts the limit field. Other fields cannot be used for filtering the paginated records.',
      },
    ],
  },
  {
    title: 'Create Customer',
    name: 'SHOPIFY_CREATE_CUSTOMER',
    output: [],
    inputs: [
      {
        id: 'firstName',
        title: 'First name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'lastName',
        title: 'Last name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'email',
        title: 'Email address',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'company',
        title: 'Company name',
        type: 'TEXTAREA',
      },
      {
        id: 'streetAddressLine1',
        title: 'Street address',
        type: 'TEXTAREA',
      },
      {
        id: 'streetAddressLine2',
        title: 'Street address line 2',
        type: 'TEXTAREA',
      },
      {
        id: 'city',
        title: 'City',
        type: 'TEXTAREA',
      },
      {
        id: 'state',
        title: 'State or province code',
        type: 'TEXTAREA',
      },
      {
        id: 'country',
        title: 'Country',
        type: 'TEXTAREA',
      },
      {
        id: 'zipCode',
        title: 'Zip code',
        type: 'TEXTAREA',
      },
      {
        id: 'phone',
        title: 'Phone',
        type: 'TEXTAREA',
      },
      {
        id: 'tags',
        title: 'Tags',
        type: 'TEXTAREA',
        subtitle: 'Accepts an array or comma-separated list of tags.',
      },
      {
        id: 'note',
        title: 'Note',
        type: 'TEXTAREA',
      },
      {
        id: 'sendEmailInvite',
        title: 'Send email invite',
        type: 'BOOLEAN_INPUT',
      },
      {
        id: 'metafields',
        title: 'Metafields',
        type: 'CODE',
        placeholder:
          '[\n    {\n    "key": "new",\n    "value": "newvalue",\n    "value_type": "string",\n    "namespace": "global"\n    }\n  ]',
      },
    ],
  },
  {
    title: 'Update Customer',
    name: 'SHOPIFY_UPDATE_CUSTOMER',
    output: [],
    inputs: [
      {
        id: 'customerId',
        title: 'Customer ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Customer to update.',
        placeholder: '{{1.customer.id}}',
        required: true,
      },
      {
        id: 'firstName',
        title: 'First name',
        type: 'TEXTAREA',
      },
      {
        id: 'lastName',
        title: 'Last name',
        type: 'TEXTAREA',
      },
      {
        id: 'email',
        title: 'Email address',
        type: 'TEXTAREA',
      },
      {
        id: 'company',
        title: 'Company name',
        type: 'TEXTAREA',
      },
      {
        id: 'streetAddressLine1',
        title: 'Street address',
        type: 'TEXTAREA',
      },
      {
        id: 'streetAddressLine2',
        title: 'Street address line 2',
        type: 'TEXTAREA',
      },
      {
        id: 'city',
        title: 'City',
        type: 'TEXTAREA',
      },
      {
        id: 'state',
        title: 'State or province code',
        type: 'TEXTAREA',
      },
      {
        id: 'country',
        title: 'Country',
        type: 'TEXTAREA',
      },
      {
        id: 'zipCode',
        title: 'Zip code',
        type: 'TEXTAREA',
      },
      {
        id: 'phone',
        title: 'Phone',
        type: 'TEXTAREA',
      },
      {
        id: 'tags',
        title: 'Tags',
        type: 'TEXTAREA',
        subtitle: 'Accepts an array or comma-separated list of tags.',
      },
      {
        id: 'note',
        title: 'Note',
        type: 'TEXTAREA',
      },
      {
        id: 'sendEmailInvite',
        title: 'Send email invite',
        type: 'BOOLEAN_INPUT',
      },
      {
        id: 'metafields',
        title: 'Metafields',
        type: 'CODE',
        placeholder:
          '[\n    {\n    "key": "new",\n    "value": "newvalue",\n    "value_type": "string",\n    "namespace": "global"\n    }\n  ]',
      },
    ],
  },
  {
    title: 'Create Customer (GraphQL)',
    name: 'SHOPIFY_CREATE_CUSTOMER_GRAPHQL',
    output: [],
    inputs: [
      {
        id: 'firstName',
        title: 'First name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'lastName',
        title: 'Last name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'email',
        title: 'Email address',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'streetAddressLine1',
        title: 'Street address',
        type: 'TEXTAREA',
      },
      {
        id: 'streetAddressLine2',
        title: 'Street address line 2',
        type: 'TEXTAREA',
      },
      {
        id: 'city',
        title: 'City',
        type: 'TEXTAREA',
      },
      {
        id: 'state',
        title: 'State or province code',
        type: 'TEXTAREA',
      },
      {
        id: 'country',
        title: 'Country',
        type: 'TEXTAREA',
      },
      {
        id: 'zipCode',
        title: 'Zip code',
        type: 'TEXTAREA',
      },
      {
        id: 'phone',
        title: 'Phone',
        type: 'TEXTAREA',
      },
      {
        id: 'tags',
        title: 'Tags',
        type: 'TEXTAREA',
        subtitle: 'Accepts an array or comma-separated list of tags.',
      },
      {
        id: 'note',
        title: 'Note',
        type: 'TEXTAREA',
      },
      {
        id: 'locale',
        title: 'Locale',
        type: 'TEXTAREA',
      },
      {
        id: 'taxExempt',
        title: 'Tax Exempt',
        type: 'BOOLEAN_INPUT',
      },
      {
        id: 'taxExemptions',
        title: 'Tax Exemptions',
        type: 'TEXTAREA',
        subtitle: 'Accepts an array or comma-separated list of tax exemptions.',
      },
      {
        id: 'smsMarketingConsent',
        title: 'SMS Marketing Consent',
        type: 'CODE',
        placeholder:
          '{\n  "marketingState": "SUBSCRIBED",\n  "marketingOptInLevel": "SINGLE_OPT_IN"\n}',
      },
      {
        id: 'metafields',
        title: 'Metafields',
        type: 'CODE',
        placeholder:
          '[\n    {\n    "key": "new",\n    "value": "newvalue",\n    "value_type": "string",\n    "namespace": "global"\n    }\n  ]',
      },
    ],
  },
  {
    title: 'Update Customer (GraphQL)',
    name: 'SHOPIFY_UPDATE_CUSTOMER_GRAPHQL',
    output: [],
    inputs: [
      {
        id: 'customerId',
        title: 'Customer ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Customer to update.',
        placeholder: '{{1.customer.id}}',
        required: true,
      },
      {
        id: 'firstName',
        title: 'First name',
        type: 'TEXTAREA',
      },
      {
        id: 'lastName',
        title: 'Last name',
        type: 'TEXTAREA',
      },
      {
        id: 'email',
        title: 'Email address',
        type: 'TEXTAREA',
      },
      {
        id: 'streetAddressLine1',
        title: 'Street address',
        type: 'TEXTAREA',
      },
      {
        id: 'streetAddressLine2',
        title: 'Street address line 2',
        type: 'TEXTAREA',
      },
      {
        id: 'city',
        title: 'City',
        type: 'TEXTAREA',
      },
      {
        id: 'state',
        title: 'State or province code',
        type: 'TEXTAREA',
      },
      {
        id: 'country',
        title: 'Country',
        type: 'TEXTAREA',
      },
      {
        id: 'zipCode',
        title: 'Zip code',
        type: 'TEXTAREA',
      },
      {
        id: 'phone',
        title: 'Phone',
        type: 'TEXTAREA',
      },
      {
        id: 'tags',
        title: 'Tags',
        type: 'TEXTAREA',
        subtitle: 'Accepts an array or comma-separated list of tags.',
      },
      {
        id: 'note',
        title: 'Note',
        type: 'TEXTAREA',
      },
      {
        id: 'locale',
        title: 'Locale',
        type: 'TEXTAREA',
      },
      {
        id: 'taxExempt',
        title: 'Tax Exempt',
        type: 'BOOLEAN_INPUT',
      },
      {
        id: 'taxExemptions',
        title: 'Tax Exemptions',
        type: 'TEXTAREA',
        subtitle: 'Accepts an array or comma-separated list of tax exemptions.',
      },
      {
        id: 'metafields',
        title: 'Metafields',
        type: 'CODE',
        placeholder:
          '[\n    {\n    "key": "new",\n    "value": "newvalue",\n    "value_type": "string",\n    "namespace": "global"\n    }\n  ]',
      },
    ],
  },
  {
    title: 'Get Customers (GraphQL)',
    name: 'SHOPIFY_GET_CUSTOMERS_GRAPHQL',
    output: [],
    inputs: [
      {
        id: 'customerFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for items that match specified filters.',
        supportedKeys: [
          'id',
          'first_name',
          'last_name',
          'email',
          'phone',
          'tag',
          'created_at',
          'updated_at',
          'country',
          'default',
          'accepts_marketing',
          'customer_date',
          'last_abandoned_order_date',
          'order_date',
          'orders_count',
          'total_spent',
          'state',
        ],
        supportedOperators: [
          '$stringContains',
          '$stringStartsWith',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberGreaterThanOrEqualTo',
          '$numberLessThan',
          '$numberLessThanOrEqualTo',
          '$booleanTrue',
          '$booleanFalse',
          '$dateTimeAfter',
          '$dateTimeBefore',
          '$dateTimeEquals',
          '$exists',
          '$doesNotExist',
        ],
      },
    ],
  },
  {
    title: 'Get Orders',
    name: 'SHOPIFY_GET_ORDERS',
    output: [],
    inputs: [
      {
        id: 'orderIds',
        title: 'Order IDs',
        type: 'TEXTAREA',
        subtitle:
          'Only return orders matching the IDs provided. You can enter an array or a comma-separated list of IDs.',
        placeholder: '450789469, 450789470,',
      },
      {
        id: 'createdAtMin',
        title: 'Created After',
        type: 'TEXTAREA',
        subtitle:
          'Only return orders created after the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'createdAtMax',
        title: 'Created Before',
        type: 'TEXTAREA',
        subtitle:
          'Only return orders created before the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'updatedAtMin',
        title: 'Updated after',
        type: 'TEXTAREA',
        subtitle:
          'Only return orders updated after the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'updatedAtMax',
        title: 'Updated before',
        type: 'TEXTAREA',
        subtitle:
          'Only return orders updated before the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'limit',
        title: 'Limit results',
        type: 'TEXTAREA',
        subtitle:
          'Limit the maximum number of orders to return. Defaults to 250 if left blank. Pagination only accepts the limit field. Other fields cannot be used for filtering the paginated records.',
      },
    ],
  },
  {
    title: 'Create Order',
    name: 'SHOPIFY_CREATE_ORDER',
    output: [],
    inputs: [
      {
        id: 'email',
        title: 'Customer email',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'lineItems',
        title: 'Line items',
        type: 'CODE',
        placeholder:
          '[\n    {\n    "title": "Big Brown Bear Boots",\n    "price": 74.99,\n    "quantity": 3,\n    "variant_id": 447654529\n    }\n  ]',
        required: true,
      },
      {
        id: 'sendReceipt',
        title: 'Send receipt',
        type: 'BOOLEAN_INPUT',
      },
      {
        id: 'fulfillmentStatus',
        title: 'Fulfillment status',
        type: 'ENUM',
        values: ['fulfilled', 'null', 'partial', 'restocked'],
      },
      {
        id: 'financialStatus',
        title: 'Financial status',
        type: 'ENUM',
        values: [
          'pending',
          'authorized',
          'partially_paid',
          'paid',
          'partially_refunded',
          'refunded',
          'voided',
        ],
      },
      {
        id: 'inventoryBehaviour',
        title: 'Inventory behavior',
        type: 'ENUM',
        values: [
          'bypass',
          'decrement_ignoring_policy',
          'decrement_obeying_policy',
        ],
      },
      {
        id: 'note',
        title: 'Note',
        type: 'TEXTAREA',
      },
    ],
  },
  {
    title: 'Update Order',
    name: 'SHOPIFY_UPDATE_ORDER',
    output: [],
    inputs: [
      {
        id: 'orderId',
        title: 'Order ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Order to update.',
        placeholder: '{{1.order.id}}',
        required: true,
      },
      {
        id: 'email',
        title: 'Customer email',
        type: 'TEXTAREA',
      },
      {
        id: 'lineItems',
        title: 'Line items',
        type: 'CODE',
        placeholder:
          '[\n    {\n    "title": "Big Brown Bear Boots",\n    "price": 74.99,\n    "quantity": 3,\n    "variant_id": 447654529\n    }\n  ]',
      },
      {
        id: 'sendReceipt',
        title: 'Send receipt',
        type: 'BOOLEAN_INPUT',
      },
      {
        id: 'fulfillmentStatus',
        title: 'Fulfillment status',
        type: 'ENUM',
        values: ['fulfilled', 'null', 'partial', 'restocked'],
      },
      {
        id: 'financialStatus',
        title: 'Financial status',
        type: 'ENUM',
        values: [
          'pending',
          'authorized',
          'partially_paid',
          'paid',
          'partially_refunded',
          'refunded',
          'voided',
        ],
      },
      {
        id: 'inventoryBehaviour',
        title: 'Inventory behavior',
        type: 'ENUM',
        values: [
          'bypass',
          'decrement_ignoring_policy',
          'decrement_obeying_policy',
        ],
      },
      {
        id: 'note',
        title: 'Note',
        type: 'TEXTAREA',
      },
    ],
  },
  {
    title: 'Get Abandoned Carts',
    name: 'SHOPIFY_GET_ABANDONED_CARTS',
    output: [],
    inputs: [
      {
        id: 'createdWithInLast-left',
        title: 'Created Within the Last',
        type: 'ENUM',
        subtitle:
          'Restrict results to only checkouts created within the specified time.',
        values: ['minutes', 'hours', 'days'],
      },
      {
        id: 'createdWithInLast-right',
        title: 'Created Within the Last Value',
        type: 'TEXTAREA',
        subtitle:
          'Restrict results to only checkouts created within the specified time.',
      },
      {
        id: 'createdAfterId',
        title: 'Created After Record ID',
        type: 'TEXTAREA',
        subtitle: 'Restrict results to after the specified ID.',
        placeholder: '450789469',
      },
      {
        id: 'status',
        title: 'Status',
        type: 'ENUM',
        subtitle:
          'Show only checkouts with a given status. Defaults to showing only open abandoned checkouts.',
        values: ['open', 'closed'],
      },
      {
        id: 'createdAtMin',
        title: 'Created After',
        type: 'TEXTAREA',
        subtitle:
          'Only return orders created after the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'createdAtMax',
        title: 'Created Before',
        type: 'TEXTAREA',
        subtitle:
          'Only return orders created before the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'limit',
        title: 'Limit results',
        type: 'TEXTAREA',
        subtitle:
          'Limit the maximum number of orders to return. Defaults to 250 if left blank. Pagination only accepts the limit field. Other fields cannot be used for filtering the paginated records.',
      },
    ],
  },
  {
    title: 'Create Order (GraphQL)',
    name: 'SHOPIFY_CREATE_ORDER_GRAPHQL',
    output: [],
    inputs: [
      {
        id: 'email',
        title: 'Customer email',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'lineItems',
        title: 'Line items',
        type: 'CODE',
        placeholder:
          '[\n    {\n    "title": "Big Brown Bear Boots",\n    "price": 74.99,\n    "quantity": 3,\n    "variant_id": 447654529\n    }\n  ]',
        required: true,
      },
      {
        id: 'sendReceipt',
        title: 'Send receipt',
        type: 'BOOLEAN_INPUT',
      },
      {
        id: 'fulfillmentStatus',
        title: 'Fulfillment status',
        type: 'ENUM',
        values: ['fulfilled', 'null', 'partial', 'restocked'],
      },
      {
        id: 'financialStatus',
        title: 'Financial status',
        type: 'ENUM',
        values: [
          'pending',
          'authorized',
          'partially_paid',
          'paid',
          'partially_refunded',
          'refunded',
          'voided',
        ],
      },
      {
        id: 'inventoryBehaviour',
        title: 'Inventory behavior',
        type: 'ENUM',
        values: [
          'bypass',
          'decrement_ignoring_policy',
          'decrement_obeying_policy',
        ],
      },
      {
        id: 'note',
        title: 'Note',
        type: 'TEXTAREA',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder: '{\n"name": "test-name",\n"phone": "+122134567890"\n}',
      },
    ],
  },
  {
    title: 'Update Order (GraphQL)',
    name: 'SHOPIFY_UPDATE_ORDER_GRAPHQL',
    output: [],
    inputs: [
      {
        id: 'orderId',
        title: 'Order ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Order to update.',
        placeholder: '{{1.order.id}}',
        required: true,
      },
      {
        id: 'email',
        title: 'Customer email',
        type: 'TEXTAREA',
      },
      {
        id: 'note',
        title: 'Note',
        type: 'TEXTAREA',
      },
      {
        id: 'poNumber',
        title: 'Purchase Order Number',
        type: 'TEXTAREA',
        subtitle: 'The new purchase order number for the order.',
      },
      {
        id: 'tags',
        title: 'Tags',
        type: 'TEXTAREA',
        subtitle: 'Accepts an array or comma-separated list of tags.',
      },
      {
        id: 'metafields',
        title: 'Metafields',
        type: 'CODE',
        placeholder:
          '[\n    {\n    "key": "new",\n    "value": "newvalue",\n    "value_type": "string",\n    "namespace": "global"\n    }\n  ]',
      },
      {
        id: 'shippingAddress',
        title: 'Shipping Address',
        type: 'CODE',
        subtitle: 'The new shipping address for the order.',
        placeholder:
          '{\n"address1": "123 Main St",\n"city": "Anytown",\n"province": "CA",\n"country": "US",\n"zip": "12345"\n}',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n"customAttributes": [\n        {\n          "key": "key",\n          "value": "123"\n        }\n      ]\n}',
      },
    ],
  },
  {
    title: 'Get Orders (GraphQL)',
    name: 'SHOPIFY_GET_ORDERS_GRAPHQL',
    output: [],
    inputs: [
      {
        id: 'orderFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for items that match specified filters.',
        supportedKeys: [
          'default',
          'cart_token',
          'channel',
          'channel_id',
          'chargeback_status',
          'checkout_token',
          'confirmation_number',
          'customer_id',
          'credit_card_last4',
          'email',
          'financial_status',
          'fulfillment_status',
          'id',
          'name',
          'created_at',
          'updated_at',
        ],
        supportedOperators: [
          '$stringContains',
          '$stringStartsWith',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberGreaterThanOrEqualTo',
          '$numberLessThan',
          '$numberLessThanOrEqualTo',
          '$booleanTrue',
          '$booleanFalse',
          '$dateTimeAfter',
          '$dateTimeBefore',
          '$dateTimeEquals',
          '$exists',
          '$doesNotExist',
        ],
      },
    ],
  },
  {
    title: 'Get Abandoned Carts (GraphQL)',
    name: 'SHOPIFY_GET_ABANDONED_CARTS_GRAPHQL',
    output: [],
    inputs: [
      {
        id: 'abandonedCartFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for items that match specified filters.',
        supportedKeys: [
          'email_state',
          'recovery_state',
          'status',
          'created_at',
          'updated_at',
        ],
        supportedOperators: [
          '$stringContains',
          '$stringStartsWith',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberGreaterThanOrEqualTo',
          '$numberLessThan',
          '$numberLessThanOrEqualTo',
          '$booleanTrue',
          '$booleanFalse',
          '$dateTimeAfter',
          '$dateTimeBefore',
          '$dateTimeEquals',
          '$exists',
          '$doesNotExist',
        ],
      },
    ],
  },
  {
    title: 'Get Products',
    name: 'SHOPIFY_GET_PRODUCTS',
    output: [],
    inputs: [
      {
        id: 'productIds',
        title: 'Product IDs',
        type: 'TEXTAREA',
        subtitle:
          'Only return products matching the IDs provided. You can enter an array or a comma-separated list of IDs.',
        placeholder: '632910392, 632910393',
      },
      {
        id: 'title',
        title: 'Title',
        type: 'TEXTAREA',
      },
      {
        id: 'productType',
        title: 'Product Type',
        type: 'TEXTAREA',
      },
      {
        id: 'vendor',
        title: 'Vendor',
        type: 'TEXTAREA',
      },
      {
        id: 'status',
        title: 'Status',
        type: 'ENUM',
        values: ['active', 'archived', 'draft'],
      },
      {
        id: 'createdAtMin',
        title: 'Created After',
        type: 'TEXTAREA',
        subtitle:
          'Only return products created after the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'createdAtMax',
        title: 'Created Before',
        type: 'TEXTAREA',
        subtitle:
          'Only return products created before the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'updatedAtMin',
        title: 'Updated after',
        type: 'TEXTAREA',
        subtitle:
          'Only return products updated after the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'updatedAtMax',
        title: 'Updated before',
        type: 'TEXTAREA',
        subtitle:
          'Only return products updated before the provided date (ISO or Unix timestamp).',
        placeholder: '2014-04-25T16:15:47-04:00',
      },
      {
        id: 'limit',
        title: 'Limit results',
        type: 'TEXTAREA',
        subtitle:
          'Limit the maximum number of products to return. Defaults to 250 if left blank. Pagination only accepts the limit field. Other fields cannot be used for filtering the paginated records.',
      },
    ],
  },
  {
    title: 'Create Product',
    name: 'SHOPIFY_CREATE_PRODUCT',
    output: [],
    inputs: [
      {
        id: 'title',
        title: 'Title',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'productType',
        title: 'Product Type',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'vendor',
        title: 'Vendor',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'productDescription',
        title: 'Product Description',
        type: 'TEXTAREA',
        subtitle: 'Accepts plain text or HTML.',
      },
      {
        id: 'tags',
        title: 'Tags',
        type: 'TEXTAREA',
        subtitle: 'Accepts an array or comma-separated list of tags.',
      },
      {
        id: 'price',
        title: 'Price',
        type: 'TEXTAREA',
      },
      {
        id: 'inventoryPolicy',
        title: 'Inventory policy',
        type: 'ENUM',
        values: ['deny', 'continue'],
      },
      {
        id: 'imageUrl',
        title: 'Image URL',
        type: 'TEXTAREA',
      },
      {
        id: 'isPublished',
        title: 'Is published',
        type: 'BOOLEAN_INPUT',
      },
      {
        id: 'publishToPointToSale',
        title: 'Publish to point of sale',
        type: 'BOOLEAN_INPUT',
      },
    ],
  },
  {
    title: 'Update Product',
    name: 'SHOPIFY_UPDATE_PRODUCT',
    output: [],
    inputs: [
      {
        id: 'productId',
        title: 'Product ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Product to update.',
        placeholder: 'gid://shopify/Product/913144112',
        required: true,
      },
      {
        id: 'title',
        title: 'Title',
        type: 'TEXTAREA',
      },
      {
        id: 'productType',
        title: 'Product Type',
        type: 'TEXTAREA',
      },
      {
        id: 'vendor',
        title: 'Vendor',
        type: 'TEXTAREA',
      },
      {
        id: 'productDescription',
        title: 'Product Description',
        type: 'TEXTAREA',
        subtitle: 'Accepts plain text or HTML.',
      },
      {
        id: 'tags',
        title: 'Tags',
        type: 'TEXTAREA',
        subtitle: 'Accepts an array or comma-separated list of tags.',
      },
      {
        id: 'price',
        title: 'Price',
        type: 'TEXTAREA',
      },
      {
        id: 'inventoryPolicy',
        title: 'Inventory policy',
        type: 'ENUM',
        values: ['deny', 'continue'],
      },
      {
        id: 'imageUrl',
        title: 'Image URL',
        type: 'TEXTAREA',
      },
      {
        id: 'isPublished',
        title: 'Is published',
        type: 'BOOLEAN_INPUT',
      },
      {
        id: 'publishToPointToSale',
        title: 'Publish to point of sale',
        type: 'BOOLEAN_INPUT',
      },
    ],
  },
  {
    title: 'Create Product (GraphQL)',
    name: 'SHOPIFY_CREATE_PRODUCT_GRAPHQL',
    output: [],
    inputs: [
      {
        id: 'title',
        title: 'Title',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'productType',
        title: 'Product Type',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'vendor',
        title: 'Vendor',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'productDescription',
        title: 'Product Description',
        type: 'TEXTAREA',
        subtitle: 'Accepts plain text or HTML.',
      },
      {
        id: 'tags',
        title: 'Tags',
        type: 'TEXTAREA',
        subtitle: 'Accepts an array or comma-separated list of tags.',
      },
      {
        id: 'media',
        title: 'Media',
        type: 'CODE',
        subtitle: 'Specify list of new media to be added to the product.',
        placeholder:
          '[\n  {\n    alt: "Gray helmet for bikers",\n    mediaContentType: "IMAGE",\n    originalSource: "https://cdn.shopify.com/shopifycloud/brochure/assets/sell/image/image-@artdirection-large-1ba8d5de56c361cec6bc487b747c8774b9ec8203f392a99f53c028df8d0fb3fc.png"\n  }\n]',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n  status: "ACTIVE",\n  requiresSellingPlan: false,\n  giftCard: false\n}',
      },
    ],
  },
  {
    title: 'Update Product (GraphQL)',
    name: 'SHOPIFY_UPDATE_PRODUCT_GRAPHQL',
    output: [],
    inputs: [
      {
        id: 'productId',
        title: 'Product ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the Product to update.',
        placeholder: 'gid://shopify/Product/913144112',
        required: true,
      },
      {
        id: 'title',
        title: 'Title',
        type: 'TEXTAREA',
      },
      {
        id: 'productType',
        title: 'Product Type',
        type: 'TEXTAREA',
      },
      {
        id: 'vendor',
        title: 'Vendor',
        type: 'TEXTAREA',
      },
      {
        id: 'productDescription',
        title: 'Product Description',
        type: 'TEXTAREA',
        subtitle: 'Accepts plain text or HTML.',
      },
      {
        id: 'tags',
        title: 'Tags',
        type: 'TEXTAREA',
        subtitle: 'Accepts an array or comma-separated list of tags.',
      },
      {
        id: 'media',
        title: 'Media',
        type: 'CODE',
        subtitle: 'Specify list of new media to be updated to the product.',
        placeholder:
          '[\n  {\n    alt: "Gray helmet for bikers",\n    mediaContentType: "IMAGE",\n    originalSource: "https://cdn.shopify.com/shopifycloud/brochure/assets/sell/image/image-@artdirection-large-1ba8d5de56c361cec6bc487b747c8774b9ec8203f392a99f53c028df8d0fb3fc.png"\n  }\n]',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n  status: "ACTIVE",\n  requiresSellingPlan: false,\n  giftCard: false\n}',
      },
    ],
  },
  {
    title: 'Get Products (GraphQL)',
    name: 'SHOPIFY_GET_PRODUCTS_GRAPHQL',
    output: [],
    inputs: [
      {
        id: 'productFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for items that match specified filters.',
        supportedKeys: [
          'id',
          'title',
          'vendor',
          'status',
          'handle',
          'tag',
          'created_at',
          'updated_at',
          'published_at',
        ],
        supportedOperators: [
          '$stringContains',
          '$stringStartsWith',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberGreaterThanOrEqualTo',
          '$numberLessThan',
          '$numberLessThanOrEqualTo',
          '$booleanTrue',
          '$booleanFalse',
          '$dateTimeAfter',
          '$dateTimeBefore',
          '$dateTimeEquals',
          '$exists',
          '$doesNotExist',
        ],
      },
    ],
  },
];

/**
 * integration class for shopify
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'shopify',

  /**
   * action step methods
   */
  actions: {
    /**
     * Get Customers
     * method for SHOPIFY_GET_CUSTOMERS
     */
    getCustomers: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_GET_CUSTOMERS',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Customers
     * method for SHOPIFY_SEARCH_CUSTOMERS
     */
    searchCustomers: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_SEARCH_CUSTOMERS',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Customer
     * method for SHOPIFY_CREATE_CUSTOMER
     */
    createCustomer: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_CREATE_CUSTOMER',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Customer
     * method for SHOPIFY_UPDATE_CUSTOMER
     */
    updateCustomer: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_UPDATE_CUSTOMER',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Customer (GraphQL)
     * method for SHOPIFY_CREATE_CUSTOMER_GRAPHQL
     */
    createCustomerGraphql: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_CREATE_CUSTOMER_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Customer (GraphQL)
     * method for SHOPIFY_UPDATE_CUSTOMER_GRAPHQL
     */
    updateCustomerGraphql: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_UPDATE_CUSTOMER_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Customers (GraphQL)
     * method for SHOPIFY_GET_CUSTOMERS_GRAPHQL
     */
    getCustomersGraphql: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_GET_CUSTOMERS_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Orders
     * method for SHOPIFY_GET_ORDERS
     */
    getOrders: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_GET_ORDERS',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Order
     * method for SHOPIFY_CREATE_ORDER
     */
    createOrder: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_CREATE_ORDER',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Order
     * method for SHOPIFY_UPDATE_ORDER
     */
    updateOrder: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_UPDATE_ORDER',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Abandoned Carts
     * method for SHOPIFY_GET_ABANDONED_CARTS
     */
    getAbandonedCarts: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_GET_ABANDONED_CARTS',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Order (GraphQL)
     * method for SHOPIFY_CREATE_ORDER_GRAPHQL
     */
    createOrderGraphql: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_CREATE_ORDER_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Order (GraphQL)
     * method for SHOPIFY_UPDATE_ORDER_GRAPHQL
     */
    updateOrderGraphql: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_UPDATE_ORDER_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Orders (GraphQL)
     * method for SHOPIFY_GET_ORDERS_GRAPHQL
     */
    getOrdersGraphql: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_GET_ORDERS_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Abandoned Carts (GraphQL)
     * method for SHOPIFY_GET_ABANDONED_CARTS_GRAPHQL
     */
    getAbandonedCartsGraphql: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_GET_ABANDONED_CARTS_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Products
     * method for SHOPIFY_GET_PRODUCTS
     */
    getProducts: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_GET_PRODUCTS',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Product
     * method for SHOPIFY_CREATE_PRODUCT
     */
    createProduct: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_CREATE_PRODUCT',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Product
     * method for SHOPIFY_UPDATE_PRODUCT
     */
    updateProduct: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_UPDATE_PRODUCT',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Product (GraphQL)
     * method for SHOPIFY_CREATE_PRODUCT_GRAPHQL
     */
    createProductGraphql: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_CREATE_PRODUCT_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Product (GraphQL)
     * method for SHOPIFY_UPDATE_PRODUCT_GRAPHQL
     */
    updateProductGraphql: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_UPDATE_PRODUCT_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Products (GraphQL)
     * method for SHOPIFY_GET_PRODUCTS_GRAPHQL
     */
    getProductsGraphql: (inputs, options) => {
      return new ActionStep({
        intent: 'SHOPIFY_GET_PRODUCTS_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Order
     * method for SHOPIFY_TRIGGER_ORDER_CREATED
     */
    orderCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_ORDER_CREATED',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * Order Updated
     * method for SHOPIFY_TRIGGER_ORDER_UPDATED
     */
    orderUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_ORDER_UPDATED',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * New Order (GraphQL)
     * method for SHOPIFY_TRIGGER_ORDER_CREATED_GRAPHQL
     */
    orderCreatedGraphql: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_ORDER_CREATED_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * Order Updated (GraphQL)
     * method for SHOPIFY_TRIGGER_ORDER_UPDATED_GRAPHQL
     */
    orderUpdatedGraphql: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_ORDER_UPDATED_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * New Customer
     * method for SHOPIFY_TRIGGER_CUSTOMER_CREATED
     */
    customerCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_CUSTOMER_CREATED',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * Customer Updated
     * method for SHOPIFY_TRIGGER_CUSTOMER_UPDATED
     */
    customerUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_CUSTOMER_UPDATED',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * New Customer (GraphQL)
     * method for SHOPIFY_TRIGGER_CUSTOMER_CREATED_GRAPHQL
     */
    customerCreatedGraphql: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_CUSTOMER_CREATED_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * Customer Updated (GraphQL)
     * method for SHOPIFY_TRIGGER_CUSTOMER_UPDATED_GRAPHQL
     */
    customerUpdatedGraphql: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_CUSTOMER_UPDATED_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * New Product (GraphQL)
     * method for SHOPIFY_TRIGGER_PRODUCT_CREATED_GRAPHQL
     */
    productCreatedGraphql: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_PRODUCT_CREATED_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * New Product
     * method for SHOPIFY_TRIGGER_PRODUCT_CREATED
     */
    productCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_PRODUCT_CREATED',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * Product Updated (GraphQL)
     * method for SHOPIFY_TRIGGER_PRODUCT_UPDATED_GRAPHQL
     */
    productUpdatedGraphql: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_PRODUCT_UPDATED_GRAPHQL',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * Product Updated
     * method for SHOPIFY_TRIGGER_PRODUCT_UPDATED
     */
    productUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_PRODUCT_UPDATED',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * Customer Data Request
     * method for SHOPIFY_TRIGGER_CUSTOMER_DATA_REQUEST
     */
    customerDataRequest: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_CUSTOMER_DATA_REQUEST',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * Customer Data Erasure Request
     * method for SHOPIFY_TRIGGER_CUSTOMER_DATA_ERASURE_REQUEST
     */
    customerDataErasureRequest: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_CUSTOMER_DATA_ERASURE_REQUEST',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
    /**
     * Shop Data Erasure Request
     * method for SHOPIFY_TRIGGER_SHOP_DATA_ERASURE_REQUEST
     */
    shopDataErasureRequest: (inputs) => {
      return new ActionTriggerStep({
        intent: 'SHOPIFY_TRIGGER_SHOP_DATA_ERASURE_REQUEST',
        actionType: 'shopify',
        parameters: inputs,
      });
    },
  },
};
