/**
 * Create a Opportunity intent type
 */
type LeverCreateOpportunity = {
  /**
   * Perform As
   * Perform this create on behalf of a specified user. The creator and the owner of this Opportunity will default to the perform_as user. The owner can be explicitly specified in the request body if you want the owner to be a different person.
   *
   */
  performAs?: string;

  /**
   * Name
   *
   */
  name?: string;

  /**
   * Headline
   * Contact headline, typically a list of previous companies where the contact has worked or schools that the contact has attended This field can also be populated by parsing a provided resume file.
   *
   */
  headline?: string;

  /**
   * Stage
   * The stage ID of this Opportunity's current stage If omitted, the Opportunity will be placed into the "New Lead" stage.
   *
   */
  stage?: string;

  /**
   * Location
   *
   */
  location?: string;

  /**
   * Phones
   *
   * **Example**:
   * ```
   * [{
   *  "value":"(123) 456-7891"
   *}]
   * ```
   */
  phones?: string;

  /**
   * Emails
   *
   * **Example**:
   * ```
   * ["shane@exampleq3.com"]
   * ```
   */
  emails?: string;

  /**
   * Origin
   * The way this Opportunity was added to Lever.
   *
   */
  origin?:
    | 'agency'
    | 'applied'
    | 'internal'
    | 'referred'
    | 'sourced'
    | 'university';

  /**
   * Additional Fields
   *
   * **Example**:
   * ```
   * {
   *  "archived": {
   *    "reason": "63dd55b2-a99f-4e7b-985f-22c7bf80ab42"
   *  },
   *  "postings": ["f2f01e16-27f8-4711-a728-7d49499795a0"]
   *}
   * ```
   */
  additionalFields?: string;
};

/**
 * Get Opportunity by ID intent type
 */
type LeverGetOpportunityById = {
  /**
   * Opportunity ID
   * Specify the Opportunity ID to fetch.
   *
   */
  opportunityId: string;
};

/**
 * Get Opportunities intent type
 */
type LeverGetOpportunities = {};

/**
 * Update Contact intent type
 */
type LeverUpdateContact = {
  /**
   * Contact ID
   *
   * **Example**:
   * ```
   * ac6102d2-c1cb-42a2-b8a1-5f607e0a46b4
   * ```
   */
  contactId: string;

  /**
   * Name
   *
   */
  name?: string;

  /**
   * Headline
   * Contact headline, typically a list of previous companies where the contact has worked or schools that the contact has attended This field can also be populated by parsing a provided resume file.
   *
   */
  headline?: string;

  /**
   * Location
   *
   */
  location?: string;

  /**
   * Emails
   *
   * **Example**:
   * ```
   * ["shane@exampleq3.com"]
   * ```
   */
  emails?: string;

  /**
   * Phones
   *
   * **Example**:
   * ```
   * [{
   *  "type": "mobile",
   *  "value": "123-456-7890"
   *}]
   * ```
   */
  phones?: string;
};

/**
 * Get Contact by ID intent type
 */
type LeverGetContactById = {
  /**
   * Contact ID
   *
   * **Example**:
   * ```
   * ac6102d2-c1cb-42a2-b8a1-5f607e0a46b4
   * ```
   */
  contactId: string;
};

/**
 * Create a Posting intent type
 */
type LeverCreatePosting = {
  /**
   * Text
   * Title of the job posting
   *
   */
  text: string;

  /**
   * Categories
   *
   * **Example**:
   * ```
   * {
   *  "team": "Platform",
   *  "department": "Engineering",
   *  "location": "San Francisco",
   *  "commitment": "Full-time"
   *}
   * ```
   */
  categories: string;

  /**
   * Perform As
   * Perform this create on behalf of a specified user. The creator and the owner of this Opportunity will default to the perform_as user. The owner can be explicitly specified in the request body if you want the owner to be a different person.
   *
   */
  performAs?: string;

  /**
   * State
   * Posting's current status.
   *
   */
  state?:
    | 'published'
    | 'internal'
    | 'closed'
    | 'draft'
    | 'pending'
    | 'rejected';

  /**
   * Distribution Channels
   * Job sites that a published posting appears on. defaults to public and internal
   *
   * **Example**:
   * ```
   * ["internal","public"]
   * ```
   */
  distributionChannels?: string;

  /**
   * Owner
   * The user ID of the posting owner. The posting owner is the individual who is directly responsible for managing all candidates who are applied to that role. If no ID is provided, the posting owner defaults to perform_as.
   *
   */
  owner?: string;

  /**
   * Hiring Manager
   * The user ID of the hiring manager for the job posting.
   *
   */
  hiringManager?: string;

  /**
   * Additional Fields
   *
   * **Example**:
   * ```
   * {
   *    "workplaceType": "onsite",
   *    "tags": ["engineering","high-priority"]
   *}
   * ```
   */
  additionalFields?: string;
};

/**
 * Update Posting intent type
 */
type LeverUpdatePosting = {
  /**
   * Posting ID
   *
   */
  postingId: string;

  /**
   * Text
   * Title of the job posting
   *
   */
  text?: string;

  /**
   * Categories
   *
   * **Example**:
   * ```
   * {
   *  "team": "Platform",
   *  "department": "Engineering",
   *  "location": "San Francisco",
   *  "commitment": "Full-time"
   *}
   * ```
   */
  categories?: string;

  /**
   * Perform As
   * Perform this create on behalf of a specified user. The creator and the owner of this Opportunity will default to the perform_as user. The owner can be explicitly specified in the request body if you want the owner to be a different person.
   *
   */
  performAs?: string;

  /**
   * State
   * Posting's current status.
   *
   */
  state?:
    | 'published'
    | 'internal'
    | 'closed'
    | 'draft'
    | 'pending'
    | 'rejected';

  /**
   * Distribution Channels
   * Job sites that a published posting appears on. defaults to public and internal
   *
   * **Example**:
   * ```
   * ["internal","public"]
   * ```
   */
  distributionChannels?: string;

  /**
   * Additional Fields
   *
   * **Example**:
   * ```
   * {
   *    "workplaceType": "onsite",
   *    "tags": ["engineering","high-priority"]
   *}
   * ```
   */
  additionalFields?: string;
};

/**
 * Get Posting by ID intent type
 */
type LeverGetPostingById = {
  /**
   * Posting ID
   *
   */
  postingId: string;
};

/**
 * Get Postings intent type
 */
type LeverGetPostings = {};

export type IntentToInputOutput = {
  /**
   * LEVER_CREATE_OPPORTUNITY
   */
  LEVER_CREATE_OPPORTUNITY: [LeverCreateOpportunity, any];

  /**
   * LEVER_GET_OPPORTUNITY_BY_ID
   */
  LEVER_GET_OPPORTUNITY_BY_ID: [LeverGetOpportunityById, any];

  /**
   * LEVER_GET_OPPORTUNITIES
   */
  LEVER_GET_OPPORTUNITIES: [LeverGetOpportunities, any];

  /**
   * LEVER_UPDATE_CONTACT
   */
  LEVER_UPDATE_CONTACT: [LeverUpdateContact, any];

  /**
   * LEVER_GET_CONTACT_BY_ID
   */
  LEVER_GET_CONTACT_BY_ID: [LeverGetContactById, any];

  /**
   * LEVER_CREATE_POSTING
   */
  LEVER_CREATE_POSTING: [LeverCreatePosting, any];

  /**
   * LEVER_UPDATE_POSTING
   */
  LEVER_UPDATE_POSTING: [LeverUpdatePosting, any];

  /**
   * LEVER_GET_POSTING_BY_ID
   */
  LEVER_GET_POSTING_BY_ID: [LeverGetPostingById, any];

  /**
   * LEVER_GET_POSTINGS
   */
  LEVER_GET_POSTINGS: [LeverGetPostings, any];
};
