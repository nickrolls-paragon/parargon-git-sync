const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for lever
 */
exports.inputs = [];

/**
 * triggers for lever
 */
exports.triggers = [
  {
    title: 'Candidate Created',
    name: 'LEVER_TRIGGER_CANDIDATE_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Candidate Updated',
    name: 'LEVER_TRIGGER_CANDIDATE_UPDATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Posting Created',
    name: 'LEVER_TRIGGER_POSTING_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Posting Updated',
    name: 'LEVER_TRIGGER_POSTING_UPDATED',
    output: [],
    inputs: [],
  },
];

/**
 * intents for lever
 */
exports.intents = [
  {
    title: 'Create a Opportunity',
    name: 'LEVER_CREATE_OPPORTUNITY',
    output: [],
    inputs: [
      {
        id: 'performAs',
        title: 'Perform As',
        type: 'TEXTAREA',
        subtitle:
          'Perform this create on behalf of a specified user. The creator and the owner of this Opportunity will default to the perform_as user. The owner can be explicitly specified in the request body if you want the owner to be a different person.',
      },
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
      },
      {
        id: 'headline',
        title: 'Headline',
        type: 'TEXTAREA',
        subtitle:
          'Contact headline, typically a list of previous companies where the contact has worked or schools that the contact has attended This field can also be populated by parsing a provided resume file.',
      },
      {
        id: 'stage',
        title: 'Stage',
        type: 'TEXTAREA',
        subtitle:
          'The stage ID of this Opportunity\'s current stage If omitted, the Opportunity will be placed into the "New Lead" stage.',
      },
      {
        id: 'location',
        title: 'Location',
        type: 'TEXTAREA',
      },
      {
        id: 'phones',
        title: 'Phones',
        type: 'TEXTAREA',
        placeholder: '[{\n  "value":"(123) 456-7891"\n}]',
      },
      {
        id: 'emails',
        title: 'Emails',
        type: 'TEXTAREA',
        placeholder: '["shane@exampleq3.com"]',
      },
      {
        id: 'origin',
        title: 'Origin',
        type: 'ENUM',
        subtitle: 'The way this Opportunity was added to Lever.',
        values: [
          'agency',
          'applied',
          'internal',
          'referred',
          'sourced',
          'university',
        ],
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n  "archived": {\n    "reason": "63dd55b2-a99f-4e7b-985f-22c7bf80ab42"\n  },\n  "postings": ["f2f01e16-27f8-4711-a728-7d49499795a0"]                \n}',
      },
    ],
  },
  {
    title: 'Get Opportunity by ID',
    name: 'LEVER_GET_OPPORTUNITY_BY_ID',
    output: [],
    inputs: [
      {
        id: 'opportunityId',
        title: 'Opportunity ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the Opportunity ID to fetch.',
        required: true,
      },
    ],
  },
  {
    title: 'Get Opportunities',
    name: 'LEVER_GET_OPPORTUNITIES',
    output: [],
    inputs: [],
  },
  {
    title: 'Update Contact',
    name: 'LEVER_UPDATE_CONTACT',
    output: [],
    inputs: [
      {
        id: 'contactId',
        title: 'Contact ID',
        type: 'TEXTAREA',
        placeholder: 'ac6102d2-c1cb-42a2-b8a1-5f607e0a46b4',
        required: true,
      },
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
      },
      {
        id: 'headline',
        title: 'Headline',
        type: 'TEXTAREA',
        subtitle:
          'Contact headline, typically a list of previous companies where the contact has worked or schools that the contact has attended This field can also be populated by parsing a provided resume file.',
      },
      {
        id: 'location',
        title: 'Location',
        type: 'TEXTAREA',
      },
      {
        id: 'emails',
        title: 'Emails',
        type: 'TEXTAREA',
        placeholder: '["shane@exampleq3.com"]',
      },
      {
        id: 'phones',
        title: 'Phones',
        type: 'TEXTAREA',
        placeholder: '[{\n  "type": "mobile",\n  "value": "123-456-7890"\n}]',
      },
    ],
  },
  {
    title: 'Get Contact by ID',
    name: 'LEVER_GET_CONTACT_BY_ID',
    output: [],
    inputs: [
      {
        id: 'contactId',
        title: 'Contact ID',
        type: 'TEXTAREA',
        placeholder: 'ac6102d2-c1cb-42a2-b8a1-5f607e0a46b4',
        required: true,
      },
    ],
  },
  {
    title: 'Create a Posting',
    name: 'LEVER_CREATE_POSTING',
    output: [],
    inputs: [
      {
        id: 'text',
        title: 'Text',
        type: 'TEXTAREA',
        subtitle: 'Title of the job posting',
        required: true,
      },
      {
        id: 'categories',
        title: 'Categories',
        type: 'CODE',
        placeholder:
          '{\n  "team": "Platform",\n  "department": "Engineering",\n  "location": "San Francisco",\n  "commitment": "Full-time"\n}',
        required: true,
      },
      {
        id: 'performAs',
        title: 'Perform As',
        type: 'TEXTAREA',
        subtitle:
          'Perform this create on behalf of a specified user. The creator and the owner of this Opportunity will default to the perform_as user. The owner can be explicitly specified in the request body if you want the owner to be a different person.',
      },
      {
        id: 'state',
        title: 'State',
        type: 'ENUM',
        subtitle: "Posting's current status.",
        values: [
          'published',
          'internal',
          'closed',
          'draft',
          'pending',
          'rejected',
        ],
      },
      {
        id: 'distributionChannels',
        title: 'Distribution Channels',
        type: 'TEXTAREA',
        subtitle:
          'Job sites that a published posting appears on. defaults to public and internal',
        placeholder: '["internal","public"]',
      },
      {
        id: 'owner',
        title: 'Owner',
        type: 'TEXTAREA',
        subtitle:
          'The user ID of the posting owner. The posting owner is the individual who is directly responsible for managing all candidates who are applied to that role. If no ID is provided, the posting owner defaults to perform_as.',
      },
      {
        id: 'hiringManager',
        title: 'Hiring Manager',
        type: 'TEXTAREA',
        subtitle: 'The user ID of the hiring manager for the job posting.',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n    "workplaceType": "onsite",\n    "tags": ["engineering","high-priority"]\n}',
      },
    ],
  },
  {
    title: 'Update Posting',
    name: 'LEVER_UPDATE_POSTING',
    output: [],
    inputs: [
      {
        id: 'postingId',
        title: 'Posting ID',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'text',
        title: 'Text',
        type: 'TEXTAREA',
        subtitle: 'Title of the job posting',
      },
      {
        id: 'categories',
        title: 'Categories',
        type: 'CODE',
        placeholder:
          '{\n  "team": "Platform",\n  "department": "Engineering",\n  "location": "San Francisco",\n  "commitment": "Full-time"\n}',
      },
      {
        id: 'performAs',
        title: 'Perform As',
        type: 'TEXTAREA',
        subtitle:
          'Perform this create on behalf of a specified user. The creator and the owner of this Opportunity will default to the perform_as user. The owner can be explicitly specified in the request body if you want the owner to be a different person.',
      },
      {
        id: 'state',
        title: 'State',
        type: 'ENUM',
        subtitle: "Posting's current status.",
        values: [
          'published',
          'internal',
          'closed',
          'draft',
          'pending',
          'rejected',
        ],
      },
      {
        id: 'distributionChannels',
        title: 'Distribution Channels',
        type: 'TEXTAREA',
        subtitle:
          'Job sites that a published posting appears on. defaults to public and internal',
        placeholder: '["internal","public"]',
      },
      {
        id: 'additionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder:
          '{\n    "workplaceType": "onsite",\n    "tags": ["engineering","high-priority"]\n}',
      },
    ],
  },
  {
    title: 'Get Posting by ID',
    name: 'LEVER_GET_POSTING_BY_ID',
    output: [],
    inputs: [
      {
        id: 'postingId',
        title: 'Posting ID',
        type: 'TEXTAREA',
        required: true,
      },
    ],
  },
  {
    title: 'Get Postings',
    name: 'LEVER_GET_POSTINGS',
    output: [],
    inputs: [],
  },
];

/**
 * integration class for lever
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'lever',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create a Opportunity
     * method for LEVER_CREATE_OPPORTUNITY
     */
    createOpportunity: (inputs, options) => {
      return new ActionStep({
        intent: 'LEVER_CREATE_OPPORTUNITY',
        actionType: 'lever',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Opportunity by ID
     * method for LEVER_GET_OPPORTUNITY_BY_ID
     */
    getOpportunityById: (inputs, options) => {
      return new ActionStep({
        intent: 'LEVER_GET_OPPORTUNITY_BY_ID',
        actionType: 'lever',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Opportunities
     * method for LEVER_GET_OPPORTUNITIES
     */
    getOpportunities: (inputs, options) => {
      return new ActionStep({
        intent: 'LEVER_GET_OPPORTUNITIES',
        actionType: 'lever',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Contact
     * method for LEVER_UPDATE_CONTACT
     */
    updateContact: (inputs, options) => {
      return new ActionStep({
        intent: 'LEVER_UPDATE_CONTACT',
        actionType: 'lever',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Contact by ID
     * method for LEVER_GET_CONTACT_BY_ID
     */
    getContactById: (inputs, options) => {
      return new ActionStep({
        intent: 'LEVER_GET_CONTACT_BY_ID',
        actionType: 'lever',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create a Posting
     * method for LEVER_CREATE_POSTING
     */
    createPosting: (inputs, options) => {
      return new ActionStep({
        intent: 'LEVER_CREATE_POSTING',
        actionType: 'lever',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Posting
     * method for LEVER_UPDATE_POSTING
     */
    updatePosting: (inputs, options) => {
      return new ActionStep({
        intent: 'LEVER_UPDATE_POSTING',
        actionType: 'lever',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Posting by ID
     * method for LEVER_GET_POSTING_BY_ID
     */
    getPostingById: (inputs, options) => {
      return new ActionStep({
        intent: 'LEVER_GET_POSTING_BY_ID',
        actionType: 'lever',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Postings
     * method for LEVER_GET_POSTINGS
     */
    getPostings: (inputs, options) => {
      return new ActionStep({
        intent: 'LEVER_GET_POSTINGS',
        actionType: 'lever',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Candidate Created
     * method for LEVER_TRIGGER_CANDIDATE_CREATED
     */
    candidateCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'LEVER_TRIGGER_CANDIDATE_CREATED',
        actionType: 'lever',
        parameters: inputs,
      });
    },
    /**
     * Candidate Updated
     * method for LEVER_TRIGGER_CANDIDATE_UPDATED
     */
    candidateUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'LEVER_TRIGGER_CANDIDATE_UPDATED',
        actionType: 'lever',
        parameters: inputs,
      });
    },
    /**
     * Posting Created
     * method for LEVER_TRIGGER_POSTING_CREATED
     */
    postingCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'LEVER_TRIGGER_POSTING_CREATED',
        actionType: 'lever',
        parameters: inputs,
      });
    },
    /**
     * Posting Updated
     * method for LEVER_TRIGGER_POSTING_UPDATED
     */
    postingUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'LEVER_TRIGGER_POSTING_UPDATED',
        actionType: 'lever',
        parameters: inputs,
      });
    },
  },
};
