const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for todoist
 */
exports.inputs = [];

/**
 * triggers for todoist
 */
exports.triggers = [];

/**
 * intents for todoist
 */
exports.intents = [
  {
    title: 'Create Project',
    name: 'TODOIST_CREATE_PROJECT',
    output: [],
    inputs: [
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
        subtitle: 'Name of the project.',
        placeholder: 'Akatsuki',
        required: true,
      },
      {
        id: 'parent_id',
        title: 'Parent ID',
        type: 'TEXTAREA',
        subtitle: 'Parent project ID.',
        placeholder: '1064843106',
      },
      {
        id: 'color',
        title: 'Color',
        type: 'TEXTAREA',
        placeholder: 'charcoal',
      },
      {
        id: 'is_favorite',
        title: 'Is Favorite',
        type: 'BOOLEAN_INPUT',
        subtitle: 'Whether the project is a favorite.',
      },
      {
        id: 'projectAdditionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder: '{\n  color: "red"\n}',
      },
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'TEXT',
      },
    ],
  },
  {
    title: 'Update Project',
    name: 'TODOIST_UPDATE_PROJECT',
    output: [],
    inputs: [
      {
        id: 'project_id',
        title: 'Project ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the Project ID.',
        required: true,
      },
      {
        id: 'name',
        title: 'Name',
        type: 'TEXTAREA',
        subtitle: 'Name of the project.',
        placeholder: 'Akatsuki',
      },
      {
        id: 'color',
        title: 'Color',
        type: 'TEXTAREA',
        placeholder: 'charcoal',
      },
      {
        id: 'is_favorite',
        title: 'Is Favorite',
        type: 'BOOLEAN_INPUT',
        subtitle: 'Whether the project is a favorite.',
      },
      {
        id: 'projectAdditionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder: '{\n  color: "red"\n}',
      },
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'TEXT',
      },
    ],
  },
  {
    title: 'Get Project by ID',
    name: 'TODOIST_GET_PROJECT_BY_ID',
    output: [],
    inputs: [
      {
        id: 'project_id',
        title: 'Project ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the Project ID.',
        required: true,
      },
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'TEXT',
      },
    ],
  },
  {
    title: 'Get All Projects',
    name: 'TODOIST_GET_ALL_PROJECTS',
    output: [],
    inputs: [
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'TEXT',
      },
    ],
  },
  {
    title: 'Delete Project',
    name: 'TODOIST_DELETE_PROJECT',
    output: [],
    inputs: [
      {
        id: 'project_id',
        title: 'Project ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the Project ID.',
        required: true,
      },
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'TEXT',
      },
    ],
  },
  {
    title: 'Create Task',
    name: 'TODOIST_CREATE_TASK',
    output: [],
    inputs: [
      {
        id: 'content',
        title: 'Content',
        type: 'TEXTAREA',
        placeholder: 'Buy Sword',
        required: true,
      },
      {
        id: 'description',
        title: 'Description',
        type: 'TEXTAREA',
        subtitle: 'A description for the task.',
        placeholder: 'Pirate King',
      },
      {
        id: 'project_id',
        title: 'Project ID',
        type: 'TEXTAREA',
        subtitle: "Task project ID. If not set, task is put to user's Inbox.",
      },
      {
        id: 'section_id',
        title: 'Section ID',
        type: 'TEXTAREA',
        subtitle: 'ID of section to put task into.',
      },
      {
        id: 'parent_id',
        title: 'Parent ID',
        type: 'TEXTAREA',
        subtitle: 'Parent task ID.',
        placeholder: '1064843106',
      },
      {
        id: 'due_string',
        title: 'Due String',
        type: 'TEXTAREA',
        placeholder: 'tomorrow at 12:00',
      },
      {
        id: 'due_date',
        title: 'Due Date',
        type: 'TEXTAREA',
        subtitle:
          'Specific date in YYYY-MM-DD format relative to user’s timezone.',
      },
      {
        id: 'priority',
        title: 'Priority',
        type: 'TEXTAREA',
        subtitle: 'Task priority from 1 (normal) to 4 (urgent).',
        placeholder: '4',
      },
      {
        id: 'taskAdditionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder: '{\n  assignee_id: "a70bdf0f"\n}',
      },
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'TEXT',
      },
    ],
  },
  {
    title: 'Update Task',
    name: 'TODOIST_UPDATE_TASK',
    output: [],
    inputs: [
      {
        id: 'task_id',
        title: 'Task ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the Task ID.',
        required: true,
      },
      {
        id: 'content',
        title: 'Content',
        type: 'TEXTAREA',
        placeholder: 'Buy Sword',
      },
      {
        id: 'description',
        title: 'Description',
        type: 'TEXTAREA',
        subtitle: 'A description for the task.',
        placeholder: 'Pirate King',
      },
      {
        id: 'due_string',
        title: 'Due String',
        type: 'TEXTAREA',
        placeholder: 'tomorrow at 12:00',
      },
      {
        id: 'due_date',
        title: 'Due Date',
        type: 'TEXTAREA',
        subtitle:
          'Specific date in YYYY-MM-DD format relative to user’s timezone.',
      },
      {
        id: 'priority',
        title: 'Priority',
        type: 'TEXTAREA',
        subtitle: 'Task priority from 1 (normal) to 4 (urgent).',
        placeholder: '4',
      },
      {
        id: 'taskAdditionalFields',
        title: 'Additional Fields',
        type: 'CODE',
        placeholder: '{\n  assignee_id: "a70bdf0f"\n}',
      },
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'TEXT',
      },
    ],
  },
  {
    title: 'Get Task by ID',
    name: 'TODOIST_GET_TASK_BY_ID',
    output: [],
    inputs: [
      {
        id: 'task_id',
        title: 'Task ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the Task ID.',
        required: true,
      },
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'TEXT',
      },
    ],
  },
  {
    title: 'Search Tasks',
    name: 'TODOIST_SEARCH_TASKS',
    output: [],
    inputs: [
      {
        id: 'queryTerm',
        title: 'Query Term',
        type: 'TEXTAREA',
        placeholder: 'search:Buy Milk',
      },
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'TEXT',
      },
    ],
  },
  {
    title: 'Close Task',
    name: 'TODOIST_CLOSE_TASK',
    output: [],
    inputs: [
      {
        id: 'task_id',
        title: 'Task ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the Task ID.',
        required: true,
      },
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'TEXT',
      },
    ],
  },
  {
    title: 'Delete Task',
    name: 'TODOIST_DELETE_TASK',
    output: [],
    inputs: [
      {
        id: 'task_id',
        title: 'Task ID',
        type: 'TEXTAREA',
        subtitle: 'Specify the Task ID.',
        required: true,
      },
      {
        id: 'recordType',
        title: 'Record Type',
        type: 'TEXT',
      },
    ],
  },
];

/**
 * integration class for todoist
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'todoist',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Project
     * method for TODOIST_CREATE_PROJECT
     */
    createProject: (inputs, options) => {
      return new ActionStep({
        intent: 'TODOIST_CREATE_PROJECT',
        actionType: 'todoist',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Project
     * method for TODOIST_UPDATE_PROJECT
     */
    updateProject: (inputs, options) => {
      return new ActionStep({
        intent: 'TODOIST_UPDATE_PROJECT',
        actionType: 'todoist',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Project by ID
     * method for TODOIST_GET_PROJECT_BY_ID
     */
    getProjectById: (inputs, options) => {
      return new ActionStep({
        intent: 'TODOIST_GET_PROJECT_BY_ID',
        actionType: 'todoist',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get All Projects
     * method for TODOIST_GET_ALL_PROJECTS
     */
    getAllProjects: (inputs, options) => {
      return new ActionStep({
        intent: 'TODOIST_GET_ALL_PROJECTS',
        actionType: 'todoist',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Project
     * method for TODOIST_DELETE_PROJECT
     */
    deleteProject: (inputs, options) => {
      return new ActionStep({
        intent: 'TODOIST_DELETE_PROJECT',
        actionType: 'todoist',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create Task
     * method for TODOIST_CREATE_TASK
     */
    createTask: (inputs, options) => {
      return new ActionStep({
        intent: 'TODOIST_CREATE_TASK',
        actionType: 'todoist',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Task
     * method for TODOIST_UPDATE_TASK
     */
    updateTask: (inputs, options) => {
      return new ActionStep({
        intent: 'TODOIST_UPDATE_TASK',
        actionType: 'todoist',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Task by ID
     * method for TODOIST_GET_TASK_BY_ID
     */
    getTaskById: (inputs, options) => {
      return new ActionStep({
        intent: 'TODOIST_GET_TASK_BY_ID',
        actionType: 'todoist',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Search Tasks
     * method for TODOIST_SEARCH_TASKS
     */
    searchTasks: (inputs, options) => {
      return new ActionStep({
        intent: 'TODOIST_SEARCH_TASKS',
        actionType: 'todoist',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Close Task
     * method for TODOIST_CLOSE_TASK
     */
    closeTask: (inputs, options) => {
      return new ActionStep({
        intent: 'TODOIST_CLOSE_TASK',
        actionType: 'todoist',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Task
     * method for TODOIST_DELETE_TASK
     */
    deleteTask: (inputs, options) => {
      return new ActionStep({
        intent: 'TODOIST_DELETE_TASK',
        actionType: 'todoist',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {},
};
