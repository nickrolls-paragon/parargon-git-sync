import { ActionStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';

type ITodoistIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type: 'text' | 'number' | 'email' | 'url' | 'boolean' | 'password';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, ITodoistIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for todoist
 */
export type ITodoistIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Project
     * method for TODOIST_CREATE_PROJECT
     */
    createProject: (
      inputs: IntentToInputOutput['TODOIST_CREATE_PROJECT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['TODOIST_CREATE_PROJECT'][0],
      IntentToInputOutput['TODOIST_CREATE_PROJECT'][1]
    >;

    /**
     * Update Project
     * method for TODOIST_UPDATE_PROJECT
     */
    updateProject: (
      inputs: IntentToInputOutput['TODOIST_UPDATE_PROJECT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['TODOIST_UPDATE_PROJECT'][0],
      IntentToInputOutput['TODOIST_UPDATE_PROJECT'][1]
    >;

    /**
     * Get Project by ID
     * method for TODOIST_GET_PROJECT_BY_ID
     */
    getProjectById: (
      inputs: IntentToInputOutput['TODOIST_GET_PROJECT_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['TODOIST_GET_PROJECT_BY_ID'][0],
      IntentToInputOutput['TODOIST_GET_PROJECT_BY_ID'][1]
    >;

    /**
     * Get All Projects
     * method for TODOIST_GET_ALL_PROJECTS
     */
    getAllProjects: (
      inputs: IntentToInputOutput['TODOIST_GET_ALL_PROJECTS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['TODOIST_GET_ALL_PROJECTS'][0],
      IntentToInputOutput['TODOIST_GET_ALL_PROJECTS'][1]
    >;

    /**
     * Delete Project
     * method for TODOIST_DELETE_PROJECT
     */
    deleteProject: (
      inputs: IntentToInputOutput['TODOIST_DELETE_PROJECT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['TODOIST_DELETE_PROJECT'][0],
      IntentToInputOutput['TODOIST_DELETE_PROJECT'][1]
    >;

    /**
     * Create Task
     * method for TODOIST_CREATE_TASK
     */
    createTask: (
      inputs: IntentToInputOutput['TODOIST_CREATE_TASK'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['TODOIST_CREATE_TASK'][0],
      IntentToInputOutput['TODOIST_CREATE_TASK'][1]
    >;

    /**
     * Update Task
     * method for TODOIST_UPDATE_TASK
     */
    updateTask: (
      inputs: IntentToInputOutput['TODOIST_UPDATE_TASK'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['TODOIST_UPDATE_TASK'][0],
      IntentToInputOutput['TODOIST_UPDATE_TASK'][1]
    >;

    /**
     * Get Task by ID
     * method for TODOIST_GET_TASK_BY_ID
     */
    getTaskById: (
      inputs: IntentToInputOutput['TODOIST_GET_TASK_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['TODOIST_GET_TASK_BY_ID'][0],
      IntentToInputOutput['TODOIST_GET_TASK_BY_ID'][1]
    >;

    /**
     * Search Tasks
     * method for TODOIST_SEARCH_TASKS
     */
    searchTasks: (
      inputs: IntentToInputOutput['TODOIST_SEARCH_TASKS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['TODOIST_SEARCH_TASKS'][0],
      IntentToInputOutput['TODOIST_SEARCH_TASKS'][1]
    >;

    /**
     * Close Task
     * method for TODOIST_CLOSE_TASK
     */
    closeTask: (
      inputs: IntentToInputOutput['TODOIST_CLOSE_TASK'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['TODOIST_CLOSE_TASK'][0],
      IntentToInputOutput['TODOIST_CLOSE_TASK'][1]
    >;

    /**
     * Delete Task
     * method for TODOIST_DELETE_TASK
     */
    deleteTask: (
      inputs: IntentToInputOutput['TODOIST_DELETE_TASK'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['TODOIST_DELETE_TASK'][0],
      IntentToInputOutput['TODOIST_DELETE_TASK'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {};
};
