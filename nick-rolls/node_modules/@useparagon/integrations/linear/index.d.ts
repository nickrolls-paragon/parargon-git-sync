import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
  UserDefinedComboInputOptions,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type ILinearIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type:
        | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'boolean'
        | 'password'
        | 'team'
        | 'assignee'
        | 'project';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | ({
      type: 'issue_label' | 'issue_status';
    } & UserDefinedComboInputOptions)
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
  team: string;
  issue_label: {
    team: string;
    labels: string;
  };
  issue_status: {
    team: string;
    status: string;
  };
  assignee: string;
  project: string;
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, ILinearIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for linear
 */
export type ILinearIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Issue
     * method for LINEAR_CREATE_ISSUE
     */
    createIssue: (
      inputs: IntentToInputOutput['LINEAR_CREATE_ISSUE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_CREATE_ISSUE'][0],
      IntentToInputOutput['LINEAR_CREATE_ISSUE'][1]
    >;

    /**
     * Update Issue
     * method for LINEAR_UPDATE_ISSUE
     */
    updateIssue: (
      inputs: IntentToInputOutput['LINEAR_UPDATE_ISSUE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_UPDATE_ISSUE'][0],
      IntentToInputOutput['LINEAR_UPDATE_ISSUE'][1]
    >;

    /**
     * Get Issue by ID
     * method for LINEAR_GET_ISSUE_BY_ID
     */
    getIssueById: (
      inputs: IntentToInputOutput['LINEAR_GET_ISSUE_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_GET_ISSUE_BY_ID'][0],
      IntentToInputOutput['LINEAR_GET_ISSUE_BY_ID'][1]
    >;

    /**
     * Get Issue by Issue Identifier
     * method for LINEAR_GET_ISSUE_BY_ISSUE_IDENTIFIER
     */
    getIssueByIssueIdentifier: (
      inputs: IntentToInputOutput['LINEAR_GET_ISSUE_BY_ISSUE_IDENTIFIER'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_GET_ISSUE_BY_ISSUE_IDENTIFIER'][0],
      IntentToInputOutput['LINEAR_GET_ISSUE_BY_ISSUE_IDENTIFIER'][1]
    >;

    /**
     * Search Issues
     * method for LINEAR_SEARCH_ISSUE
     */
    searchIssue: (
      inputs: IntentToInputOutput['LINEAR_SEARCH_ISSUE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_SEARCH_ISSUE'][0],
      IntentToInputOutput['LINEAR_SEARCH_ISSUE'][1]
    >;

    /**
     * Delete Issue
     * method for LINEAR_DELETE_ISSUE
     */
    deleteIssue: (
      inputs: IntentToInputOutput['LINEAR_DELETE_ISSUE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_DELETE_ISSUE'][0],
      IntentToInputOutput['LINEAR_DELETE_ISSUE'][1]
    >;

    /**
     * Archive Issue
     * method for LINEAR_ARCHIVE_ISSUE
     */
    archiveIssue: (
      inputs: IntentToInputOutput['LINEAR_ARCHIVE_ISSUE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_ARCHIVE_ISSUE'][0],
      IntentToInputOutput['LINEAR_ARCHIVE_ISSUE'][1]
    >;

    /**
     * Create Sub-issue
     * method for LINEAR_CREATE_SUB_ISSUE
     */
    createSubIssue: (
      inputs: IntentToInputOutput['LINEAR_CREATE_SUB_ISSUE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_CREATE_SUB_ISSUE'][0],
      IntentToInputOutput['LINEAR_CREATE_SUB_ISSUE'][1]
    >;

    /**
     * Create Project
     * method for LINEAR_CREATE_PROJECT
     */
    createProject: (
      inputs: IntentToInputOutput['LINEAR_CREATE_PROJECT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_CREATE_PROJECT'][0],
      IntentToInputOutput['LINEAR_CREATE_PROJECT'][1]
    >;

    /**
     * Update Project
     * method for LINEAR_UPDATE_PROJECT
     */
    updateProject: (
      inputs: IntentToInputOutput['LINEAR_UPDATE_PROJECT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_UPDATE_PROJECT'][0],
      IntentToInputOutput['LINEAR_UPDATE_PROJECT'][1]
    >;

    /**
     * Get Project by ID
     * method for LINEAR_GET_PROJECT_BY_ID
     */
    getProjectById: (
      inputs: IntentToInputOutput['LINEAR_GET_PROJECT_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_GET_PROJECT_BY_ID'][0],
      IntentToInputOutput['LINEAR_GET_PROJECT_BY_ID'][1]
    >;

    /**
     * Delete Project
     * method for LINEAR_DELETE_PROJECT
     */
    deleteProject: (
      inputs: IntentToInputOutput['LINEAR_DELETE_PROJECT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_DELETE_PROJECT'][0],
      IntentToInputOutput['LINEAR_DELETE_PROJECT'][1]
    >;

    /**
     * Search Teams
     * method for LINEAR_SEARCH_TEAMS
     */
    searchTeams: (
      inputs: IntentToInputOutput['LINEAR_SEARCH_TEAMS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['LINEAR_SEARCH_TEAMS'][0],
      IntentToInputOutput['LINEAR_SEARCH_TEAMS'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Trigger when an issue is created
     * method for LINEAR_TRIGGER_ISSUE_CREATED
     */
    issueCreated: (
      inputs: TriggerIntentToInputOutput['LINEAR_TRIGGER_ISSUE_CREATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['LINEAR_TRIGGER_ISSUE_CREATED'][0],
      TriggerIntentToInputOutput['LINEAR_TRIGGER_ISSUE_CREATED'][1]
    >;

    /**
     * Trigger when an issueâ€™s status is updated
     * method for LINEAR_TRIGGER_STATUS_UPDATED
     */
    statusUpdated: (
      inputs: TriggerIntentToInputOutput['LINEAR_TRIGGER_STATUS_UPDATED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['LINEAR_TRIGGER_STATUS_UPDATED'][0],
      TriggerIntentToInputOutput['LINEAR_TRIGGER_STATUS_UPDATED'][1]
    >;

    /**
     * Trigger when a certain label was added or removed from an issue
     * method for LINEAR_TRIGGER_LABEL_ADDED
     */
    labelAdded: (
      inputs: TriggerIntentToInputOutput['LINEAR_TRIGGER_LABEL_ADDED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['LINEAR_TRIGGER_LABEL_ADDED'][0],
      TriggerIntentToInputOutput['LINEAR_TRIGGER_LABEL_ADDED'][1]
    >;

    /**
     * Trigger when an issue is deleted
     * method for LINEAR_TRIGGER_ISSUE_DELETED
     */
    issueDeleted: (
      inputs: TriggerIntentToInputOutput['LINEAR_TRIGGER_ISSUE_DELETED'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['LINEAR_TRIGGER_ISSUE_DELETED'][0],
      TriggerIntentToInputOutput['LINEAR_TRIGGER_ISSUE_DELETED'][1]
    >;
  };
};
