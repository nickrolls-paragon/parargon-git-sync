const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for quickbooks
 */
exports.inputs = [
  {
    id: 'vendors',
    title: 'Vendor',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'accounts',
    title: 'Account',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'mapQuickBooksFields',
    title: 'Field Mapping',
    type: 'FIELD_MAPPER_DATA_SOURCE',
    fieldSource: {
      id: 'getFields',
      title: 'Fields',
      type: 'DYNAMIC_DATA_SOURCE',
    },
    recordSource: {
      id: 'recordType',
      title: 'Record Type',
      type: 'DYNAMIC_DATA_SOURCE',
    },
  },
];

/**
 * triggers for quickbooks
 */
exports.triggers = [
  {
    title: 'New Account',
    name: 'QUICKBOOKS_TRIGGER_ACCOUNT_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'New Customer',
    name: 'QUICKBOOKS_TRIGGER_CUSTOMER_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Customer Updated',
    name: 'QUICKBOOKS_TRIGGER_CUSTOMER_UPDATED',
    output: [],
    inputs: [],
  },
  {
    title: 'New Invoice',
    name: 'QUICKBOOKS_TRIGGER_INVOICE_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Invoice Updated',
    name: 'QUICKBOOKS_TRIGGER_INVOICE_UPDATED',
    output: [],
    inputs: [],
  },
  {
    title: 'New Purchase',
    name: 'QUICKBOOKS_TRIGGER_PURCHASE_CREATED',
    output: [],
    inputs: [],
  },
  {
    title: 'Updated Purchase',
    name: 'QUICKBOOKS_TRIGGER_PURCHASE_UPDATED',
    output: [],
    inputs: [],
  },
];

/**
 * intents for quickbooks
 */
exports.intents = [
  {
    title: 'Get accounts',
    name: 'QUICKBOOKS_GET_ACCOUNTS',
    output: [],
    inputs: [
      {
        id: 'accountsFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Get accounts that match the specified filters.',
        placeholder: 'field',
        supportedKeys: [
          'Id',
          'name',
          'SubAccount',
          'FullyQualifiedName',
          'ParentRef',
          'Active',
          'Classification',
          'AccountType',
          'AccountSubType',
          'CurrentBalance',
          'CurrentBalanceWithSubAccounts',
          'MetaData.LastUpdatedTime',
          'MetaData.CreateTime',
        ],
        supportedOperators: [
          '$numberLessThan',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberDoesNotEqual',
          '$numberGreaterThanOrEqualTo',
          '$numberLessThanOrEqualTo',
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$stringContains',
          '$dateTimeEquals',
          '$dateTimeBefore',
          '$dateTimeAfter',
          '$stringIsIn',
          '$stringGreaterThan',
          '$stringLessThan',
          '$booleanTrue',
          '$booleanFalse',
        ],
      },
    ],
  },
  {
    title: 'Get customers',
    name: 'QUICKBOOKS_GET_CUSTOMERS',
    output: [],
    inputs: [
      {
        id: 'customersFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Get customers that match the specified filters.',
        placeholder: 'field',
        supportedKeys: [
          'Active',
          'Id',
          'Job',
          'Balance',
          'BalanceWithJobs',
          'GivenName',
          'FamilyName',
          'FullyQualifiedName',
          'CompanyName',
          'DisplayName',
          'PrintOnCheckName',
          'MetaData.LastUpdatedTime',
          'MetaData.CreateTime',
          'PrimaryEmailAddr',
        ],
        supportedOperators: [
          '$numberLessThan',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberDoesNotEqual',
          '$numberGreaterThanOrEqualTo',
          '$numberLessThanOrEqualTo',
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$stringContains',
          '$dateTimeEquals',
          '$dateTimeBefore',
          '$dateTimeAfter',
          '$stringIsIn',
          '$stringGreaterThan',
          '$stringLessThan',
          '$booleanTrue',
          '$booleanFalse',
        ],
      },
    ],
  },
  {
    title: 'Create customer',
    name: 'QUICKBOOKS_CREATE_CUSTOMER',
    output: [],
    inputs: [
      {
        id: 'givenName',
        title: 'Given name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'familyName',
        title: 'Family name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'displayName',
        title: 'Display name',
        type: 'TEXTAREA',
      },
      {
        id: 'email',
        title: 'Email address',
        type: 'TEXTAREA',
      },
      {
        id: 'phoneNumber',
        title: 'Phone number',
        type: 'TEXTAREA',
      },
      {
        id: 'billingAddressLine1',
        title: 'Billing street address',
        type: 'TEXTAREA',
      },
      {
        id: 'billingAddressLine2',
        title: 'Billing street address line 2',
        type: 'TEXTAREA',
      },
      {
        id: 'billingCity',
        title: 'Billing city',
        type: 'TEXTAREA',
      },
      {
        id: 'billingStateSubdivisionCode',
        title: 'Billing State or country subdivision code',
        type: 'TEXTAREA',
      },
      {
        id: 'billingCountry',
        title: 'Billing country',
        type: 'TEXTAREA',
      },
      {
        id: 'billingPostalCode',
        title: 'Billing postal code',
        type: 'TEXTAREA',
      },
    ],
  },
  {
    title: 'Update customer',
    name: 'QUICKBOOKS_UPDATE_CUSTOMER',
    output: [],
    inputs: [
      {
        id: 'updateCustomerId',
        title: 'Customer',
        type: 'TEXTAREA',
        subtitle: 'The ID of the customer to update.',
        placeholder: 'Customer ID',
        required: true,
      },
      {
        id: 'givenName',
        title: 'Given name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'familyName',
        title: 'Family name',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'displayName',
        title: 'Display name',
        type: 'TEXTAREA',
      },
      {
        id: 'email',
        title: 'Email address',
        type: 'TEXTAREA',
      },
      {
        id: 'phoneNumber',
        title: 'Phone number',
        type: 'TEXTAREA',
      },
      {
        id: 'billingAddressLine1',
        title: 'Billing street address',
        type: 'TEXTAREA',
      },
      {
        id: 'billingAddressLine2',
        title: 'Billing street address line 2',
        type: 'TEXTAREA',
      },
      {
        id: 'billingCity',
        title: 'Billing city',
        type: 'TEXTAREA',
      },
      {
        id: 'billingStateSubdivisionCode',
        title: 'Billing State or country subdivision code',
        type: 'TEXTAREA',
      },
      {
        id: 'billingCountry',
        title: 'Billing country',
        type: 'TEXTAREA',
      },
      {
        id: 'billingPostalCode',
        title: 'Billing postal code',
        type: 'TEXTAREA',
      },
      {
        id: 'syncToken',
        title: 'Sync Token',
        type: 'TEXTAREA',
        subtitle:
          'Current version number of the object, which will be incremented for the update. The Sync Token value can be retrieved from any QuickBooks object. Defaults to incrementing the previous Sync Token value.',
      },
    ],
  },
  {
    title: 'Get invoices',
    name: 'QUICKBOOKS_GET_INVOICES',
    output: [],
    inputs: [
      {
        id: 'invoicesFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Get invoices that match the specified filters.',
        placeholder: 'field',
        supportedKeys: [
          'Id',
          'CustomerRef',
          'Balance',
          'TotalAmt',
          'TxnDate',
          'DocNumber',
          'SalesTermRef',
          'DueDate',
          'MetaData.LastUpdatedTime',
          'MetaData.CreateTime',
        ],
        supportedOperators: [
          '$numberLessThan',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberDoesNotEqual',
          '$numberGreaterThanOrEqualTo',
          '$numberLessThanOrEqualTo',
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$stringContains',
          '$dateTimeEquals',
          '$dateTimeBefore',
          '$dateTimeAfter',
          '$stringIsIn',
          '$stringGreaterThan',
          '$stringLessThan',
          '$booleanTrue',
          '$booleanFalse',
        ],
      },
    ],
  },
  {
    title: 'Create invoice',
    name: 'QUICKBOOKS_CREATE_INVOICE',
    output: [],
    inputs: [
      {
        id: 'CustomerId',
        title: 'Customer',
        type: 'TEXTAREA',
        subtitle: 'The customer this invoice is associated with.',
        placeholder: 'Customer ID',
        required: true,
      },
      {
        id: 'invoiceLinesV1',
        title: 'Line items',
        type: 'CODE',
        subtitle:
          'Enter an array of Line items including the description, quantity, and amount for each Line item.',
        placeholder:
          '[\n {\n      "DetailType": "SalesItemLineDetail", \n      "Amount": 100.0, \n      "SalesItemLineDetail": {\n        "ItemRef": {\n          "name": "Services", \n          "value": "1"\n        }\n      }\n  }\n]',
        required: true,
      },
      {
        id: 'customerMemo',
        title: 'Customer memo ',
        type: 'TEXTAREA',
        subtitle: 'Message to the customer that appears on their invoice.',
      },
      {
        id: 'currencyId',
        title: 'Currency',
        type: 'ENUM',
        values: [
          'AED',
          'AFN',
          'ALL',
          'AMD',
          'ANG',
          'AOA',
          'ARS',
          'AUD',
          'AWG',
          'AZN',
          'BAM',
          'BBD',
          'BDT',
          'BGN',
          'BHD',
          'BIF',
          'BMD',
          'BND',
          'BOB',
          'BRL',
          'BSD',
          'BTC',
          'BTN',
          'BWP',
          'BYR',
          'BZD',
          'CAD',
          'CDF',
          'CHF',
          'CLP',
          'CNY',
          'COP',
          'CRC',
          'CUP',
          'CVE',
          'CZK',
          'DJF',
          'DKK',
          'DOP',
          'DZD',
          'EGP',
          'ERN',
          'ETB',
          'EUR',
          'FJD',
          'FKP',
          'GBP',
          'GEL',
          'GHS',
          'GIP',
          'GMD',
          'GNF',
          'GTQ',
          'GYD',
          'HKD',
          'HNL',
          'HRK',
          'HTG',
          'HUF',
          'IDR',
          'ILS',
          'INR',
          'IQD',
          'IRR',
          'ISK',
          'JMD',
          'JOD',
          'JPY',
          'KES',
          'KHR',
          'KMF',
          'KPW',
          'KRW',
          'KWD',
          'KYD',
          'KZT',
          'LAK',
          'LBP',
          'LKR',
          'LRD',
          'LSL',
          'LTL',
          'LVL',
          'LYD',
          'MAD',
          'MDL',
          'MGA',
          'MKD',
          'MMK',
          'MNT',
          'MOP',
          'MRO',
          'MUR',
          'MVR',
          'MWK',
          'MXN',
          'MYR',
          'MZN',
          'NAD',
          'NGN',
          'NIO',
          'NOK',
          'NPR',
          'NZD',
          'OMR',
          'PAB',
          'PEN',
          'PGK',
          'PHP',
          'PKR',
          'PLN',
          'PYG',
          'QAR',
          'RON',
          'RSD',
          'RUB',
          'RWF',
          'SAR',
          'SBD',
          'SCR',
          'SDG',
          'SEK',
          'SGD',
          'SHP',
          'SLL',
          'SOS',
          'STD',
          'SVC',
          'SYP',
          'SZL',
          'THB',
          'TJS',
          'TMT',
          'TND',
          'TOP',
          'TRY',
          'TTD',
          'TWD',
          'TZS',
          'UAH',
          'UGX',
          'USD',
          'UYU',
          'UZS',
          'VEF',
          'VND',
          'VUV',
          'WST',
          'XAF',
          'XCD',
          'XOF',
          'XPF',
          'YER',
          'ZAR',
          'ZMW',
        ],
      },
    ],
  },
  {
    title: 'Update invoice',
    name: 'QUICKBOOKS_UPDATE_INVOICE',
    output: [],
    inputs: [
      {
        id: 'invoiceId',
        title: 'Invoice ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the invoice to update.',
        placeholder: 'Invoice ID',
        required: true,
      },
      {
        id: 'syncToken',
        title: 'Sync Token',
        type: 'TEXTAREA',
        subtitle:
          'Current version number of the object, which will be incremented for the update.  The Sync Token value can be retrieved from any QuickBooks object. Defaults to incrementing the previous Sync Token value.',
      },
      {
        id: 'customerMemo',
        title: 'Customer memo ',
        type: 'TEXTAREA',
        subtitle: 'Message to the customer that appears on their invoice.',
      },
    ],
  },
  {
    title: 'Send invoice',
    name: 'QUICKBOOKS_SEND_INVOICE',
    output: [],
    inputs: [
      {
        id: 'invoiceId',
        title: 'Invoice ID',
        type: 'TEXTAREA',
        placeholder: 'Enter invoice ID',
        required: true,
      },
      {
        id: 'email',
        title: 'Send to email address',
        type: 'TEXTAREA',
        subtitle:
          'Updates the invoice’s billing email address to the email provided. If left blank, sends to the invoice’s existing billing email address.',
        placeholder: 'name@example.com',
      },
    ],
  },
  {
    title: 'Get payments',
    name: 'QUICKBOOKS_GET_PAYMENTS',
    output: [],
    inputs: [
      {
        id: 'paymentsFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Get payments that match the specified filters.',
        placeholder: 'field',
        supportedKeys: [
          'Id',
          'CustomerRef',
          'TotalAmt',
          'TxnDate',
          'MetaData.LastUpdatedTime',
          'MetaData.CreateTime',
        ],
        supportedOperators: [
          '$numberLessThan',
          '$numberEquals',
          '$numberGreaterThan',
          '$numberDoesNotEqual',
          '$numberGreaterThanOrEqualTo',
          '$numberLessThanOrEqualTo',
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$stringContains',
          '$dateTimeEquals',
          '$dateTimeBefore',
          '$dateTimeAfter',
          '$stringIsIn',
          '$stringGreaterThan',
          '$stringLessThan',
          '$booleanTrue',
          '$booleanFalse',
        ],
      },
    ],
  },
  {
    title: 'Create payments',
    name: 'QUICKBOOKS_CREATE_PAYMENT',
    output: [],
    inputs: [
      {
        id: 'totalAmount',
        title: 'Total amount',
        type: 'TEXTAREA',
        placeholder: '25.0',
        required: true,
      },
      {
        id: 'customerId',
        title: 'Customer',
        type: 'TEXTAREA',
        subtitle: 'The Customer this payment is associated with.',
        placeholder: 'Customer ID',
        required: true,
      },
      {
        id: 'invoiceId',
        title: 'Linked invoice',
        type: 'TEXTAREA',
        subtitle: 'Applies this payment to an existing invoice in QuickBooks.',
        placeholder: 'Invoice ID',
        required: true,
      },
      {
        id: 'currencyId',
        title: 'Currency',
        type: 'ENUM',
        values: [
          'AED',
          'AFN',
          'ALL',
          'AMD',
          'ANG',
          'AOA',
          'ARS',
          'AUD',
          'AWG',
          'AZN',
          'BAM',
          'BBD',
          'BDT',
          'BGN',
          'BHD',
          'BIF',
          'BMD',
          'BND',
          'BOB',
          'BRL',
          'BSD',
          'BTC',
          'BTN',
          'BWP',
          'BYR',
          'BZD',
          'CAD',
          'CDF',
          'CHF',
          'CLP',
          'CNY',
          'COP',
          'CRC',
          'CUP',
          'CVE',
          'CZK',
          'DJF',
          'DKK',
          'DOP',
          'DZD',
          'EGP',
          'ERN',
          'ETB',
          'EUR',
          'FJD',
          'FKP',
          'GBP',
          'GEL',
          'GHS',
          'GIP',
          'GMD',
          'GNF',
          'GTQ',
          'GYD',
          'HKD',
          'HNL',
          'HRK',
          'HTG',
          'HUF',
          'IDR',
          'ILS',
          'INR',
          'IQD',
          'IRR',
          'ISK',
          'JMD',
          'JOD',
          'JPY',
          'KES',
          'KHR',
          'KMF',
          'KPW',
          'KRW',
          'KWD',
          'KYD',
          'KZT',
          'LAK',
          'LBP',
          'LKR',
          'LRD',
          'LSL',
          'LTL',
          'LVL',
          'LYD',
          'MAD',
          'MDL',
          'MGA',
          'MKD',
          'MMK',
          'MNT',
          'MOP',
          'MRO',
          'MUR',
          'MVR',
          'MWK',
          'MXN',
          'MYR',
          'MZN',
          'NAD',
          'NGN',
          'NIO',
          'NOK',
          'NPR',
          'NZD',
          'OMR',
          'PAB',
          'PEN',
          'PGK',
          'PHP',
          'PKR',
          'PLN',
          'PYG',
          'QAR',
          'RON',
          'RSD',
          'RUB',
          'RWF',
          'SAR',
          'SBD',
          'SCR',
          'SDG',
          'SEK',
          'SGD',
          'SHP',
          'SLL',
          'SOS',
          'STD',
          'SVC',
          'SYP',
          'SZL',
          'THB',
          'TJS',
          'TMT',
          'TND',
          'TOP',
          'TRY',
          'TTD',
          'TWD',
          'TZS',
          'UAH',
          'UGX',
          'USD',
          'UYU',
          'UZS',
          'VEF',
          'VND',
          'VUV',
          'WST',
          'XAF',
          'XCD',
          'XOF',
          'XPF',
          'YER',
          'ZAR',
          'ZMW',
        ],
      },
    ],
  },
];

/**
 * integration class for quickbooks
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'quickbooks',

  /**
   * action step methods
   */
  actions: {
    /**
     * Get accounts
     * method for QUICKBOOKS_GET_ACCOUNTS
     */
    getAccounts: (inputs, options) => {
      return new ActionStep({
        intent: 'QUICKBOOKS_GET_ACCOUNTS',
        actionType: 'quickbooks',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get customers
     * method for QUICKBOOKS_GET_CUSTOMERS
     */
    getCustomers: (inputs, options) => {
      return new ActionStep({
        intent: 'QUICKBOOKS_GET_CUSTOMERS',
        actionType: 'quickbooks',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create customer
     * method for QUICKBOOKS_CREATE_CUSTOMER
     */
    createCustomer: (inputs, options) => {
      return new ActionStep({
        intent: 'QUICKBOOKS_CREATE_CUSTOMER',
        actionType: 'quickbooks',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update customer
     * method for QUICKBOOKS_UPDATE_CUSTOMER
     */
    updateCustomer: (inputs, options) => {
      return new ActionStep({
        intent: 'QUICKBOOKS_UPDATE_CUSTOMER',
        actionType: 'quickbooks',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get invoices
     * method for QUICKBOOKS_GET_INVOICES
     */
    getInvoices: (inputs, options) => {
      return new ActionStep({
        intent: 'QUICKBOOKS_GET_INVOICES',
        actionType: 'quickbooks',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create invoice
     * method for QUICKBOOKS_CREATE_INVOICE
     */
    createInvoice: (inputs, options) => {
      return new ActionStep({
        intent: 'QUICKBOOKS_CREATE_INVOICE',
        actionType: 'quickbooks',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update invoice
     * method for QUICKBOOKS_UPDATE_INVOICE
     */
    updateInvoice: (inputs, options) => {
      return new ActionStep({
        intent: 'QUICKBOOKS_UPDATE_INVOICE',
        actionType: 'quickbooks',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Send invoice
     * method for QUICKBOOKS_SEND_INVOICE
     */
    sendInvoice: (inputs, options) => {
      return new ActionStep({
        intent: 'QUICKBOOKS_SEND_INVOICE',
        actionType: 'quickbooks',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get payments
     * method for QUICKBOOKS_GET_PAYMENTS
     */
    getPayments: (inputs, options) => {
      return new ActionStep({
        intent: 'QUICKBOOKS_GET_PAYMENTS',
        actionType: 'quickbooks',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Create payments
     * method for QUICKBOOKS_CREATE_PAYMENT
     */
    createPayment: (inputs, options) => {
      return new ActionStep({
        intent: 'QUICKBOOKS_CREATE_PAYMENT',
        actionType: 'quickbooks',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * New Account
     * method for QUICKBOOKS_TRIGGER_ACCOUNT_CREATED
     */
    accountCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'QUICKBOOKS_TRIGGER_ACCOUNT_CREATED',
        actionType: 'quickbooks',
        parameters: inputs,
      });
    },
    /**
     * New Customer
     * method for QUICKBOOKS_TRIGGER_CUSTOMER_CREATED
     */
    customerCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'QUICKBOOKS_TRIGGER_CUSTOMER_CREATED',
        actionType: 'quickbooks',
        parameters: inputs,
      });
    },
    /**
     * Customer Updated
     * method for QUICKBOOKS_TRIGGER_CUSTOMER_UPDATED
     */
    customerUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'QUICKBOOKS_TRIGGER_CUSTOMER_UPDATED',
        actionType: 'quickbooks',
        parameters: inputs,
      });
    },
    /**
     * New Invoice
     * method for QUICKBOOKS_TRIGGER_INVOICE_CREATED
     */
    invoiceCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'QUICKBOOKS_TRIGGER_INVOICE_CREATED',
        actionType: 'quickbooks',
        parameters: inputs,
      });
    },
    /**
     * Invoice Updated
     * method for QUICKBOOKS_TRIGGER_INVOICE_UPDATED
     */
    invoiceUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'QUICKBOOKS_TRIGGER_INVOICE_UPDATED',
        actionType: 'quickbooks',
        parameters: inputs,
      });
    },
    /**
     * New Purchase
     * method for QUICKBOOKS_TRIGGER_PURCHASE_CREATED
     */
    purchaseCreated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'QUICKBOOKS_TRIGGER_PURCHASE_CREATED',
        actionType: 'quickbooks',
        parameters: inputs,
      });
    },
    /**
     * Updated Purchase
     * method for QUICKBOOKS_TRIGGER_PURCHASE_UPDATED
     */
    purchaseUpdated: (inputs) => {
      return new ActionTriggerStep({
        intent: 'QUICKBOOKS_TRIGGER_PURCHASE_UPDATED',
        actionType: 'quickbooks',
        parameters: inputs,
      });
    },
  },
};
