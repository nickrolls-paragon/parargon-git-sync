import { ConditionalInput } from '@useparagon/core/steps/library/conditional';

/**
 * Get accounts intent type
 */
type QuickbooksGetAccounts = {
  /**
   * Filter search
   * Get accounts that match the specified filters.
   *
   * **Example**:
   * ```
   * field
   * ```
   */
  accountsFilterFormula?: ConditionalInput;
};

/**
 * Get customers intent type
 */
type QuickbooksGetCustomers = {
  /**
   * Filter search
   * Get customers that match the specified filters.
   *
   * **Example**:
   * ```
   * field
   * ```
   */
  customersFilterFormula?: ConditionalInput;
};

/**
 * Create customer intent type
 */
type QuickbooksCreateCustomer = {
  /**
   * Given name
   *
   */
  givenName: string;

  /**
   * Family name
   *
   */
  familyName: string;

  /**
   * Display name
   *
   */
  displayName?: string;

  /**
   * Email address
   *
   */
  email?: string;

  /**
   * Phone number
   *
   */
  phoneNumber?: string;

  /**
   * Billing street address
   *
   */
  billingAddressLine1?: string;

  /**
   * Billing street address line 2
   *
   */
  billingAddressLine2?: string;

  /**
   * Billing city
   *
   */
  billingCity?: string;

  /**
   * Billing State or country subdivision code
   *
   */
  billingStateSubdivisionCode?: string;

  /**
   * Billing country
   *
   */
  billingCountry?: string;

  /**
   * Billing postal code
   *
   */
  billingPostalCode?: string;
};

/**
 * Update customer intent type
 */
type QuickbooksUpdateCustomer = {
  /**
   * Customer
   * The ID of the customer to update.
   *
   * **Example**:
   * ```
   * Customer ID
   * ```
   */
  updateCustomerId: string;

  /**
   * Given name
   *
   */
  givenName: string;

  /**
   * Family name
   *
   */
  familyName: string;

  /**
   * Display name
   *
   */
  displayName?: string;

  /**
   * Email address
   *
   */
  email?: string;

  /**
   * Phone number
   *
   */
  phoneNumber?: string;

  /**
   * Billing street address
   *
   */
  billingAddressLine1?: string;

  /**
   * Billing street address line 2
   *
   */
  billingAddressLine2?: string;

  /**
   * Billing city
   *
   */
  billingCity?: string;

  /**
   * Billing State or country subdivision code
   *
   */
  billingStateSubdivisionCode?: string;

  /**
   * Billing country
   *
   */
  billingCountry?: string;

  /**
   * Billing postal code
   *
   */
  billingPostalCode?: string;

  /**
   * Sync Token
   * Current version number of the object, which will be incremented for the update. The Sync Token value can be retrieved from any QuickBooks object. Defaults to incrementing the previous Sync Token value.
   *
   */
  syncToken?: string;
};

/**
 * Get invoices intent type
 */
type QuickbooksGetInvoices = {
  /**
   * Filter search
   * Get invoices that match the specified filters.
   *
   * **Example**:
   * ```
   * field
   * ```
   */
  invoicesFilterFormula?: ConditionalInput;
};

/**
 * Create invoice intent type
 */
type QuickbooksCreateInvoice = {
  /**
   * Customer
   * The customer this invoice is associated with.
   *
   * **Example**:
   * ```
   * Customer ID
   * ```
   */
  CustomerId: string;

  /**
   * Line items
   * Enter an array of Line items including the description, quantity, and amount for each Line item.
   *
   * **Example**:
   * ```
   * [
   * {
   *      "DetailType": "SalesItemLineDetail",
   *      "Amount": 100.0,
   *      "SalesItemLineDetail": {
   *        "ItemRef": {
   *          "name": "Services",
   *          "value": "1"
   *        }
   *      }
   *  }
   *]
   * ```
   */
  invoiceLinesV1: string;

  /**
   * Customer memo
   * Message to the customer that appears on their invoice.
   *
   */
  customerMemo?: string;

  /**
   * Currency
   *
   */
  currencyId?:
    | 'AED'
    | 'AFN'
    | 'ALL'
    | 'AMD'
    | 'ANG'
    | 'AOA'
    | 'ARS'
    | 'AUD'
    | 'AWG'
    | 'AZN'
    | 'BAM'
    | 'BBD'
    | 'BDT'
    | 'BGN'
    | 'BHD'
    | 'BIF'
    | 'BMD'
    | 'BND'
    | 'BOB'
    | 'BRL'
    | 'BSD'
    | 'BTC'
    | 'BTN'
    | 'BWP'
    | 'BYR'
    | 'BZD'
    | 'CAD'
    | 'CDF'
    | 'CHF'
    | 'CLP'
    | 'CNY'
    | 'COP'
    | 'CRC'
    | 'CUP'
    | 'CVE'
    | 'CZK'
    | 'DJF'
    | 'DKK'
    | 'DOP'
    | 'DZD'
    | 'EGP'
    | 'ERN'
    | 'ETB'
    | 'EUR'
    | 'FJD'
    | 'FKP'
    | 'GBP'
    | 'GEL'
    | 'GHS'
    | 'GIP'
    | 'GMD'
    | 'GNF'
    | 'GTQ'
    | 'GYD'
    | 'HKD'
    | 'HNL'
    | 'HRK'
    | 'HTG'
    | 'HUF'
    | 'IDR'
    | 'ILS'
    | 'INR'
    | 'IQD'
    | 'IRR'
    | 'ISK'
    | 'JMD'
    | 'JOD'
    | 'JPY'
    | 'KES'
    | 'KHR'
    | 'KMF'
    | 'KPW'
    | 'KRW'
    | 'KWD'
    | 'KYD'
    | 'KZT'
    | 'LAK'
    | 'LBP'
    | 'LKR'
    | 'LRD'
    | 'LSL'
    | 'LTL'
    | 'LVL'
    | 'LYD'
    | 'MAD'
    | 'MDL'
    | 'MGA'
    | 'MKD'
    | 'MMK'
    | 'MNT'
    | 'MOP'
    | 'MRO'
    | 'MUR'
    | 'MVR'
    | 'MWK'
    | 'MXN'
    | 'MYR'
    | 'MZN'
    | 'NAD'
    | 'NGN'
    | 'NIO'
    | 'NOK'
    | 'NPR'
    | 'NZD'
    | 'OMR'
    | 'PAB'
    | 'PEN'
    | 'PGK'
    | 'PHP'
    | 'PKR'
    | 'PLN'
    | 'PYG'
    | 'QAR'
    | 'RON'
    | 'RSD'
    | 'RUB'
    | 'RWF'
    | 'SAR'
    | 'SBD'
    | 'SCR'
    | 'SDG'
    | 'SEK'
    | 'SGD'
    | 'SHP'
    | 'SLL'
    | 'SOS'
    | 'STD'
    | 'SVC'
    | 'SYP'
    | 'SZL'
    | 'THB'
    | 'TJS'
    | 'TMT'
    | 'TND'
    | 'TOP'
    | 'TRY'
    | 'TTD'
    | 'TWD'
    | 'TZS'
    | 'UAH'
    | 'UGX'
    | 'USD'
    | 'UYU'
    | 'UZS'
    | 'VEF'
    | 'VND'
    | 'VUV'
    | 'WST'
    | 'XAF'
    | 'XCD'
    | 'XOF'
    | 'XPF'
    | 'YER'
    | 'ZAR'
    | 'ZMW';
};

/**
 * Update invoice intent type
 */
type QuickbooksUpdateInvoice = {
  /**
   * Invoice ID
   * The ID of the invoice to update.
   *
   * **Example**:
   * ```
   * Invoice ID
   * ```
   */
  invoiceId: string;

  /**
   * Sync Token
   * Current version number of the object, which will be incremented for the update.  The Sync Token value can be retrieved from any QuickBooks object. Defaults to incrementing the previous Sync Token value.
   *
   */
  syncToken?: string;

  /**
   * Customer memo
   * Message to the customer that appears on their invoice.
   *
   */
  customerMemo?: string;
};

/**
 * Send invoice intent type
 */
type QuickbooksSendInvoice = {
  /**
   * Invoice ID
   *
   * **Example**:
   * ```
   * Enter invoice ID
   * ```
   */
  invoiceId: string;

  /**
   * Send to email address
   * Updates the invoice’s billing email address to the email provided. If left blank, sends to the invoice’s existing billing email address.
   *
   * **Example**:
   * ```
   * name@example.com
   * ```
   */
  email?: string;
};

/**
 * Get payments intent type
 */
type QuickbooksGetPayments = {
  /**
   * Filter search
   * Get payments that match the specified filters.
   *
   * **Example**:
   * ```
   * field
   * ```
   */
  paymentsFilterFormula?: ConditionalInput;
};

/**
 * Create payments intent type
 */
type QuickbooksCreatePayment = {
  /**
   * Total amount
   *
   * **Example**:
   * ```
   * 25.0
   * ```
   */
  totalAmount: string;

  /**
   * Customer
   * The Customer this payment is associated with.
   *
   * **Example**:
   * ```
   * Customer ID
   * ```
   */
  customerId: string;

  /**
   * Linked invoice
   * Applies this payment to an existing invoice in QuickBooks.
   *
   * **Example**:
   * ```
   * Invoice ID
   * ```
   */
  invoiceId: string;

  /**
   * Currency
   *
   */
  currencyId?:
    | 'AED'
    | 'AFN'
    | 'ALL'
    | 'AMD'
    | 'ANG'
    | 'AOA'
    | 'ARS'
    | 'AUD'
    | 'AWG'
    | 'AZN'
    | 'BAM'
    | 'BBD'
    | 'BDT'
    | 'BGN'
    | 'BHD'
    | 'BIF'
    | 'BMD'
    | 'BND'
    | 'BOB'
    | 'BRL'
    | 'BSD'
    | 'BTC'
    | 'BTN'
    | 'BWP'
    | 'BYR'
    | 'BZD'
    | 'CAD'
    | 'CDF'
    | 'CHF'
    | 'CLP'
    | 'CNY'
    | 'COP'
    | 'CRC'
    | 'CUP'
    | 'CVE'
    | 'CZK'
    | 'DJF'
    | 'DKK'
    | 'DOP'
    | 'DZD'
    | 'EGP'
    | 'ERN'
    | 'ETB'
    | 'EUR'
    | 'FJD'
    | 'FKP'
    | 'GBP'
    | 'GEL'
    | 'GHS'
    | 'GIP'
    | 'GMD'
    | 'GNF'
    | 'GTQ'
    | 'GYD'
    | 'HKD'
    | 'HNL'
    | 'HRK'
    | 'HTG'
    | 'HUF'
    | 'IDR'
    | 'ILS'
    | 'INR'
    | 'IQD'
    | 'IRR'
    | 'ISK'
    | 'JMD'
    | 'JOD'
    | 'JPY'
    | 'KES'
    | 'KHR'
    | 'KMF'
    | 'KPW'
    | 'KRW'
    | 'KWD'
    | 'KYD'
    | 'KZT'
    | 'LAK'
    | 'LBP'
    | 'LKR'
    | 'LRD'
    | 'LSL'
    | 'LTL'
    | 'LVL'
    | 'LYD'
    | 'MAD'
    | 'MDL'
    | 'MGA'
    | 'MKD'
    | 'MMK'
    | 'MNT'
    | 'MOP'
    | 'MRO'
    | 'MUR'
    | 'MVR'
    | 'MWK'
    | 'MXN'
    | 'MYR'
    | 'MZN'
    | 'NAD'
    | 'NGN'
    | 'NIO'
    | 'NOK'
    | 'NPR'
    | 'NZD'
    | 'OMR'
    | 'PAB'
    | 'PEN'
    | 'PGK'
    | 'PHP'
    | 'PKR'
    | 'PLN'
    | 'PYG'
    | 'QAR'
    | 'RON'
    | 'RSD'
    | 'RUB'
    | 'RWF'
    | 'SAR'
    | 'SBD'
    | 'SCR'
    | 'SDG'
    | 'SEK'
    | 'SGD'
    | 'SHP'
    | 'SLL'
    | 'SOS'
    | 'STD'
    | 'SVC'
    | 'SYP'
    | 'SZL'
    | 'THB'
    | 'TJS'
    | 'TMT'
    | 'TND'
    | 'TOP'
    | 'TRY'
    | 'TTD'
    | 'TWD'
    | 'TZS'
    | 'UAH'
    | 'UGX'
    | 'USD'
    | 'UYU'
    | 'UZS'
    | 'VEF'
    | 'VND'
    | 'VUV'
    | 'WST'
    | 'XAF'
    | 'XCD'
    | 'XOF'
    | 'XPF'
    | 'YER'
    | 'ZAR'
    | 'ZMW';
};

export type IntentToInputOutput = {
  /**
   * QUICKBOOKS_GET_ACCOUNTS
   */
  QUICKBOOKS_GET_ACCOUNTS: [QuickbooksGetAccounts, any];

  /**
   * QUICKBOOKS_GET_CUSTOMERS
   */
  QUICKBOOKS_GET_CUSTOMERS: [QuickbooksGetCustomers, any];

  /**
   * QUICKBOOKS_CREATE_CUSTOMER
   */
  QUICKBOOKS_CREATE_CUSTOMER: [QuickbooksCreateCustomer, any];

  /**
   * QUICKBOOKS_UPDATE_CUSTOMER
   */
  QUICKBOOKS_UPDATE_CUSTOMER: [QuickbooksUpdateCustomer, any];

  /**
   * QUICKBOOKS_GET_INVOICES
   */
  QUICKBOOKS_GET_INVOICES: [QuickbooksGetInvoices, any];

  /**
   * QUICKBOOKS_CREATE_INVOICE
   */
  QUICKBOOKS_CREATE_INVOICE: [QuickbooksCreateInvoice, any];

  /**
   * QUICKBOOKS_UPDATE_INVOICE
   */
  QUICKBOOKS_UPDATE_INVOICE: [QuickbooksUpdateInvoice, any];

  /**
   * QUICKBOOKS_SEND_INVOICE
   */
  QUICKBOOKS_SEND_INVOICE: [QuickbooksSendInvoice, any];

  /**
   * QUICKBOOKS_GET_PAYMENTS
   */
  QUICKBOOKS_GET_PAYMENTS: [QuickbooksGetPayments, any];

  /**
   * QUICKBOOKS_CREATE_PAYMENT
   */
  QUICKBOOKS_CREATE_PAYMENT: [QuickbooksCreatePayment, any];
};
