import { ActionStep, ActionTriggerStep } from '@useparagon/core';
import {
  CustomDropdownField,
  DynamicMappingField,
} from '@useparagon/core/inputs';
import { IntegrationOptions } from '@useparagon/core/integration';

import { IntentToInputOutput } from './intents';
import { IntentToInputOutput as TriggerIntentToInputOutput } from './triggers';

type IOutlookIntegrationUserDefinedInput = {
  id: string;
  title: string;
  required?: boolean;
  tooltip?: string;
} & (
  | {
      type:
        | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'boolean'
        | 'password'
        | 'calendar'
        | 'mail_folder'
        | 'time_zone';
    }
  | {
      type: 'custom_dropdown';
      key: string;
      customDropdownOptions?: CustomDropdownField[];
    }
  | {
      type: 'custom_field_mapping';
      objectName: string;
      // these object types values will be used in preview portal
      mockObjectTypes?: DynamicMappingField[];
      // these integration fields values will be used in preview portal
      mockIntegrationFields?: DynamicMappingField[];
    }
);

/**
 * map b/w input type to result
 */
export type InputResultMap = {
  email: string;
  url: string;
  password: string;
  boolean: boolean;
  text: string;
  number: number;
  custom_dropdown: string;
  custom_field_mapping: {
    object: string;
    fields: Record<string, any>;
  };
  calendar: string;
  mail_folder: string;
  time_zone: string;
};

/**
 * pass { variableName for input => Input }
 * this should be used whenever we are creating inputs for integrations/workflows
 * as it will infer proper types
 */
export declare const createInputs: <
  T extends Record<string, IOutlookIntegrationUserDefinedInput>,
>(
  inputs: T,
) => T;

/**
 * integration type for outlook
 */
export type IOutlookIntegration = {
  /**
   * name of integration
   */
  name: string;

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Event
     * method for OUTLOOK_CREATE_EVENT
     */
    createEvent: (
      inputs: IntentToInputOutput['OUTLOOK_CREATE_EVENT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['OUTLOOK_CREATE_EVENT'][0],
      IntentToInputOutput['OUTLOOK_CREATE_EVENT'][1]
    >;

    /**
     * Update Event
     * method for OUTLOOK_UPDATE_EVENT
     */
    updateEvent: (
      inputs: IntentToInputOutput['OUTLOOK_UPDATE_EVENT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['OUTLOOK_UPDATE_EVENT'][0],
      IntentToInputOutput['OUTLOOK_UPDATE_EVENT'][1]
    >;

    /**
     * Get Event by ID
     * method for OUTLOOK_GET_EVENT_BY_ID
     */
    getEventById: (
      inputs: IntentToInputOutput['OUTLOOK_GET_EVENT_BY_ID'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['OUTLOOK_GET_EVENT_BY_ID'][0],
      IntentToInputOutput['OUTLOOK_GET_EVENT_BY_ID'][1]
    >;

    /**
     * Get Events
     * method for OUTLOOK_GET_EVENTS
     */
    getEvents: (
      inputs: IntentToInputOutput['OUTLOOK_GET_EVENTS'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['OUTLOOK_GET_EVENTS'][0],
      IntentToInputOutput['OUTLOOK_GET_EVENTS'][1]
    >;

    /**
     * Delete Event
     * method for OUTLOOK_DELETE_EVENT
     */
    deleteEvent: (
      inputs: IntentToInputOutput['OUTLOOK_DELETE_EVENT'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['OUTLOOK_DELETE_EVENT'][0],
      IntentToInputOutput['OUTLOOK_DELETE_EVENT'][1]
    >;

    /**
     * Get Messages
     * method for OUTLOOK_GET_MESSAGES
     */
    getMessages: (
      inputs: IntentToInputOutput['OUTLOOK_GET_MESSAGES'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['OUTLOOK_GET_MESSAGES'][0],
      IntentToInputOutput['OUTLOOK_GET_MESSAGES'][1]
    >;

    /**
     * Send Message
     * method for OUTLOOK_SEND_MESSAGE
     */
    sendMessage: (
      inputs: IntentToInputOutput['OUTLOOK_SEND_MESSAGE'][0],
      options: IntegrationOptions,
    ) => ActionStep<
      IntentToInputOutput['OUTLOOK_SEND_MESSAGE'][0],
      IntentToInputOutput['OUTLOOK_SEND_MESSAGE'][1]
    >;
  };

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Event Created
     * method for OUTLOOK_TRIGGER_EVENT_CREATED_WEBHOOK
     */
    eventCreatedWebhook: (
      inputs: TriggerIntentToInputOutput['OUTLOOK_TRIGGER_EVENT_CREATED_WEBHOOK'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['OUTLOOK_TRIGGER_EVENT_CREATED_WEBHOOK'][0],
      TriggerIntentToInputOutput['OUTLOOK_TRIGGER_EVENT_CREATED_WEBHOOK'][1]
    >;

    /**
     * Event Updated
     * method for OUTLOOK_TRIGGER_EVENT_UPDATED_WEBHOOK
     */
    eventUpdatedWebhook: (
      inputs: TriggerIntentToInputOutput['OUTLOOK_TRIGGER_EVENT_UPDATED_WEBHOOK'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['OUTLOOK_TRIGGER_EVENT_UPDATED_WEBHOOK'][0],
      TriggerIntentToInputOutput['OUTLOOK_TRIGGER_EVENT_UPDATED_WEBHOOK'][1]
    >;

    /**
     * Event Removed
     * method for OUTLOOK_TRIGGER_EVENT_REMOVED_WEBHOOK
     */
    eventRemovedWebhook: (
      inputs: TriggerIntentToInputOutput['OUTLOOK_TRIGGER_EVENT_REMOVED_WEBHOOK'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['OUTLOOK_TRIGGER_EVENT_REMOVED_WEBHOOK'][0],
      TriggerIntentToInputOutput['OUTLOOK_TRIGGER_EVENT_REMOVED_WEBHOOK'][1]
    >;

    /**
     * New Message
     * method for OUTLOOK_TRIGGER_NEW_MESSAGE_WEBHOOK
     */
    newMessageWebhook: (
      inputs: TriggerIntentToInputOutput['OUTLOOK_TRIGGER_NEW_MESSAGE_WEBHOOK'][0],
    ) => ActionTriggerStep<
      TriggerIntentToInputOutput['OUTLOOK_TRIGGER_NEW_MESSAGE_WEBHOOK'][0],
      TriggerIntentToInputOutput['OUTLOOK_TRIGGER_NEW_MESSAGE_WEBHOOK'][1]
    >;
  };
};
