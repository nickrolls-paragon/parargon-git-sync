const { ActionStep, ActionTriggerStep } = require('@useparagon/core');

/**
 * this should be used whenever we are creating inputs for integrations/workflows
 */
exports.createInputs = (inputs) => inputs;

/**
 * inputs for outlook
 */
exports.inputs = [
  {
    id: 'calendarCacheKey',
    title: 'Calendar',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'mailFolderCacheKey',
    title: 'Mail Folder',
    type: 'DYNAMIC_DATA_SOURCE',
  },
  {
    id: 'supportedTimeZonesCacheKey',
    title: 'TimeZone',
    type: 'DYNAMIC_DATA_SOURCE',
  },
];

/**
 * triggers for outlook
 */
exports.triggers = [
  {
    title: 'Event Created',
    name: 'OUTLOOK_TRIGGER_EVENT_CREATED_WEBHOOK',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a user ID to perform this action if you are working with an application token.',
        placeholder: '1b671a64-40d5-491e-99b0-da01ff1f3341',
      },
    ],
  },
  {
    title: 'Event Updated',
    name: 'OUTLOOK_TRIGGER_EVENT_UPDATED_WEBHOOK',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a user ID to perform this action if you are working with an application token.',
        placeholder: '1b671a64-40d5-491e-99b0-da01ff1f3341',
      },
    ],
  },
  {
    title: 'Event Removed',
    name: 'OUTLOOK_TRIGGER_EVENT_REMOVED_WEBHOOK',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a user ID to perform this action if you are working with an application token.',
        placeholder: '1b671a64-40d5-491e-99b0-da01ff1f3341',
      },
    ],
  },
  {
    title: 'New Message',
    name: 'OUTLOOK_TRIGGER_NEW_MESSAGE_WEBHOOK',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a user ID to perform this action if you are working with an application token.',
        placeholder: '1b671a64-40d5-491e-99b0-da01ff1f3341',
      },
      {
        id: 'mailFolder',
        title: 'Mail Folder',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which mail folder to get messages from. Defaults to the user’s primary mail folder if left blank.',
        placeholder: '{{settings.mailfolder}}',
      },
    ],
  },
];

/**
 * intents for outlook
 */
exports.intents = [
  {
    title: 'Create Event',
    name: 'OUTLOOK_CREATE_EVENT',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a user ID to perform this action if you are working with an application token.',
        placeholder: '1b671a64-40d5-491e-99b0-da01ff1f3341',
      },
      {
        id: 'subject',
        title: 'Subject',
        type: 'TEXTAREA',
        subtitle: 'The text of the event’s subject line.',
        required: true,
      },
      {
        id: 'startTime',
        title: 'Start Time',
        type: 'TEXTAREA',
        subtitle: 'Accepts YYYY-MM-DD[T]HH:MM:SS date formats.',
        required: true,
      },
      {
        id: 'timeZone',
        title: 'TimeZone',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which timezone the event will be added to. Defaults to the UTC timezone if left blank.',
        placeholder: '{{settings.timezone}}',
      },
      {
        id: 'endTime',
        title: 'End Time',
        type: 'TEXTAREA',
        subtitle:
          'Accepts date in YYYY-MM-DD[T]HH:MM:SS format. Defaults to one hour after the start time if left blank.',
      },
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which calendar the event will be added to. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
      {
        id: 'description',
        title: 'Description',
        type: 'TEXTAREA',
        subtitle: 'The message associated with the event.',
      },
      {
        id: 'contentType',
        title: 'Content Type',
        type: 'EDITABLE_ENUM',
        defaultValue: 'text',
        values: ['text', 'html'],
      },
      {
        id: 'locationName',
        title: 'Location Name',
        type: 'TEXTAREA',
        subtitle: 'Display name of the event location.',
      },
      {
        id: 'locationUrl',
        title: 'Location URL',
        type: 'TEXTAREA',
        subtitle: 'URL representing the location.',
      },
      {
        id: 'attendees',
        title: 'Attendees',
        type: 'TEXTAREA',
        subtitle:
          'Accepts an array of email addresses or email addresses separated by commas.',
      },
    ],
  },
  {
    title: 'Update Event',
    name: 'OUTLOOK_UPDATE_EVENT',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a user ID to perform this action if you are working with an application token.',
        placeholder: '1b671a64-40d5-491e-99b0-da01ff1f3341',
      },
      {
        id: 'eventId',
        title: 'Event ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the event to update.',
        required: true,
      },
      {
        id: 'subject',
        title: 'Subject',
        type: 'TEXTAREA',
        subtitle: 'The text of the event’s subject line.',
      },
      {
        id: 'startTime',
        title: 'Start Time',
        type: 'TEXTAREA',
        subtitle: 'Accepts YYYY-MM-DD[T]HH:MM:SS date formats.',
      },
      {
        id: 'timeZone',
        title: 'TimeZone',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which timezone the event will be added to. Defaults to the UTC timezone if left blank.',
        placeholder: '{{settings.timezone}}',
      },
      {
        id: 'endTime',
        title: 'End Time',
        type: 'TEXTAREA',
        subtitle: 'Accepts date in YYYY-MM-DD[T]HH:MM:SS format.',
      },
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which calendar the event will be added to. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
      {
        id: 'description',
        title: 'Description',
        type: 'TEXTAREA',
        subtitle: 'The message associated with the event.',
      },
      {
        id: 'contentType',
        title: 'Content Type',
        type: 'EDITABLE_ENUM',
        defaultValue: 'text',
        values: ['text', 'html'],
      },
      {
        id: 'locationName',
        title: 'Location Name',
        type: 'TEXTAREA',
        subtitle: 'Display name of the event location.',
      },
      {
        id: 'locationUrl',
        title: 'Location URL',
        type: 'TEXTAREA',
        subtitle: 'URL representing the location.',
      },
      {
        id: 'attendees',
        title: 'Attendees',
        type: 'TEXTAREA',
        subtitle:
          'Accepts an array of email addresses or email addresses separated by commas.',
      },
    ],
  },
  {
    title: 'Get Event by ID',
    name: 'OUTLOOK_GET_EVENT_BY_ID',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a user ID to perform this action if you are working with an application token.',
        placeholder: '1b671a64-40d5-491e-99b0-da01ff1f3341',
      },
      {
        id: 'eventId',
        title: 'Event ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the event to get.',
        required: true,
      },
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select calendar. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
    ],
  },
  {
    title: 'Get Events',
    name: 'OUTLOOK_GET_EVENTS',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a user ID to perform this action if you are working with an application token.',
        placeholder: '1b671a64-40d5-491e-99b0-da01ff1f3341',
      },
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which calendar the event will be added to. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
      {
        id: 'eventsFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Search for events that match specified filters.',
        supportedKeys: [
          'subject',
          'importance',
          'sensitivity',
          'start/dateTime',
          'end/dateTime',
          'location/displayName',
          'organizer/emailAddress/name',
        ],
        supportedOperators: [
          '$stringExactlyMatches',
          '$stringDoesNotExactlyMatch',
          '$dateTimeAfter',
          '$dateTimeBefore',
          '$dateTimeEquals',
          '$booleanFalse',
          '$booleanTrue',
        ],
      },
    ],
  },
  {
    title: 'Delete Event',
    name: 'OUTLOOK_DELETE_EVENT',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a user ID to perform this action if you are working with an application token.',
        placeholder: '1b671a64-40d5-491e-99b0-da01ff1f3341',
      },
      {
        id: 'eventId',
        title: 'Event ID',
        type: 'TEXTAREA',
        subtitle: 'The ID of the event to delete.',
        required: true,
      },
      {
        id: 'calendarId',
        title: 'Calendar',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which calendar event will be deleted. Defaults to the user’s primary calendar if left blank.',
        placeholder: '{{settings.calendar}}',
      },
    ],
  },
  {
    title: 'Get Messages',
    name: 'OUTLOOK_GET_MESSAGES',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a user ID to perform this action if you are working with an application token.',
        placeholder: '1b671a64-40d5-491e-99b0-da01ff1f3341',
      },
      {
        id: 'mailFolder',
        title: 'Mail Folder',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which mail folder to get messages from. Defaults to the user’s primary mail folder if left blank.',
        placeholder: '{{settings.mailfolder}}',
      },
      {
        id: 'messagesFilterFormula',
        title: 'Filter search',
        type: 'CONDITIONAL',
        subtitle: 'Filter results by search keywords.',
        supportedKeys: [
          'subject',
          'sender/emailAddress/address',
          'isDraft',
          'isRead',
        ],
        supportedOperators: [
          '$stringExactlyMatches',
          '$booleanTrue',
          '$booleanFalse',
          '$stringContains',
          '$stringEndsWith',
          '$stringStartsWith',
        ],
      },
      {
        id: 'limitResults',
        title: 'Limit Results',
        type: 'TEXTAREA',
        subtitle:
          'Limit the maximum number of messages to return. Defaults to 10 if left blank. Maximum is 1,000.',
      },
    ],
  },
  {
    title: 'Send Message',
    name: 'OUTLOOK_SEND_MESSAGE',
    output: [],
    inputs: [
      {
        id: 'userId',
        title: 'User ID',
        type: 'TEXTAREA',
        subtitle:
          'Specify a user ID to perform this action if you are working with an application token.',
        placeholder: '1b671a64-40d5-491e-99b0-da01ff1f3341',
      },
      {
        id: 'subject',
        title: 'Subject',
        type: 'TEXTAREA',
        subtitle: 'The text of the event’s subject line.',
        required: true,
      },
      {
        id: 'messageBody',
        title: 'Message Body',
        type: 'TEXTAREA',
        required: true,
      },
      {
        id: 'contentType',
        title: 'Content Type',
        type: 'EDITABLE_ENUM',
        required: true,
        defaultValue: 'text',
        values: ['text', 'html'],
      },
      {
        id: 'attachments',
        title: 'Attachments',
        type: 'TEXTAREA',
        subtitle:
          'Accepts either a single file object or a JSON array of file objects',
        placeholder: '[{file object}, {file object}]',
      },
      {
        id: 'toRecipients',
        title: 'To recipients',
        type: 'TEXTAREA',
        subtitle:
          'Accepts an array of email addresses or email addresses separated by commas.',
        required: true,
      },
      {
        id: 'ccRecipients',
        title: 'CC recipients',
        type: 'TEXTAREA',
        subtitle:
          'Accepts an array of email addresses or email addresses separated by commas.',
      },
      {
        id: 'bccRecipients',
        title: 'BCC recipients',
        type: 'TEXTAREA',
        subtitle:
          'Accepts an array of email addresses or email addresses separated by commas.',
      },
      {
        id: 'mailFolder',
        title: 'Mail Folder',
        type: 'TEXTAREA',
        subtitle:
          'Use Connect Portal Workflow Settings to allow users to select which mail folder to send from. Defaults to the user’s primary mail folder if left blank.',
        placeholder: '{{settings.mailfolder}}',
      },
    ],
  },
];

/**
 * integration class for outlook
 */
exports.integration = {
  /**
   * name of integration
   */
  name: 'outlook',

  /**
   * action step methods
   */
  actions: {
    /**
     * Create Event
     * method for OUTLOOK_CREATE_EVENT
     */
    createEvent: (inputs, options) => {
      return new ActionStep({
        intent: 'OUTLOOK_CREATE_EVENT',
        actionType: 'outlook',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Update Event
     * method for OUTLOOK_UPDATE_EVENT
     */
    updateEvent: (inputs, options) => {
      return new ActionStep({
        intent: 'OUTLOOK_UPDATE_EVENT',
        actionType: 'outlook',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Event by ID
     * method for OUTLOOK_GET_EVENT_BY_ID
     */
    getEventById: (inputs, options) => {
      return new ActionStep({
        intent: 'OUTLOOK_GET_EVENT_BY_ID',
        actionType: 'outlook',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Events
     * method for OUTLOOK_GET_EVENTS
     */
    getEvents: (inputs, options) => {
      return new ActionStep({
        intent: 'OUTLOOK_GET_EVENTS',
        actionType: 'outlook',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Delete Event
     * method for OUTLOOK_DELETE_EVENT
     */
    deleteEvent: (inputs, options) => {
      return new ActionStep({
        intent: 'OUTLOOK_DELETE_EVENT',
        actionType: 'outlook',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Get Messages
     * method for OUTLOOK_GET_MESSAGES
     */
    getMessages: (inputs, options) => {
      return new ActionStep({
        intent: 'OUTLOOK_GET_MESSAGES',
        actionType: 'outlook',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
    /**
     * Send Message
     * method for OUTLOOK_SEND_MESSAGE
     */
    sendMessage: (inputs, options) => {
      return new ActionStep({
        intent: 'OUTLOOK_SEND_MESSAGE',
        actionType: 'outlook',
        parameters: inputs,
        description: options.description,
        autoRetry: options.autoRetry,
        continueWorkflowOnError: options.continueWorkflowOnError,
      });
    },
  },

  /**
   * trigger step methods
   */
  triggers: {
    /**
     * Event Created
     * method for OUTLOOK_TRIGGER_EVENT_CREATED_WEBHOOK
     */
    eventCreatedWebhook: (inputs) => {
      return new ActionTriggerStep({
        intent: 'OUTLOOK_TRIGGER_EVENT_CREATED_WEBHOOK',
        actionType: 'outlook',
        parameters: inputs,
      });
    },
    /**
     * Event Updated
     * method for OUTLOOK_TRIGGER_EVENT_UPDATED_WEBHOOK
     */
    eventUpdatedWebhook: (inputs) => {
      return new ActionTriggerStep({
        intent: 'OUTLOOK_TRIGGER_EVENT_UPDATED_WEBHOOK',
        actionType: 'outlook',
        parameters: inputs,
      });
    },
    /**
     * Event Removed
     * method for OUTLOOK_TRIGGER_EVENT_REMOVED_WEBHOOK
     */
    eventRemovedWebhook: (inputs) => {
      return new ActionTriggerStep({
        intent: 'OUTLOOK_TRIGGER_EVENT_REMOVED_WEBHOOK',
        actionType: 'outlook',
        parameters: inputs,
      });
    },
    /**
     * New Message
     * method for OUTLOOK_TRIGGER_NEW_MESSAGE_WEBHOOK
     */
    newMessageWebhook: (inputs) => {
      return new ActionTriggerStep({
        intent: 'OUTLOOK_TRIGGER_NEW_MESSAGE_WEBHOOK',
        actionType: 'outlook',
        parameters: inputs,
      });
    },
  },
};
