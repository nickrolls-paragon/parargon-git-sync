import { ConditionalInput } from '@useparagon/core/steps/library/conditional';

/**
 * Create Event intent type
 */
type OutlookCreateEvent = {
  /**
   * User ID
   * Specify a user ID to perform this action if you are working with an application token.
   *
   * **Example**:
   * ```
   * 1b671a64-40d5-491e-99b0-da01ff1f3341
   * ```
   */
  userId?: string;

  /**
   * Subject
   * The text of the event’s subject line.
   *
   */
  subject: string;

  /**
   * Start Time
   * Accepts YYYY-MM-DD[T]HH:MM:SS date formats.
   *
   */
  startTime: string;

  /**
   * TimeZone
   * Use Connect Portal Workflow Settings to allow users to select which timezone the event will be added to. Defaults to the UTC timezone if left blank.
   *
   * **Example**:
   * ```
   * {{settings.timezone}}
   * ```
   */
  timeZone?: string;

  /**
   * End Time
   * Accepts date in YYYY-MM-DD[T]HH:MM:SS format. Defaults to one hour after the start time if left blank.
   *
   */
  endTime?: string;

  /**
   * Calendar
   * Use Connect Portal Workflow Settings to allow users to select which calendar the event will be added to. Defaults to the user’s primary calendar if left blank.
   *
   * **Example**:
   * ```
   * {{settings.calendar}}
   * ```
   */
  calendarId?: string;

  /**
   * Description
   * The message associated with the event.
   *
   */
  description?: string;

  /**
   * Content Type
   *
   */
  contentType?: 'text' | 'html';

  /**
   * Location Name
   * Display name of the event location.
   *
   */
  locationName?: string;

  /**
   * Location URL
   * URL representing the location.
   *
   */
  locationUrl?: string;

  /**
   * Attendees
   * Accepts an array of email addresses or email addresses separated by commas.
   *
   */
  attendees?: string;
};

/**
 * Update Event intent type
 */
type OutlookUpdateEvent = {
  /**
   * User ID
   * Specify a user ID to perform this action if you are working with an application token.
   *
   * **Example**:
   * ```
   * 1b671a64-40d5-491e-99b0-da01ff1f3341
   * ```
   */
  userId?: string;

  /**
   * Event ID
   * The ID of the event to update.
   *
   */
  eventId: string;

  /**
   * Subject
   * The text of the event’s subject line.
   *
   */
  subject?: string;

  /**
   * Start Time
   * Accepts YYYY-MM-DD[T]HH:MM:SS date formats.
   *
   */
  startTime?: string;

  /**
   * TimeZone
   * Use Connect Portal Workflow Settings to allow users to select which timezone the event will be added to. Defaults to the UTC timezone if left blank.
   *
   * **Example**:
   * ```
   * {{settings.timezone}}
   * ```
   */
  timeZone?: string;

  /**
   * End Time
   * Accepts date in YYYY-MM-DD[T]HH:MM:SS format.
   *
   */
  endTime?: string;

  /**
   * Calendar
   * Use Connect Portal Workflow Settings to allow users to select which calendar the event will be added to. Defaults to the user’s primary calendar if left blank.
   *
   * **Example**:
   * ```
   * {{settings.calendar}}
   * ```
   */
  calendarId?: string;

  /**
   * Description
   * The message associated with the event.
   *
   */
  description?: string;

  /**
   * Content Type
   *
   */
  contentType?: 'text' | 'html';

  /**
   * Location Name
   * Display name of the event location.
   *
   */
  locationName?: string;

  /**
   * Location URL
   * URL representing the location.
   *
   */
  locationUrl?: string;

  /**
   * Attendees
   * Accepts an array of email addresses or email addresses separated by commas.
   *
   */
  attendees?: string;
};

/**
 * Get Event by ID intent type
 */
type OutlookGetEventById = {
  /**
   * User ID
   * Specify a user ID to perform this action if you are working with an application token.
   *
   * **Example**:
   * ```
   * 1b671a64-40d5-491e-99b0-da01ff1f3341
   * ```
   */
  userId?: string;

  /**
   * Event ID
   * The ID of the event to get.
   *
   */
  eventId: string;

  /**
   * Calendar
   * Use Connect Portal Workflow Settings to allow users to select calendar. Defaults to the user’s primary calendar if left blank.
   *
   * **Example**:
   * ```
   * {{settings.calendar}}
   * ```
   */
  calendarId?: string;
};

/**
 * Get Events intent type
 */
type OutlookGetEvents = {
  /**
   * User ID
   * Specify a user ID to perform this action if you are working with an application token.
   *
   * **Example**:
   * ```
   * 1b671a64-40d5-491e-99b0-da01ff1f3341
   * ```
   */
  userId?: string;

  /**
   * Calendar
   * Use Connect Portal Workflow Settings to allow users to select which calendar the event will be added to. Defaults to the user’s primary calendar if left blank.
   *
   * **Example**:
   * ```
   * {{settings.calendar}}
   * ```
   */
  calendarId?: string;

  /**
   * Filter search
   * Search for events that match specified filters.
   *
   */
  eventsFilterFormula?: ConditionalInput;
};

/**
 * Delete Event intent type
 */
type OutlookDeleteEvent = {
  /**
   * User ID
   * Specify a user ID to perform this action if you are working with an application token.
   *
   * **Example**:
   * ```
   * 1b671a64-40d5-491e-99b0-da01ff1f3341
   * ```
   */
  userId?: string;

  /**
   * Event ID
   * The ID of the event to delete.
   *
   */
  eventId: string;

  /**
   * Calendar
   * Use Connect Portal Workflow Settings to allow users to select which calendar event will be deleted. Defaults to the user’s primary calendar if left blank.
   *
   * **Example**:
   * ```
   * {{settings.calendar}}
   * ```
   */
  calendarId?: string;
};

/**
 * Get Messages intent type
 */
type OutlookGetMessages = {
  /**
   * User ID
   * Specify a user ID to perform this action if you are working with an application token.
   *
   * **Example**:
   * ```
   * 1b671a64-40d5-491e-99b0-da01ff1f3341
   * ```
   */
  userId?: string;

  /**
   * Mail Folder
   * Use Connect Portal Workflow Settings to allow users to select which mail folder to get messages from. Defaults to the user’s primary mail folder if left blank.
   *
   * **Example**:
   * ```
   * {{settings.mailfolder}}
   * ```
   */
  mailFolder?: string;

  /**
   * Filter search
   * Filter results by search keywords.
   *
   */
  messagesFilterFormula?: ConditionalInput;

  /**
   * Limit Results
   * Limit the maximum number of messages to return. Defaults to 10 if left blank. Maximum is 1,000.
   *
   */
  limitResults?: string;
};

/**
 * Send Message intent type
 */
type OutlookSendMessage = {
  /**
   * User ID
   * Specify a user ID to perform this action if you are working with an application token.
   *
   * **Example**:
   * ```
   * 1b671a64-40d5-491e-99b0-da01ff1f3341
   * ```
   */
  userId?: string;

  /**
   * Subject
   * The text of the event’s subject line.
   *
   */
  subject: string;

  /**
   * Message Body
   *
   */
  messageBody: string;

  /**
   * Content Type
   *
   */
  contentType: 'text' | 'html';

  /**
   * Attachments
   * Accepts either a single file object or a JSON array of file objects
   *
   * **Example**:
   * ```
   * [{file object}, {file object}]
   * ```
   */
  attachments?: string;

  /**
   * To recipients
   * Accepts an array of email addresses or email addresses separated by commas.
   *
   */
  toRecipients: string;

  /**
   * CC recipients
   * Accepts an array of email addresses or email addresses separated by commas.
   *
   */
  ccRecipients?: string;

  /**
   * BCC recipients
   * Accepts an array of email addresses or email addresses separated by commas.
   *
   */
  bccRecipients?: string;

  /**
   * Mail Folder
   * Use Connect Portal Workflow Settings to allow users to select which mail folder to send from. Defaults to the user’s primary mail folder if left blank.
   *
   * **Example**:
   * ```
   * {{settings.mailfolder}}
   * ```
   */
  mailFolder?: string;
};

export type IntentToInputOutput = {
  /**
   * OUTLOOK_CREATE_EVENT
   */
  OUTLOOK_CREATE_EVENT: [OutlookCreateEvent, any];

  /**
   * OUTLOOK_UPDATE_EVENT
   */
  OUTLOOK_UPDATE_EVENT: [OutlookUpdateEvent, any];

  /**
   * OUTLOOK_GET_EVENT_BY_ID
   */
  OUTLOOK_GET_EVENT_BY_ID: [OutlookGetEventById, any];

  /**
   * OUTLOOK_GET_EVENTS
   */
  OUTLOOK_GET_EVENTS: [OutlookGetEvents, any];

  /**
   * OUTLOOK_DELETE_EVENT
   */
  OUTLOOK_DELETE_EVENT: [OutlookDeleteEvent, any];

  /**
   * OUTLOOK_GET_MESSAGES
   */
  OUTLOOK_GET_MESSAGES: [OutlookGetMessages, any];

  /**
   * OUTLOOK_SEND_MESSAGE
   */
  OUTLOOK_SEND_MESSAGE: [OutlookSendMessage, any];
};
